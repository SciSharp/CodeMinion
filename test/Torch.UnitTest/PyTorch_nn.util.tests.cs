// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Assert = NUnit.Framework.Assert;

namespace Torch.UnitTest
{
    [TestClass]
    public class PyTorch_nn_utilTest : BaseTestCase
    {
        
        [TestMethod]
        public void weight_normTest()
        {
            // >>> m = weight_norm(nn.Linear(20, 40), name='weight')
            // >>> m
            // Linear(in_features=20, out_features=40, bias=True)
            // >>> m.weight_g.size()
            // torch.Size([40, 1])
            // >>> m.weight_v.size()
            // torch.Size([40, 20])
            // 
            
            #if TODO
            var given=  m = weight_norm(nn.Linear(20, 40), name='weight');
             given=  m;
            var expected=
                "Linear(in_features=20, out_features=40, bias=True)";
            Assert.AreEqual(expected, given.repr);
             given=  m.weight_g.size();
             expected=
                "torch.Size([40, 1])";
            Assert.AreEqual(expected, given.repr);
             given=  m.weight_v.size();
             expected=
                "torch.Size([40, 20])";
            Assert.AreEqual(expected, given.repr);
            #endif
        }
        
        
        [TestMethod]
        public void remove_weight_normTest()
        {
            // >>> m = weight_norm(nn.Linear(20, 40))
            // >>> remove_weight_norm(m)
            // 
            
            #if TODO
            var given=  m = weight_norm(nn.Linear(20, 40));
             given=  remove_weight_norm(m);
            #endif
        }
        
        
        [TestMethod]
        public void spectral_normTest()
        {
            // >>> m = spectral_norm(nn.Linear(20, 40))
            // >>> m
            // Linear(in_features=20, out_features=40, bias=True)
            // >>> m.weight_u.size()
            // torch.Size([40])
            // 
            
            #if TODO
            var given=  m = spectral_norm(nn.Linear(20, 40));
             given=  m;
            var expected=
                "Linear(in_features=20, out_features=40, bias=True)";
            Assert.AreEqual(expected, given.repr);
             given=  m.weight_u.size();
             expected=
                "torch.Size([40])";
            Assert.AreEqual(expected, given.repr);
            #endif
        }
        
        
        [TestMethod]
        public void remove_spectral_normTest()
        {
            // >>> m = spectral_norm(nn.Linear(40, 10))
            // >>> remove_spectral_norm(m)
            // 
            
            #if TODO
            var given=  m = spectral_norm(nn.Linear(40, 10));
             given=  remove_spectral_norm(m);
            #endif
        }
        
        
        [TestMethod]
        public void pad_sequenceTest()
        {
            // >>> from torch.nn.utils.rnn import pad_sequence
            // >>> a = torch.ones(25, 300)
            // >>> b = torch.ones(22, 300)
            // >>> c = torch.ones(15, 300)
            // >>> pad_sequence([a, b, c]).size()
            // torch.Size([25, 3, 300])
            // 
            
            #if TODO
            var given=  from torch.nn.utils.rnn import pad_sequence;
             given=  a = torch.ones(25, 300);
             given=  b = torch.ones(22, 300);
             given=  c = torch.ones(15, 300);
             given=  pad_sequence([a, b, c]).size();
            var expected=
                "torch.Size([25, 3, 300])";
            Assert.AreEqual(expected, given.repr);
            #endif
        }
        
    }
}
