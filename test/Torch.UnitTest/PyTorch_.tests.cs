// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;
using numpy = Numpy.np;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Assert = NUnit.Framework.Assert;

namespace Torch.UnitTest
{
    [TestClass]
    public class PyTorch_Test : BaseTestCase
    {

        [TestMethod]
        public void set_default_dtypeTest()
        {
            torch.set_default_dtype(torch.float32);
            var given = torch.get_default_dtype();  // default is now changed to torch.float64;
            var expected =
                "torch.float32";
            torch.set_default_dtype(torch.float64);
            given = torch.get_default_dtype();  // default is now changed to torch.float64;
            expected =
               "torch.float64";
            Assert.AreEqual(expected, given.repr);
            torch.set_default_tensor_type(torch.FloatTensor); // setting tensor type also affects this;
            given = torch.get_default_dtype();  // changed to torch.float32, the dtype for torch.FloatTensor;
            expected =
               "torch.float32";
            Assert.AreEqual(expected, given.repr);
            // set back to 64bit in order not to disturb other tests
            torch.set_default_dtype(torch.float64);
        }


        [TestMethod]
        public void set_default_tensor_typeTest()
        {
            // >>> torch.tensor([1.2, 3]).dtype    # initial default for floating point is torch.float32
            // torch.float32
            // >>> torch.set_default_tensor_type(torch.DoubleTensor)
            // >>> torch.tensor([1.2, 3]).dtype    # a new floating point tensor
            // torch.float64
            // 

            var given = torch.tensor(new[] { 1.2f, 3 }).dtype;    // initial default for floating point is torch.float32;
            var expected =
                "torch.float32";
            Assert.AreEqual(expected, given.repr);
            torch.set_default_tensor_type(torch.DoubleTensor);
            given = torch.tensor(new[] { 1.2, 3 }).dtype;    // a new floating point tensor;
            expected =
               "torch.float64";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void numelTest()
        {
            // >>> a = torch.randn(1, 2, 3, 4, 5)
            // >>> torch.numel(a)
            // 120
            // >>> a = torch.zeros(4,4)
            // >>> torch.numel(a)
            // 16
            // 

            var a = torch.randn(1, 2, 3, 4, 5);
            var given = torch.numel(a);
            Assert.AreEqual(120, given);

            a = torch.zeros(4, 4);
            given = torch.numel(a);
            Assert.AreEqual(16, given);
        }


        [TestMethod]
        public void set_flush_denormalTest()
        {
            // >>> torch.set_flush_denormal(True)
            // True
            // >>> torch.tensor([1e-323], dtype=torch.float64)
            // tensor([ 0.], dtype=torch.float64)
            // >>> torch.set_flush_denormal(False)
            // True
            // >>> torch.tensor([1e-323], dtype=torch.float64)
            // tensor(9.88131e-324 *
            //        [ 1.0000], dtype=torch.float64)
            // 

#if TODO
            var given=  torch.set_flush_denormal(True);
            var expected=
                "True";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tensor({1e-323}, dtype=torch.float64);
             expected=
                "tensor([ 0.], dtype=torch.float64)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.set_flush_denormal(False);
             expected=
                "True";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tensor({1e-323}, dtype=torch.float64);
             expected=
                "tensor(9.88131e-324 *\n" +
                "       [ 1.0000], dtype=torch.float64)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sparse_coo_tensorTest()
        {
            // >>> i = torch.tensor([[0, 1, 1],
            //                       [2, 0, 2]])
            // >>> v = torch.tensor([3, 4, 5], dtype=torch.float32)
            // >>> torch.sparse_coo_tensor(i, v, [2, 4])
            // tensor(indices=tensor([[0, 1, 1],
            //                        [2, 0, 2]]),
            //        values=tensor([3., 4., 5.]),
            //        size=(2, 4), nnz=3, layout=torch.sparse_coo)
            // 
            // >>> torch.sparse_coo_tensor(i, v)  # Shape inference
            // tensor(indices=tensor([[0, 1, 1],
            //                        [2, 0, 2]]),
            //        values=tensor([3., 4., 5.]),
            //        size=(2, 3), nnz=3, layout=torch.sparse_coo)
            // 
            // >>> torch.sparse_coo_tensor(i, v, [2, 4],
            //                             dtype=torch.float64,
            //                             device=torch.device('cuda:0'))
            // tensor(indices=tensor([[0, 1, 1],
            //                        [2, 0, 2]]),
            //        values=tensor([3., 4., 5.]),
            //        device='cuda:0', size=(2, 4), nnz=3, dtype=torch.float64,
            //        layout=torch.sparse_coo)
            // 
            // # Create an empty sparse tensor with the following invariants:
            // #   1. sparse_dim + dense_dim = len(SparseTensor.shape)
            // #   2. SparseTensor._indices().shape = (sparse_dim, nnz)
            // #   3. SparseTensor._values().shape = (nnz, SparseTensor.shape[sparse_dim:])
            // #
            // # For instance, to create an empty sparse tensor with nnz = 0, dense_dim = 0 and
            // # sparse_dim = 1 (hence indices is a 2D tensor of shape = (1, 0))
            // >>> S = torch.sparse_coo_tensor(torch.empty([1, 0]), [], [1])
            // tensor(indices=tensor([], size=(1, 0)),
            //        values=tensor([], size=(0,)),
            //        size=(1,), nnz=0, layout=torch.sparse_coo)
            // 
            // # and to create an empty sparse tensor with nnz = 0, dense_dim = 1 and
            // # sparse_dim = 1
            // >>> S = torch.sparse_coo_tensor(torch.empty([1, 0]), torch.empty([0, 2]), [1, 2])
            // tensor(indices=tensor([], size=(1, 0)),
            //        values=tensor([], size=(0, 2)),
            //        size=(1, 2), nnz=0, layout=torch.sparse_coo)
            // 

#if TODO
            var given=  i = torch.tensor({{0, 1, 1},;
            var expected=
                "                      [2, 0, 2]])";
            Assert.AreEqual(expected, given.repr);
             given=  v = torch.tensor({3, 4, 5}, dtype=torch.float32);
             given=  torch.sparse_coo_tensor(i, v, {2, 4});
             expected=
                "tensor(indices=tensor([[0, 1, 1],\n" +
                "                       [2, 0, 2]]),\n" +
                "       values=tensor([3., 4., 5.]),\n" +
                "       size=(2, 4), nnz=3, layout=torch.sparse_coo)\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sparse_coo_tensor(i, v)  # Shape inference;
             expected=
                "tensor(indices=tensor([[0, 1, 1],\n" +
                "                       [2, 0, 2]]),\n" +
                "       values=tensor([3., 4., 5.]),\n" +
                "       size=(2, 3), nnz=3, layout=torch.sparse_coo)\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sparse_coo_tensor(i, v, {2, 4},;
             expected=
                "                            dtype=torch.float64,\n" +
                "                            device=torch.device('cuda:0'))\n" +
                "tensor(indices=tensor([[0, 1, 1],\n" +
                "                       [2, 0, 2]]),\n" +
                "       values=tensor([3., 4., 5.]),\n" +
                "       device='cuda:0', size=(2, 4), nnz=3, dtype=torch.float64,\n" +
                "       layout=torch.sparse_coo)\n" +
                "";
            Assert.AreEqual(expected, given.repr);
            // Create an empty sparse tensor with the following invariants:
            //   1. sparse_dim + dense_dim = len(SparseTensor.shape)
            //   2. SparseTensor._indices().shape = (sparse_dim, nnz)
            //   3. SparseTensor._values().shape = (nnz, SparseTensor.shape[sparse_dim:])
            //
            // For instance, to create an empty sparse tensor with nnz = 0, dense_dim = 0 and
            // sparse_dim = 1 (hence indices is a 2D tensor of shape = (1, 0))
             given=  S = torch.sparse_coo_tensor(torch.empty({1, 0}), {}, {1});
             expected=
                "tensor(indices=tensor([], size=(1, 0)),\n" +
                "       values=tensor([], size=(0,)),\n" +
                "       size=(1,), nnz=0, layout=torch.sparse_coo)\n" +
                "";
            Assert.AreEqual(expected, given.repr);
            // and to create an empty sparse tensor with nnz = 0, dense_dim = 1 and
            // sparse_dim = 1
             given=  S = torch.sparse_coo_tensor(torch.empty({1, 0}), torch.empty({0, 2}), {1, 2});
             expected=
                "tensor(indices=tensor([], size=(1, 0)),\n" +
                "       values=tensor([], size=(0, 2)),\n" +
                "       size=(1, 2), nnz=0, layout=torch.sparse_coo)";
            Assert.AreEqual(expected, given.repr);
#endif
        }

        [TestMethod]
        public void as_tensorTest()
        {
            // >>> a = numpy.array([1, 2, 3])
            // >>> t = torch.as_tensor(a)
            // >>> t
            // tensor([ 1,  2,  3])
            // >>> t[0] = -1
            // >>> a
            // array([-1,  2,  3])
            // 
            // >>> a = numpy.array([1, 2, 3])
            // >>> t = torch.as_tensor(a, device=torch.device('cuda'))
            // >>> t
            // tensor([ 1,  2,  3])
            // >>> t[0] = -1
            // >>> a
            // array([1,  2,  3])
            // 

            var a = numpy.array(new[] { 1, 2, 3 });
            var t = torch.as_tensor(a).AsTensor<int>();
            var given = t;
            var expected =
                "tensor([1, 2, 3], dtype=torch.int32)";
            Assert.AreEqual(expected, given.repr);
            t[0] = -1;
            expected =
                "array([-1,  2,  3])";
            Assert.AreEqual(expected, a.repr);
            a = numpy.array(1, 2, 3);
            t = torch.as_tensor(a, device: torch.device("cuda")).AsTensor<int>();
            given = t;
            expected =
               "tensor([1, 2, 3], device='cuda:0', dtype=torch.int32)";
            Assert.AreEqual(expected, given.repr);
            t[0] = -1;
            expected =
               "array([1, 2, 3])";
            Assert.AreEqual(expected, a.repr);
        }


        [TestMethod]
        public void from_numpyTest()
        {
            // >>> a = numpy.array([1, 2, 3])
            // >>> t = torch.from_numpy(a)
            // >>> t
            // tensor([ 1,  2,  3])
            // >>> t[0] = -1
            // >>> a
            // array([-1,  2,  3])
            // 

            var a = numpy.array(1, 2, 3);
            var t = torch.from_numpy(a);
            var x = (int)t[0];
            Assert.AreEqual(1, x);
            var given = t;
            var expected =
                "tensor([1, 2, 3], dtype=torch.int32)";
            Assert.AreEqual(expected, given.repr);
            t[0] = (Tensor)(-1);
            expected =
               "array([-1,  2,  3])";
            Assert.AreEqual(expected, a.repr);
        }


        [TestMethod]
        public void zerosTest()
        {
            // >>> torch.zeros(2, 3)
            // tensor([[ 0.,  0.,  0.],
            //         [ 0.,  0.,  0.]])
            // 
            // >>> torch.zeros(5)
            // tensor([ 0.,  0.,  0.,  0.,  0.])
            // 

            var given = torch.zeros(2, 3);
            var expected =
                "tensor([[0., 0., 0.],\n" +
                "        [0., 0., 0.]])";
            Assert.AreEqual(expected, given.repr);
            given = torch.zeros(5);
            expected =
               "tensor([0., 0., 0., 0., 0.])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void zeros_likeTest()
        {
            // >>> input = torch.empty(2, 3)
            // >>> torch.zeros_like(input)
            // tensor([[ 0.,  0.,  0.],
            //         [ 0.,  0.,  0.]])
            // 

            var input = torch.empty(2, 3);
            var given = torch.zeros_like(input);
            var expected =
                "tensor([[0., 0., 0.],\n" +
                "        [0., 0., 0.]])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void onesTest()
        {
            // >>> torch.ones(2, 3)
            // tensor([[ 1.,  1.,  1.],
            //         [ 1.,  1.,  1.]])
            // 
            // >>> torch.ones(5)
            // tensor([ 1.,  1.,  1.,  1.,  1.])
            // 

            var given = torch.ones(2, 3);
            var expected =
                "tensor([[1., 1., 1.],\n" +
                "        [1., 1., 1.]])";
            Assert.AreEqual(expected, given.repr);
            given = torch.ones(5);
            expected =
               "tensor([1., 1., 1., 1., 1.])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void ones_likeTest()
        {
            // >>> input = torch.empty(2, 3)
            // >>> torch.ones_like(input)
            // tensor([[ 1.,  1.,  1.],
            //         [ 1.,  1.,  1.]])
            // 

            var input = torch.empty(2, 3);
            var given = torch.ones_like(input);
            var expected =
                "tensor([[1., 1., 1.],\n" +
                "        [1., 1., 1.]])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void arangeTest()
        {
            // >>> torch.arange(5)
            // tensor([ 0,  1,  2,  3,  4])
            // >>> torch.arange(1, 4)
            // tensor([ 1,  2,  3])
            // >>> torch.arange(1, 2.5, 0.5)
            // tensor([ 1.0000,  1.5000,  2.0000])
            // 

            var given = torch.arange(5);
            var expected =
                "tensor([0, 1, 2, 3, 4])";
            Assert.AreEqual(expected, given.repr);
            given = torch.arange(1, 4);
            expected =
               "tensor([1, 2, 3])";
            Assert.AreEqual(expected, given.repr);
            given = torch.arange(1, 2.5, 0.5);
            expected =
               "tensor([1.0000, 1.5000, 2.0000])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void rangeTest()
        {
            // >>> torch.range(1, 4)
            // tensor([ 1.,  2.,  3.,  4.])
            // >>> torch.range(1, 4, 0.5)
            // tensor([ 1.0000,  1.5000,  2.0000,  2.5000,  3.0000,  3.5000,  4.0000])
            // 

            var given = torch.range(1, 4);
            var expected =
                "tensor([1., 2., 3., 4.])";
            Assert.AreEqual(expected, given.repr);
            given = torch.range(1f, 4f, 0.5f);
            expected =
               "tensor([1.0000, 1.5000, 2.0000, 2.5000, 3.0000, 3.5000, 4.0000])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void linspaceTest()
        {
            // >>> torch.linspace(3, 10, steps=5)
            // tensor([  3.0000,   4.7500,   6.5000,   8.2500,  10.0000])
            // >>> torch.linspace(-10, 10, steps=5)
            // tensor([-10.,  -5.,   0.,   5.,  10.])
            // >>> torch.linspace(start=-10, end=10, steps=5)
            // tensor([-10.,  -5.,   0.,   5.,  10.])
            // >>> torch.linspace(start=-10, end=10, steps=1)
            // tensor([-10.])
            // 

            var given = torch.linspace(3, 10, steps: 5);
            var expected =
                "tensor([ 3.0000,  4.7500,  6.5000,  8.2500, 10.0000])";
            Assert.AreEqual(expected, given.repr);
            given = torch.linspace(-10, 10, steps: 5);
            expected =
               "tensor([-10.,  -5.,   0.,   5.,  10.])";
            Assert.AreEqual(expected, given.repr);
            given = torch.linspace(start: -10, end: 10, steps: 5);
            expected =
               "tensor([-10.,  -5.,   0.,   5.,  10.])";
            Assert.AreEqual(expected, given.repr);
            given = torch.linspace(start: -10, end: 10, steps: 1);
            expected =
               "tensor([-10.])";
            Assert.AreEqual(expected, given.repr);
        }


        [TestMethod]
        public void logspaceTest()
        {
            // >>> torch.logspace(start=-10, end=10, steps=5)
            // tensor([ 1.0000e-10,  1.0000e-05,  1.0000e+00,  1.0000e+05,  1.0000e+10])
            // >>> torch.logspace(start=0.1, end=1.0, steps=5)
            // tensor([  1.2589,   2.1135,   3.5481,   5.9566,  10.0000])
            // >>> torch.logspace(start=0.1, end=1.0, steps=1)
            // tensor([1.2589])
            // >>> torch.logspace(start=2, end=2, steps=1, base=2)
            // tensor([4.0])
            // 

#if TODO
            var given=  torch.logspace(start=-10, end=10, steps=5);
            var expected=
                "tensor([ 1.0000e-10,  1.0000e-05,  1.0000e+00,  1.0000e+05,  1.0000e+10])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.logspace(start=0.1, end=1.0, steps=5);
             expected=
                "tensor([  1.2589,   2.1135,   3.5481,   5.9566,  10.0000])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.logspace(start=0.1, end=1.0, steps=1);
             expected=
                "tensor([1.2589])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.logspace(start=2, end=2, steps=1, base=2);
             expected=
                "tensor([4.0])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void eyeTest()
        {
            // >>> torch.eye(3)
            // tensor([[ 1.,  0.,  0.],
            //         [ 0.,  1.,  0.],
            //         [ 0.,  0.,  1.]])
            // 

#if TODO
            var given=  torch.eye(3);
            var expected=
                "tensor([[ 1.,  0.,  0.],\n" +
                "        [ 0.,  1.,  0.],\n" +
                "        [ 0.,  0.,  1.]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void emptyTest()
        {
            // >>> torch.empty(2, 3)
            // tensor(1.00000e-08 *
            //        [[ 6.3984,  0.0000,  0.0000],
            //         [ 0.0000,  0.0000,  0.0000]])
            // 

#if TODO
            var given=  torch.empty(2, 3);
            var expected=
                "tensor(1.00000e-08 *\n" +
                "       [[ 6.3984,  0.0000,  0.0000],\n" +
                "        [ 0.0000,  0.0000,  0.0000]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void empty_likeTest()
        {
            // >>> torch.empty((2,3), dtype=torch.int64)
            // tensor([[ 9.4064e+13,  2.8000e+01,  9.3493e+13],
            //         [ 7.5751e+18,  7.1428e+18,  7.5955e+18]])
            // 

#if TODO
            var given=  torch.empty((2,3), dtype=torch.int64);
            var expected=
                "tensor([[ 9.4064e+13,  2.8000e+01,  9.3493e+13],\n" +
                "        [ 7.5751e+18,  7.1428e+18,  7.5955e+18]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void fullTest()
        {
            // >>> torch.full((2, 3), 3.141592)
            // tensor([[ 3.1416,  3.1416,  3.1416],
            //         [ 3.1416,  3.1416,  3.1416]])
            // 

#if TODO
            var given=  torch.full((2, 3), 3.141592);
            var expected=
                "tensor([[ 3.1416,  3.1416,  3.1416],\n" +
                "        [ 3.1416,  3.1416,  3.1416]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void catTest()
        {
            // >>> x = torch.randn(2, 3)
            // >>> x
            // tensor([[ 0.6580, -1.0969, -0.4614],
            //         [-0.1034, -0.5790,  0.1497]])
            // >>> torch.cat((x, x, x), 0)
            // tensor([[ 0.6580, -1.0969, -0.4614],
            //         [-0.1034, -0.5790,  0.1497],
            //         [ 0.6580, -1.0969, -0.4614],
            //         [-0.1034, -0.5790,  0.1497],
            //         [ 0.6580, -1.0969, -0.4614],
            //         [-0.1034, -0.5790,  0.1497]])
            // >>> torch.cat((x, x, x), 1)
            // tensor([[ 0.6580, -1.0969, -0.4614,  0.6580, -1.0969, -0.4614,  0.6580,
            //          -1.0969, -0.4614],
            //         [-0.1034, -0.5790,  0.1497, -0.1034, -0.5790,  0.1497, -0.1034,
            //          -0.5790,  0.1497]])
            // 

#if TODO
            var given=  x = torch.randn(2, 3);
             given=  x;
            var expected=
                "tensor([[ 0.6580, -1.0969, -0.4614],\n" +
                "        [-0.1034, -0.5790,  0.1497]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cat((x, x, x), 0);
             expected=
                "tensor([[ 0.6580, -1.0969, -0.4614],\n" +
                "        [-0.1034, -0.5790,  0.1497],\n" +
                "        [ 0.6580, -1.0969, -0.4614],\n" +
                "        [-0.1034, -0.5790,  0.1497],\n" +
                "        [ 0.6580, -1.0969, -0.4614],\n" +
                "        [-0.1034, -0.5790,  0.1497]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cat((x, x, x), 1);
             expected=
                "tensor([[ 0.6580, -1.0969, -0.4614,  0.6580, -1.0969, -0.4614,  0.6580,\n" +
                "         -1.0969, -0.4614],\n" +
                "        [-0.1034, -0.5790,  0.1497, -0.1034, -0.5790,  0.1497, -0.1034,\n" +
                "         -0.5790,  0.1497]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void gatherTest()
        {
            // out[i][j][k] = input[index[i][j][k]][j][k]  # if dim == 0
            // out[i][j][k] = input[i][index[i][j][k]][k]  # if dim == 1
            // out[i][j][k] = input[i][j][index[i][j][k]]  # if dim == 2
            // 

#if TODO
            var expected=
                "out[i][j][k] = input[index[i][j][k]][j][k]  # if dim == 0\n" +
                "out[i][j][k] = input[i][index[i][j][k]][k]  # if dim == 1\n" +
                "out[i][j][k] = input[i][j][index[i][j][k]]  # if dim == 2";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> t = torch.tensor([[1,2],[3,4]])
            // >>> torch.gather(t, 1, torch.tensor([[0,0],[1,0]]))
            // tensor([[ 1,  1],
            //         [ 4,  3]])
            // 

#if TODO
            var given=  t = torch.tensor({{1,2},{3,4}});
             given=  torch.gather(t, 1, torch.tensor({{0,0},{1,0}}));
             expected=
                "tensor([[ 1,  1],\n" +
                "        [ 4,  3]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void index_selectTest()
        {
            // >>> x = torch.randn(3, 4)
            // >>> x
            // tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],
            //         [-0.4664,  0.2647, -0.1228, -1.1068],
            //         [-1.1734, -0.6571,  0.7230, -0.6004]])
            // >>> indices = torch.tensor([0, 2])
            // >>> torch.index_select(x, 0, indices)
            // tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],
            //         [-1.1734, -0.6571,  0.7230, -0.6004]])
            // >>> torch.index_select(x, 1, indices)
            // tensor([[ 0.1427, -0.5414],
            //         [-0.4664, -0.1228],
            //         [-1.1734,  0.7230]])
            // 

#if TODO
            var given=  x = torch.randn(3, 4);
             given=  x;
            var expected=
                "tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],\n" +
                "        [-0.4664,  0.2647, -0.1228, -1.1068],\n" +
                "        [-1.1734, -0.6571,  0.7230, -0.6004]])";
            Assert.AreEqual(expected, given.repr);
             given=  indices = torch.tensor({0, 2});
             given=  torch.index_select(x, 0, indices);
             expected=
                "tensor([[ 0.1427,  0.0231, -0.5414, -1.0009],\n" +
                "        [-1.1734, -0.6571,  0.7230, -0.6004]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.index_select(x, 1, indices);
             expected=
                "tensor([[ 0.1427, -0.5414],\n" +
                "        [-0.4664, -0.1228],\n" +
                "        [-1.1734,  0.7230]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void masked_selectTest()
        {
            // >>> x = torch.randn(3, 4)
            // >>> x
            // tensor([[ 0.3552, -2.3825, -0.8297,  0.3477],
            //         [-1.2035,  1.2252,  0.5002,  0.6248],
            //         [ 0.1307, -2.0608,  0.1244,  2.0139]])
            // >>> mask = x.ge(0.5)
            // >>> mask
            // tensor([[ 0,  0,  0,  0],
            //         [ 0,  1,  1,  1],
            //         [ 0,  0,  0,  1]], dtype=torch.uint8)
            // >>> torch.masked_select(x, mask)
            // tensor([ 1.2252,  0.5002,  0.6248,  2.0139])
            // 

#if TODO
            var given=  x = torch.randn(3, 4);
             given=  x;
            var expected=
                "tensor([[ 0.3552, -2.3825, -0.8297,  0.3477],\n" +
                "        [-1.2035,  1.2252,  0.5002,  0.6248],\n" +
                "        [ 0.1307, -2.0608,  0.1244,  2.0139]])";
            Assert.AreEqual(expected, given.repr);
             given=  mask = x.ge(0.5);
             given=  mask;
             expected=
                "tensor([[ 0,  0,  0,  0],\n" +
                "        [ 0,  1,  1,  1],\n" +
                "        [ 0,  0,  0,  1]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.masked_select(x, mask);
             expected=
                "tensor([ 1.2252,  0.5002,  0.6248,  2.0139])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void narrowTest()
        {
            // >>> x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
            // >>> torch.narrow(x, 0, 0, 2)
            // tensor([[ 1,  2,  3],
            //         [ 4,  5,  6]])
            // >>> torch.narrow(x, 1, 1, 2)
            // tensor([[ 2,  3],
            //         [ 5,  6],
            //         [ 8,  9]])
            // 

#if TODO
            var given=  x = torch.tensor({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}});
             given=  torch.narrow(x, 0, 0, 2);
            var expected=
                "tensor([[ 1,  2,  3],\n" +
                "        [ 4,  5,  6]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.narrow(x, 1, 1, 2);
             expected=
                "tensor([[ 2,  3],\n" +
                "        [ 5,  6],\n" +
                "        [ 8,  9]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void nonzeroTest()
        {
            // >>> torch.nonzero(torch.tensor([1, 1, 1, 0, 1]))
            // tensor([[ 0],
            //         [ 1],
            //         [ 2],
            //         [ 4]])
            // >>> torch.nonzero(torch.tensor([[0.6, 0.0, 0.0, 0.0],
            //                                 [0.0, 0.4, 0.0, 0.0],
            //                                 [0.0, 0.0, 1.2, 0.0],
            //                                 [0.0, 0.0, 0.0,-0.4]]))
            // tensor([[ 0,  0],
            //         [ 1,  1],
            //         [ 2,  2],
            //         [ 3,  3]])
            // 

#if TODO
            var given=  torch.nonzero(torch.tensor({1, 1, 1, 0, 1}));
            var expected=
                "tensor([[ 0],\n" +
                "        [ 1],\n" +
                "        [ 2],\n" +
                "        [ 4]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.nonzero(torch.tensor({{0.6, 0.0, 0.0, 0.0},;
             expected=
                "                                [0.0, 0.4, 0.0, 0.0],\n" +
                "                                [0.0, 0.0, 1.2, 0.0],\n" +
                "                                [0.0, 0.0, 0.0,-0.4]]))\n" +
                "tensor([[ 0,  0],\n" +
                "        [ 1,  1],\n" +
                "        [ 2,  2],\n" +
                "        [ 3,  3]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void reshapeTest()
        {
            // >>> a = torch.arange(4.)
            // >>> torch.reshape(a, (2, 2))
            // tensor([[ 0.,  1.],
            //         [ 2.,  3.]])
            // >>> b = torch.tensor([[0, 1], [2, 3]])
            // >>> torch.reshape(b, (-1,))
            // tensor([ 0,  1,  2,  3])
            // 

#if TODO
            var given=  a = torch.arange(4.);
             given=  torch.reshape(a, (2, 2));
            var expected=
                "tensor([[ 0.,  1.],\n" +
                "        [ 2.,  3.]])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.tensor({{0, 1}, {2, 3}});
             given=  torch.reshape(b, (-1,));
             expected=
                "tensor([ 0,  1,  2,  3])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void squeezeTest()
        {
            // >>> x = torch.zeros(2, 1, 2, 1, 2)
            // >>> x.size()
            // torch.Size([2, 1, 2, 1, 2])
            // >>> y = torch.squeeze(x)
            // >>> y.size()
            // torch.Size([2, 2, 2])
            // >>> y = torch.squeeze(x, 0)
            // >>> y.size()
            // torch.Size([2, 1, 2, 1, 2])
            // >>> y = torch.squeeze(x, 1)
            // >>> y.size()
            // torch.Size([2, 2, 1, 2])
            // 

#if TODO
            var given=  x = torch.zeros(2, 1, 2, 1, 2);
             given=  x.size();
            var expected=
                "torch.Size([2, 1, 2, 1, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.squeeze(x);
             given=  y.size();
             expected=
                "torch.Size([2, 2, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.squeeze(x, 0);
             given=  y.size();
             expected=
                "torch.Size([2, 1, 2, 1, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.squeeze(x, 1);
             given=  y.size();
             expected=
                "torch.Size([2, 2, 1, 2])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void tTest()
        {
            // >>> x = torch.randn(())
            // >>> x
            // tensor(0.1995)
            // >>> torch.t(x)
            // tensor(0.1995)
            // >>> x = torch.randn(3)
            // >>> x
            // tensor([ 2.4320, -0.4608,  0.7702])
            // >>> torch.t(x)
            // tensor([.2.4320,.-0.4608,..0.7702])
            // >>> x = torch.randn(2, 3)
            // >>> x
            // tensor([[ 0.4875,  0.9158, -0.5872],
            //         [ 0.3938, -0.6929,  0.6932]])
            // >>> torch.t(x)
            // tensor([[ 0.4875,  0.3938],
            //         [ 0.9158, -0.6929],
            //         [-0.5872,  0.6932]])
            // 

#if TODO
            var given=  x = torch.randn(());
             given=  x;
            var expected=
                "tensor(0.1995)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.t(x);
             expected=
                "tensor(0.1995)";
            Assert.AreEqual(expected, given.repr);
             given=  x = torch.randn(3);
             given=  x;
             expected=
                "tensor([ 2.4320, -0.4608,  0.7702])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.t(x);
             expected=
                "tensor([.2.4320,.-0.4608,..0.7702])";
            Assert.AreEqual(expected, given.repr);
             given=  x = torch.randn(2, 3);
             given=  x;
             expected=
                "tensor([[ 0.4875,  0.9158, -0.5872],\n" +
                "        [ 0.3938, -0.6929,  0.6932]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.t(x);
             expected=
                "tensor([[ 0.4875,  0.3938],\n" +
                "        [ 0.9158, -0.6929],\n" +
                "        [-0.5872,  0.6932]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void takeTest()
        {
            // >>> src = torch.tensor([[4, 3, 5],
            //                         [6, 7, 8]])
            // >>> torch.take(src, torch.tensor([0, 2, 5]))
            // tensor([ 4,  5,  8])
            // 

#if TODO
            var given=  src = torch.tensor({{4, 3, 5},;
            var expected=
                "                        [6, 7, 8]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.take(src, torch.tensor({0, 2, 5}));
             expected=
                "tensor([ 4,  5,  8])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void transposeTest()
        {
            // >>> x = torch.randn(2, 3)
            // >>> x
            // tensor([[ 1.0028, -0.9893,  0.5809],
            //         [-0.1669,  0.7299,  0.4942]])
            // >>> torch.transpose(x, 0, 1)
            // tensor([[ 1.0028, -0.1669],
            //         [-0.9893,  0.7299],
            //         [ 0.5809,  0.4942]])
            // 

#if TODO
            var given=  x = torch.randn(2, 3);
             given=  x;
            var expected=
                "tensor([[ 1.0028, -0.9893,  0.5809],\n" +
                "        [-0.1669,  0.7299,  0.4942]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.transpose(x, 0, 1);
             expected=
                "tensor([[ 1.0028, -0.1669],\n" +
                "        [-0.9893,  0.7299],\n" +
                "        [ 0.5809,  0.4942]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void unbindTest()
        {
            // >>> torch.unbind(torch.tensor([[1, 2, 3],
            // >>>                            [4, 5, 6],
            // >>>                            [7, 8, 9]]))
            // (tensor([1, 2, 3]), tensor([4, 5, 6]), tensor([7, 8, 9]))
            // 

#if TODO
            var given=  torch.unbind(torch.tensor({{1, 2, 3},;
             given=                             [4, 5, 6],;
             given=                             [7, 8, 9]]));
            var expected=
                "(tensor([1, 2, 3]), tensor([4, 5, 6]), tensor([7, 8, 9]))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void unsqueezeTest()
        {
            // >>> x = torch.tensor([1, 2, 3, 4])
            // >>> torch.unsqueeze(x, 0)
            // tensor([[ 1,  2,  3,  4]])
            // >>> torch.unsqueeze(x, 1)
            // tensor([[ 1],
            //         [ 2],
            //         [ 3],
            //         [ 4]])
            // 

#if TODO
            var given=  x = torch.tensor({1, 2, 3, 4});
             given=  torch.unsqueeze(x, 0);
            var expected=
                "tensor([[ 1,  2,  3,  4]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.unsqueeze(x, 1);
             expected=
                "tensor([[ 1],\n" +
                "        [ 2],\n" +
                "        [ 3],\n" +
                "        [ 4]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void whereTest()
        {
            // >>> x = torch.randn(3, 2)
            // >>> y = torch.ones(3, 2)
            // >>> x
            // tensor([[-0.4620,  0.3139],
            //         [ 0.3898, -0.7197],
            //         [ 0.0478, -0.1657]])
            // >>> torch.where(x > 0, x, y)
            // tensor([[ 1.0000,  0.3139],
            //         [ 0.3898,  1.0000],
            //         [ 0.0478,  1.0000]])
            // 

#if TODO
            var given=  x = torch.randn(3, 2);
             given=  y = torch.ones(3, 2);
             given=  x;
            var expected=
                "tensor([[-0.4620,  0.3139],\n" +
                "        [ 0.3898, -0.7197],\n" +
                "        [ 0.0478, -0.1657]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.where(x > 0, x, y);
             expected=
                "tensor([[ 1.0000,  0.3139],\n" +
                "        [ 0.3898,  1.0000],\n" +
                "        [ 0.0478,  1.0000]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void bernoulliTest()
        {
            // >>> a = torch.empty(3, 3).uniform_(0, 1)  # generate a uniform random matrix with range [0, 1]
            // >>> a
            // tensor([[ 0.1737,  0.0950,  0.3609],
            //         [ 0.7148,  0.0289,  0.2676],
            //         [ 0.9456,  0.8937,  0.7202]])
            // >>> torch.bernoulli(a)
            // tensor([[ 1.,  0.,  0.],
            //         [ 0.,  0.,  0.],
            //         [ 1.,  1.,  1.]])
            // 
            // >>> a = torch.ones(3, 3) # probability of drawing "1" is 1
            // >>> torch.bernoulli(a)
            // tensor([[ 1.,  1.,  1.],
            //         [ 1.,  1.,  1.],
            //         [ 1.,  1.,  1.]])
            // >>> a = torch.zeros(3, 3) # probability of drawing "1" is 0
            // >>> torch.bernoulli(a)
            // tensor([[ 0.,  0.,  0.],
            //         [ 0.,  0.,  0.],
            //         [ 0.,  0.,  0.]])
            // 

#if TODO
            var given=  a = torch.empty(3, 3).uniform_(0, 1)  # generate a uniform random matrix with range {0, 1};
             given=  a;
            var expected=
                "tensor([[ 0.1737,  0.0950,  0.3609],\n" +
                "        [ 0.7148,  0.0289,  0.2676],\n" +
                "        [ 0.9456,  0.8937,  0.7202]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.bernoulli(a);
             expected=
                "tensor([[ 1.,  0.,  0.],\n" +
                "        [ 0.,  0.,  0.],\n" +
                "        [ 1.,  1.,  1.]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  a = torch.ones(3, 3) # probability of drawing "1" is 1;
             given=  torch.bernoulli(a);
             expected=
                "tensor([[ 1.,  1.,  1.],\n" +
                "        [ 1.,  1.,  1.],\n" +
                "        [ 1.,  1.,  1.]])";
            Assert.AreEqual(expected, given.repr);
             given=  a = torch.zeros(3, 3) # probability of drawing "1" is 0;
             given=  torch.bernoulli(a);
             expected=
                "tensor([[ 0.,  0.,  0.],\n" +
                "        [ 0.,  0.,  0.],\n" +
                "        [ 0.,  0.,  0.]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void multinomialTest()
        {
            // >>> weights = torch.tensor([0, 10, 3, 0], dtype=torch.float) # create a tensor of weights
            // >>> torch.multinomial(weights, 2)
            // tensor([1, 2])
            // >>> torch.multinomial(weights, 4) # ERROR!
            // RuntimeError: invalid argument 2: invalid multinomial distribution (with replacement=False,
            // not enough non-negative category to sample) at ../aten/src/TH/generic/THTensorRandom.cpp:320
            // >>> torch.multinomial(weights, 4, replacement=True)
            // tensor([ 2,  1,  1,  1])
            // 

#if TODO
            var given=  weights = torch.tensor({0, 10, 3, 0}, dtype=torch.float) # create a tensor of weights;
             given=  torch.multinomial(weights, 2);
            var expected=
                "tensor([1, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.multinomial(weights, 4) # ERROR!;
             expected=
                "RuntimeError: invalid argument 2: invalid multinomial distribution (with replacement=False,\n" +
                "not enough non-negative category to sample) at ../aten/src/TH/generic/THTensorRandom.cpp:320";
            Assert.AreEqual(expected, given.repr);
             given=  torch.multinomial(weights, 4, replacement=True);
             expected=
                "tensor([ 2,  1,  1,  1])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void normalTest()
        {
            // >>> torch.normal(mean=torch.arange(1., 11.), std=torch.arange(1, 0, -0.1))
            // tensor([  1.0425,   3.5672,   2.7969,   4.2925,   4.7229,   6.2134,
            //           8.0505,   8.1408,   9.0563,  10.0566])
            // 

#if TODO
            var given=  torch.normal(mean=torch.arange(1., 11.), std=torch.arange(1, 0, -0.1));
            var expected=
                "tensor([  1.0425,   3.5672,   2.7969,   4.2925,   4.7229,   6.2134,\n" +
                "          8.0505,   8.1408,   9.0563,  10.0566])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> torch.normal(mean=0.5, std=torch.arange(1., 6.))
            // tensor([-1.2793, -1.0732, -2.0687,  5.1177, -1.2303])
            // 

#if TODO
             given=  torch.normal(mean=0.5, std=torch.arange(1., 6.));
             expected=
                "tensor([-1.2793, -1.0732, -2.0687,  5.1177, -1.2303])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> torch.normal(mean=torch.arange(1., 6.))
            // tensor([ 1.1552,  2.6148,  2.6535,  5.8318,  4.2361])
            // 

#if TODO
             given=  torch.normal(mean=torch.arange(1., 6.));
             expected=
                "tensor([ 1.1552,  2.6148,  2.6535,  5.8318,  4.2361])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void randTest()
        {
            // >>> torch.rand(4)
            // tensor([ 0.5204,  0.2503,  0.3525,  0.5673])
            // >>> torch.rand(2, 3)
            // tensor([[ 0.8237,  0.5781,  0.6879],
            //         [ 0.3816,  0.7249,  0.0998]])
            // 

#if TODO
            var given=  torch.rand(4);
            var expected=
                "tensor([ 0.5204,  0.2503,  0.3525,  0.5673])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.rand(2, 3);
             expected=
                "tensor([[ 0.8237,  0.5781,  0.6879],\n" +
                "        [ 0.3816,  0.7249,  0.0998]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void randintTest()
        {
            // >>> torch.randint(3, 5, (3,))
            // tensor([4, 3, 4])
            // 
            // 
            // >>> torch.randint(10, (2, 2))
            // tensor([[0, 2],
            //         [5, 5]])
            // 
            // 
            // >>> torch.randint(3, 10, (2, 2))
            // tensor([[4, 5],
            //         [6, 7]])
            // 

#if TODO
            var given=  torch.randint(3, 5, (3,));
            var expected=
                "tensor([4, 3, 4])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.randint(10, (2, 2));
             expected=
                "tensor([[0, 2],\n" +
                "        [5, 5]])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.randint(3, 10, (2, 2));
             expected=
                "tensor([[4, 5],\n" +
                "        [6, 7]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void randnTest()
        {
            // >>> torch.randn(4)
            // tensor([-2.1436,  0.9966,  2.3426, -0.6366])
            // >>> torch.randn(2, 3)
            // tensor([[ 1.5954,  2.8929, -1.0923],
            //         [ 1.1719, -0.4709, -0.1996]])
            // 

#if TODO
            var given=  torch.randn(4);
            var expected=
                "tensor([-2.1436,  0.9966,  2.3426, -0.6366])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.randn(2, 3);
             expected=
                "tensor([[ 1.5954,  2.8929, -1.0923],\n" +
                "        [ 1.1719, -0.4709, -0.1996]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void randpermTest()
        {
            // >>> torch.randperm(4)
            // tensor([2, 1, 0, 3])
            // 

#if TODO
            var given=  torch.randperm(4);
            var expected=
                "tensor([2, 1, 0, 3])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void saveTest()
        {
            // >>> # Save to file
            // >>> x = torch.tensor([0, 1, 2, 3, 4])
            // >>> torch.save(x, 'tensor.pt')
            // >>> # Save to io.BytesIO buffer
            // >>> buffer = io.BytesIO()
            // >>> torch.save(x, buffer)
            // 

#if TODO
            var given=  # Save to file;
             given=  x = torch.tensor({0, 1, 2, 3, 4});
             given=  torch.save(x, 'tensor.pt');
             given=  # Save to io.BytesIO buffer;
             given=  buffer = io.BytesIO();
             given=  torch.save(x, buffer);
#endif
        }


        [TestMethod]
        public void loadTest()
        {
            // >>> torch.load('tensors.pt')
            // # Load all tensors onto the CPU
            // >>> torch.load('tensors.pt', map_location=torch.device('cpu'))
            // # Load all tensors onto the CPU, using a function
            // >>> torch.load('tensors.pt', map_location=lambda storage, loc: storage)
            // # Load all tensors onto GPU 1
            // >>> torch.load('tensors.pt', map_location=lambda storage, loc: storage.cuda(1))
            // # Map tensors from GPU 1 to GPU 0
            // >>> torch.load('tensors.pt', map_location={'cuda:1':'cuda:0'})
            // # Load tensor from io.BytesIO object
            // >>> with open('tensor.pt', 'rb') as f:
            //         buffer = io.BytesIO(f.read())
            // >>> torch.load(buffer)
            // 

#if TODO
            var given=  torch.load('tensors.pt');
            // Load all tensors onto the CPU
             given=  torch.load('tensors.pt', map_location=torch.device('cpu'));
            // Load all tensors onto the CPU, using a function
             given=  torch.load('tensors.pt', map_location=lambda storage, loc: storage);
            // Load all tensors onto GPU 1
             given=  torch.load('tensors.pt', map_location=lambda storage, loc: storage.cuda(1));
            // Map tensors from GPU 1 to GPU 0
             given=  torch.load('tensors.pt', map_location={'cuda:1':'cuda:0'});
            // Load tensor from io.BytesIO object
             given=  with open('tensor.pt', 'rb') as f:;
            var expected=
                "        buffer = io.BytesIO(f.read())";
            Assert.AreEqual(expected, given.repr);
             given=  torch.load(buffer);
#endif
        }


        [TestMethod]
        public void absTest()
        {
            // >>> torch.abs(torch.tensor([-1, -2, 3]))
            // tensor([ 1,  2,  3])
            // 

#if TODO
            var given=  torch.abs(torch.tensor({-1, -2, 3}));
            var expected=
                "tensor([ 1,  2,  3])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void acosTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.3348, -0.5889,  0.2005, -0.1584])
            // >>> torch.acos(a)
            // tensor([ 1.2294,  2.2004,  1.3690,  1.7298])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.3348, -0.5889,  0.2005, -0.1584])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.acos(a);
             expected=
                "tensor([ 1.2294,  2.2004,  1.3690,  1.7298])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.0202,  1.0985,  1.3506, -0.6056])
            // >>> torch.add(a, 20)
            // tensor([ 20.0202,  21.0985,  21.3506,  19.3944])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.0202,  1.0985,  1.3506, -0.6056])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.add(a, 20);
             expected=
                "tensor([ 20.0202,  21.0985,  21.3506,  19.3944])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.9732, -0.3497,  0.6245,  0.4022])
            // >>> b = torch.randn(4, 1)
            // >>> b
            // tensor([[ 0.3743],
            //         [-1.7724],
            //         [-0.5811],
            //         [-0.8017]])
            // >>> torch.add(a, 10, b)
            // tensor([[  2.7695,   3.3930,   4.3672,   4.1450],
            //         [-18.6971, -18.0736, -17.0994, -17.3216],
            //         [ -6.7845,  -6.1610,  -5.1868,  -5.4090],
            //         [ -8.9902,  -8.3667,  -7.3925,  -7.6147]])
            // 

#if TODO
             given=  a = torch.randn(4);
             given=  a;
             expected=
                "tensor([-0.9732, -0.3497,  0.6245,  0.4022])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4, 1);
             given=  b;
             expected=
                "tensor([[ 0.3743],\n" +
                "        [-1.7724],\n" +
                "        [-0.5811],\n" +
                "        [-0.8017]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.add(a, 10, b);
             expected=
                "tensor([[  2.7695,   3.3930,   4.3672,   4.1450],\n" +
                "        [-18.6971, -18.0736, -17.0994, -17.3216],\n" +
                "        [ -6.7845,  -6.1610,  -5.1868,  -5.4090],\n" +
                "        [ -8.9902,  -8.3667,  -7.3925,  -7.6147]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addcdivTest()
        {
            // >>> t = torch.randn(1, 3)
            // >>> t1 = torch.randn(3, 1)
            // >>> t2 = torch.randn(1, 3)
            // >>> torch.addcdiv(t, 0.1, t1, t2)
            // tensor([[-0.2312, -3.6496,  0.1312],
            //         [-1.0428,  3.4292, -0.1030],
            //         [-0.5369, -0.9829,  0.0430]])
            // 

#if TODO
            var given=  t = torch.randn(1, 3);
             given=  t1 = torch.randn(3, 1);
             given=  t2 = torch.randn(1, 3);
             given=  torch.addcdiv(t, 0.1, t1, t2);
            var expected=
                "tensor([[-0.2312, -3.6496,  0.1312],\n" +
                "        [-1.0428,  3.4292, -0.1030],\n" +
                "        [-0.5369, -0.9829,  0.0430]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addcmulTest()
        {
            // >>> t = torch.randn(1, 3)
            // >>> t1 = torch.randn(3, 1)
            // >>> t2 = torch.randn(1, 3)
            // >>> torch.addcmul(t, 0.1, t1, t2)
            // tensor([[-0.8635, -0.6391,  1.6174],
            //         [-0.7617, -0.5879,  1.7388],
            //         [-0.8353, -0.6249,  1.6511]])
            // 

#if TODO
            var given=  t = torch.randn(1, 3);
             given=  t1 = torch.randn(3, 1);
             given=  t2 = torch.randn(1, 3);
             given=  torch.addcmul(t, 0.1, t1, t2);
            var expected=
                "tensor([[-0.8635, -0.6391,  1.6174],\n" +
                "        [-0.7617, -0.5879,  1.7388],\n" +
                "        [-0.8353, -0.6249,  1.6511]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void asinTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.5962,  1.4985, -0.4396,  1.4525])
            // >>> torch.asin(a)
            // tensor([-0.6387,     nan, -0.4552,     nan])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-0.5962,  1.4985, -0.4396,  1.4525])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.asin(a);
             expected=
                "tensor([-0.6387,     nan, -0.4552,     nan])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void atanTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.2341,  0.2539, -0.6256, -0.6448])
            // >>> torch.atan(a)
            // tensor([ 0.2299,  0.2487, -0.5591, -0.5727])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.2341,  0.2539, -0.6256, -0.6448])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.atan(a);
             expected=
                "tensor([ 0.2299,  0.2487, -0.5591, -0.5727])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void atan2Test()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.9041,  0.0196, -0.3108, -2.4423])
            // >>> torch.atan2(a, torch.randn(4))
            // tensor([ 0.9833,  0.0811, -1.9743, -1.4151])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.9041,  0.0196, -0.3108, -2.4423])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.atan2(a, torch.randn(4));
             expected=
                "tensor([ 0.9833,  0.0811, -1.9743, -1.4151])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void ceilTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.6341, -1.4208, -1.0900,  0.5826])
            // >>> torch.ceil(a)
            // tensor([-0., -1., -1.,  1.])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-0.6341, -1.4208, -1.0900,  0.5826])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.ceil(a);
             expected=
                "tensor([-0., -1., -1.,  1.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void clampTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-1.7120,  0.1734, -0.0478, -0.0922])
            // >>> torch.clamp(a, min=-0.5, max=0.5)
            // tensor([-0.5000,  0.1734, -0.0478, -0.0922])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-1.7120,  0.1734, -0.0478, -0.0922])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.clamp(a, min=-0.5, max=0.5);
             expected=
                "tensor([-0.5000,  0.1734, -0.0478, -0.0922])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.0299, -2.3184,  2.1593, -0.8883])
            // >>> torch.clamp(a, min=0.5)
            // tensor([ 0.5000,  0.5000,  2.1593,  0.5000])
            // 

#if TODO
             given=  a = torch.randn(4);
             given=  a;
             expected=
                "tensor([-0.0299, -2.3184,  2.1593, -0.8883])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.clamp(a, min=0.5);
             expected=
                "tensor([ 0.5000,  0.5000,  2.1593,  0.5000])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.7753, -0.4702, -0.4599,  1.1899])
            // >>> torch.clamp(a, max=0.5)
            // tensor([ 0.5000, -0.4702, -0.4599,  0.5000])
            // 

#if TODO
             given=  a = torch.randn(4);
             given=  a;
             expected=
                "tensor([ 0.7753, -0.4702, -0.4599,  1.1899])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.clamp(a, max=0.5);
             expected=
                "tensor([ 0.5000, -0.4702, -0.4599,  0.5000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void cosTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 1.4309,  1.2706, -0.8562,  0.9796])
            // >>> torch.cos(a)
            // tensor([ 0.1395,  0.2957,  0.6553,  0.5574])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 1.4309,  1.2706, -0.8562,  0.9796])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cos(a);
             expected=
                "tensor([ 0.1395,  0.2957,  0.6553,  0.5574])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void coshTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.1632,  1.1835, -0.6979, -0.7325])
            // >>> torch.cosh(a)
            // tensor([ 1.0133,  1.7860,  1.2536,  1.2805])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.1632,  1.1835, -0.6979, -0.7325])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cosh(a);
             expected=
                "tensor([ 1.0133,  1.7860,  1.2536,  1.2805])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void divTest()
        {
            // >>> a = torch.randn(5)
            // >>> a
            // tensor([ 0.3810,  1.2774, -0.2972, -0.3719,  0.4637])
            // >>> torch.div(a, 0.5)
            // tensor([ 0.7620,  2.5548, -0.5944, -0.7439,  0.9275])
            // 

#if TODO
            var given=  a = torch.randn(5);
             given=  a;
            var expected=
                "tensor([ 0.3810,  1.2774, -0.2972, -0.3719,  0.4637])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.div(a, 0.5);
             expected=
                "tensor([ 0.7620,  2.5548, -0.5944, -0.7439,  0.9275])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[-0.3711, -1.9353, -0.4605, -0.2917],
            //         [ 0.1815, -1.0111,  0.9805, -1.5923],
            //         [ 0.1062,  1.4581,  0.7759, -1.2344],
            //         [-0.1830, -0.0313,  1.1908, -1.4757]])
            // >>> b = torch.randn(4)
            // >>> b
            // tensor([ 0.8032,  0.2930, -0.8113, -0.2308])
            // >>> torch.div(a, b)
            // tensor([[-0.4620, -6.6051,  0.5676,  1.2637],
            //         [ 0.2260, -3.4507, -1.2086,  6.8988],
            //         [ 0.1322,  4.9764, -0.9564,  5.3480],
            //         [-0.2278, -0.1068, -1.4678,  6.3936]])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[-0.3711, -1.9353, -0.4605, -0.2917],\n" +
                "        [ 0.1815, -1.0111,  0.9805, -1.5923],\n" +
                "        [ 0.1062,  1.4581,  0.7759, -1.2344],\n" +
                "        [-0.1830, -0.0313,  1.1908, -1.4757]])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4);
             given=  b;
             expected=
                "tensor([ 0.8032,  0.2930, -0.8113, -0.2308])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.div(a, b);
             expected=
                "tensor([[-0.4620, -6.6051,  0.5676,  1.2637],\n" +
                "        [ 0.2260, -3.4507, -1.2086,  6.8988],\n" +
                "        [ 0.1322,  4.9764, -0.9564,  5.3480],\n" +
                "        [-0.2278, -0.1068, -1.4678,  6.3936]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void digammaTest()
        {
            // >>> a = torch.tensor([1, 0.5])
            // >>> torch.digamma(a)
            // tensor([-0.5772, -1.9635])
            // 

#if TODO
            var given=  a = torch.tensor({1, 0.5});
             given=  torch.digamma(a);
            var expected=
                "tensor([-0.5772, -1.9635])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void erfTest()
        {
            // >>> torch.erf(torch.tensor([0, -1., 10.]))
            // tensor([ 0.0000, -0.8427,  1.0000])
            // 

#if TODO
            var given=  torch.erf(torch.tensor({0, -1., 10.}));
            var expected=
                "tensor([ 0.0000, -0.8427,  1.0000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void erfcTest()
        {
            // >>> torch.erfc(torch.tensor([0, -1., 10.]))
            // tensor([ 1.0000, 1.8427,  0.0000])
            // 

#if TODO
            var given=  torch.erfc(torch.tensor({0, -1., 10.}));
            var expected=
                "tensor([ 1.0000, 1.8427,  0.0000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void erfinvTest()
        {
            // >>> torch.erfinv(torch.tensor([0, 0.5, -1.]))
            // tensor([ 0.0000,  0.4769,    -inf])
            // 

#if TODO
            var given=  torch.erfinv(torch.tensor({0, 0.5, -1.}));
            var expected=
                "tensor([ 0.0000,  0.4769,    -inf])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void expTest()
        {
            // >>> torch.exp(torch.tensor([0, math.log(2.)]))
            // tensor([ 1.,  2.])
            // 

#if TODO
            var given=  torch.exp(torch.tensor({0, math.log(2.)}));
            var expected=
                "tensor([ 1.,  2.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void expm1Test()
        {
            // >>> torch.expm1(torch.tensor([0, math.log(2.)]))
            // tensor([ 0.,  1.])
            // 

#if TODO
            var given=  torch.expm1(torch.tensor({0, math.log(2.)}));
            var expected=
                "tensor([ 0.,  1.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void floorTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.8166,  1.5308, -0.2530, -0.2091])
            // >>> torch.floor(a)
            // tensor([-1.,  1., -1., -1.])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-0.8166,  1.5308, -0.2530, -0.2091])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.floor(a);
             expected=
                "tensor([-1.,  1., -1., -1.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void fmodTest()
        {
            // >>> torch.fmod(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)
            // tensor([-1., -0., -1.,  1.,  0.,  1.])
            // >>> torch.fmod(torch.tensor([1., 2, 3, 4, 5]), 1.5)
            // tensor([ 1.0000,  0.5000,  0.0000,  1.0000,  0.5000])
            // 

#if TODO
            var given=  torch.fmod(torch.tensor({-3., -2, -1, 1, 2, 3}), 2);
            var expected=
                "tensor([-1., -0., -1.,  1.,  0.,  1.])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.fmod(torch.tensor({1., 2, 3, 4, 5}), 1.5);
             expected=
                "tensor([ 1.0000,  0.5000,  0.0000,  1.0000,  0.5000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void fracTest()
        {
            // >>> torch.frac(torch.tensor([1, 2.5, -3.2]))
            // tensor([ 0.0000,  0.5000, -0.2000])
            // 

#if TODO
            var given=  torch.frac(torch.tensor({1, 2.5, -3.2}));
            var expected=
                "tensor([ 0.0000,  0.5000, -0.2000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void lerpTest()
        {
            // >>> start = torch.arange(1., 5.)
            // >>> end = torch.empty(4).fill_(10)
            // >>> start
            // tensor([ 1.,  2.,  3.,  4.])
            // >>> end
            // tensor([ 10.,  10.,  10.,  10.])
            // >>> torch.lerp(start, end, 0.5)
            // tensor([ 5.5000,  6.0000,  6.5000,  7.0000])
            // >>> torch.lerp(start, end, torch.full_like(start, 0.5))
            // tensor([ 5.5000,  6.0000,  6.5000,  7.0000])
            // 

#if TODO
            var given=  start = torch.arange(1., 5.);
             given=  end = torch.empty(4).fill_(10);
             given=  start;
            var expected=
                "tensor([ 1.,  2.,  3.,  4.])";
            Assert.AreEqual(expected, given.repr);
             given=  end;
             expected=
                "tensor([ 10.,  10.,  10.,  10.])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.lerp(start, end, 0.5);
             expected=
                "tensor([ 5.5000,  6.0000,  6.5000,  7.0000])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.lerp(start, end, torch.full_like(start, 0.5));
             expected=
                "tensor([ 5.5000,  6.0000,  6.5000,  7.0000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void logTest()
        {
            // >>> a = torch.randn(5)
            // >>> a
            // tensor([-0.7168, -0.5471, -0.8933, -1.4428, -0.1190])
            // >>> torch.log(a)
            // tensor([ nan,  nan,  nan,  nan,  nan])
            // 

#if TODO
            var given=  a = torch.randn(5);
             given=  a;
            var expected=
                "tensor([-0.7168, -0.5471, -0.8933, -1.4428, -0.1190])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.log(a);
             expected=
                "tensor([ nan,  nan,  nan,  nan,  nan])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void log10Test()
        {
            // >>> a = torch.rand(5)
            // >>> a
            // tensor([ 0.5224,  0.9354,  0.7257,  0.1301,  0.2251])
            // 
            // 
            // >>> torch.log10(a)
            // tensor([-0.2820, -0.0290, -0.1392, -0.8857, -0.6476])
            // 

#if TODO
            var given=  a = torch.rand(5);
             given=  a;
            var expected=
                "tensor([ 0.5224,  0.9354,  0.7257,  0.1301,  0.2251])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.log10(a);
             expected=
                "tensor([-0.2820, -0.0290, -0.1392, -0.8857, -0.6476])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void log1pTest()
        {
            // >>> a = torch.randn(5)
            // >>> a
            // tensor([-1.0090, -0.9923,  1.0249, -0.5372,  0.2492])
            // >>> torch.log1p(a)
            // tensor([    nan, -4.8653,  0.7055, -0.7705,  0.2225])
            // 

#if TODO
            var given=  a = torch.randn(5);
             given=  a;
            var expected=
                "tensor([-1.0090, -0.9923,  1.0249, -0.5372,  0.2492])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.log1p(a);
             expected=
                "tensor([    nan, -4.8653,  0.7055, -0.7705,  0.2225])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void log2Test()
        {
            // >>> a = torch.rand(5)
            // >>> a
            // tensor([ 0.8419,  0.8003,  0.9971,  0.5287,  0.0490])
            // 
            // 
            // >>> torch.log2(a)
            // tensor([-0.2483, -0.3213, -0.0042, -0.9196, -4.3504])
            // 

#if TODO
            var given=  a = torch.rand(5);
             given=  a;
            var expected=
                "tensor([ 0.8419,  0.8003,  0.9971,  0.5287,  0.0490])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.log2(a);
             expected=
                "tensor([-0.2483, -0.3213, -0.0042, -0.9196, -4.3504])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void mulTest()
        {
            // >>> a = torch.randn(3)
            // >>> a
            // tensor([ 0.2015, -0.4255,  2.6087])
            // >>> torch.mul(a, 100)
            // tensor([  20.1494,  -42.5491,  260.8663])
            // 

#if TODO
            var given=  a = torch.randn(3);
             given=  a;
            var expected=
                "tensor([ 0.2015, -0.4255,  2.6087])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mul(a, 100);
             expected=
                "tensor([  20.1494,  -42.5491,  260.8663])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 1)
            // >>> a
            // tensor([[ 1.1207],
            //         [-0.3137],
            //         [ 0.0700],
            //         [ 0.8378]])
            // >>> b = torch.randn(1, 4)
            // >>> b
            // tensor([[ 0.5146,  0.1216, -0.5244,  2.2382]])
            // >>> torch.mul(a, b)
            // tensor([[ 0.5767,  0.1363, -0.5877,  2.5083],
            //         [-0.1614, -0.0382,  0.1645, -0.7021],
            //         [ 0.0360,  0.0085, -0.0367,  0.1567],
            //         [ 0.4312,  0.1019, -0.4394,  1.8753]])
            // 

#if TODO
             given=  a = torch.randn(4, 1);
             given=  a;
             expected=
                "tensor([[ 1.1207],\n" +
                "        [-0.3137],\n" +
                "        [ 0.0700],\n" +
                "        [ 0.8378]])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(1, 4);
             given=  b;
             expected=
                "tensor([[ 0.5146,  0.1216, -0.5244,  2.2382]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mul(a, b);
             expected=
                "tensor([[ 0.5767,  0.1363, -0.5877,  2.5083],\n" +
                "        [-0.1614, -0.0382,  0.1645, -0.7021],\n" +
                "        [ 0.0360,  0.0085, -0.0367,  0.1567],\n" +
                "        [ 0.4312,  0.1019, -0.4394,  1.8753]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void mvlgammaTest()
        {
            // >>> a = torch.empty(2, 3).uniform_(1, 2)
            // >>> a
            // tensor([[1.6835, 1.8474, 1.1929],
            //         [1.0475, 1.7162, 1.4180]])
            // >>> torch.mvlgamma(a, 2)
            // tensor([[0.3928, 0.4007, 0.7586],
            //         [1.0311, 0.3901, 0.5049]])
            // 

#if TODO
            var given=  a = torch.empty(2, 3).uniform_(1, 2);
             given=  a;
            var expected=
                "tensor([[1.6835, 1.8474, 1.1929],\n" +
                "        [1.0475, 1.7162, 1.4180]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mvlgamma(a, 2);
             expected=
                "tensor([[0.3928, 0.4007, 0.7586],\n" +
                "        [1.0311, 0.3901, 0.5049]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void negTest()
        {
            // >>> a = torch.randn(5)
            // >>> a
            // tensor([ 0.0090, -0.2262, -0.0682, -0.2866,  0.3940])
            // >>> torch.neg(a)
            // tensor([-0.0090,  0.2262,  0.0682,  0.2866, -0.3940])
            // 

#if TODO
            var given=  a = torch.randn(5);
             given=  a;
            var expected=
                "tensor([ 0.0090, -0.2262, -0.0682, -0.2866,  0.3940])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.neg(a);
             expected=
                "tensor([-0.0090,  0.2262,  0.0682,  0.2866, -0.3940])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void powTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.4331,  1.2475,  0.6834, -0.2791])
            // >>> torch.pow(a, 2)
            // tensor([ 0.1875,  1.5561,  0.4670,  0.0779])
            // >>> exp = torch.arange(1., 5.)
            // 
            // >>> a = torch.arange(1., 5.)
            // >>> a
            // tensor([ 1.,  2.,  3.,  4.])
            // >>> exp
            // tensor([ 1.,  2.,  3.,  4.])
            // >>> torch.pow(a, exp)
            // tensor([   1.,    4.,   27.,  256.])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.4331,  1.2475,  0.6834, -0.2791])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.pow(a, 2);
             expected=
                "tensor([ 0.1875,  1.5561,  0.4670,  0.0779])";
            Assert.AreEqual(expected, given.repr);
             given=  exp = torch.arange(1., 5.);
             expected=
                "";
            Assert.AreEqual(expected, given.repr);
             given=  a = torch.arange(1., 5.);
             given=  a;
             expected=
                "tensor([ 1.,  2.,  3.,  4.])";
            Assert.AreEqual(expected, given.repr);
             given=  exp;
             expected=
                "tensor([ 1.,  2.,  3.,  4.])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.pow(a, exp);
             expected=
                "tensor([   1.,    4.,   27.,  256.])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> exp = torch.arange(1., 5.)
            // >>> base = 2
            // >>> torch.pow(base, exp)
            // tensor([  2.,   4.,   8.,  16.])
            // 

#if TODO
             given=  exp = torch.arange(1., 5.);
             given=  base = 2;
             given=  torch.pow(base, exp);
             expected=
                "tensor([  2.,   4.,   8.,  16.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void reciprocalTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.4595, -2.1219, -1.4314,  0.7298])
            // >>> torch.reciprocal(a)
            // tensor([-2.1763, -0.4713, -0.6986,  1.3702])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-0.4595, -2.1219, -1.4314,  0.7298])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.reciprocal(a);
             expected=
                "tensor([-2.1763, -0.4713, -0.6986,  1.3702])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void remainderTest()
        {
            // >>> torch.remainder(torch.tensor([-3., -2, -1, 1, 2, 3]), 2)
            // tensor([ 1.,  0.,  1.,  1.,  0.,  1.])
            // >>> torch.remainder(torch.tensor([1., 2, 3, 4, 5]), 1.5)
            // tensor([ 1.0000,  0.5000,  0.0000,  1.0000,  0.5000])
            // 

#if TODO
            var given=  torch.remainder(torch.tensor({-3., -2, -1, 1, 2, 3}), 2);
            var expected=
                "tensor([ 1.,  0.,  1.,  1.,  0.,  1.])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.remainder(torch.tensor({1., 2, 3, 4, 5}), 1.5);
             expected=
                "tensor([ 1.0000,  0.5000,  0.0000,  1.0000,  0.5000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void roundTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.9920,  0.6077,  0.9734, -1.0362])
            // >>> torch.round(a)
            // tensor([ 1.,  1.,  1., -1.])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.9920,  0.6077,  0.9734, -1.0362])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.round(a);
             expected=
                "tensor([ 1.,  1.,  1., -1.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void rsqrtTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.0370,  0.2970,  1.5420, -0.9105])
            // >>> torch.rsqrt(a)
            // tensor([    nan,  1.8351,  0.8053,     nan])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-0.0370,  0.2970,  1.5420, -0.9105])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.rsqrt(a);
             expected=
                "tensor([    nan,  1.8351,  0.8053,     nan])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sigmoidTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.9213,  1.0887, -0.8858, -1.7683])
            // >>> torch.sigmoid(a)
            // tensor([ 0.7153,  0.7481,  0.2920,  0.1458])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.9213,  1.0887, -0.8858, -1.7683])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sigmoid(a);
             expected=
                "tensor([ 0.7153,  0.7481,  0.2920,  0.1458])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void signTest()
        {
            // >>> a = torch.tensor([0.7, -1.2, 0., 2.3])
            // >>> a
            // tensor([ 0.7000, -1.2000,  0.0000,  2.3000])
            // >>> torch.sign(a)
            // tensor([ 1., -1.,  0.,  1.])
            // 

#if TODO
            var given=  a = torch.tensor({0.7, -1.2, 0., 2.3});
             given=  a;
            var expected=
                "tensor([ 0.7000, -1.2000,  0.0000,  2.3000])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sign(a);
             expected=
                "tensor([ 1., -1.,  0.,  1.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sinTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-0.5461,  0.1347, -2.7266, -0.2746])
            // >>> torch.sin(a)
            // tensor([-0.5194,  0.1343, -0.4032, -0.2711])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-0.5461,  0.1347, -2.7266, -0.2746])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sin(a);
             expected=
                "tensor([-0.5194,  0.1343, -0.4032, -0.2711])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sinhTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.5380, -0.8632, -0.1265,  0.9399])
            // >>> torch.sinh(a)
            // tensor([ 0.5644, -0.9744, -0.1268,  1.0845])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.5380, -0.8632, -0.1265,  0.9399])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sinh(a);
             expected=
                "tensor([ 0.5644, -0.9744, -0.1268,  1.0845])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sqrtTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-2.0755,  1.0226,  0.0831,  0.4806])
            // >>> torch.sqrt(a)
            // tensor([    nan,  1.0112,  0.2883,  0.6933])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-2.0755,  1.0226,  0.0831,  0.4806])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sqrt(a);
             expected=
                "tensor([    nan,  1.0112,  0.2883,  0.6933])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void tanTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([-1.2027, -1.7687,  0.4412, -1.3856])
            // >>> torch.tan(a)
            // tensor([-2.5930,  4.9859,  0.4722, -5.3366])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([-1.2027, -1.7687,  0.4412, -1.3856])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tan(a);
             expected=
                "tensor([-2.5930,  4.9859,  0.4722, -5.3366])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void tanhTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.8986, -0.7279,  1.1745,  0.2611])
            // >>> torch.tanh(a)
            // tensor([ 0.7156, -0.6218,  0.8257,  0.2553])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 0.8986, -0.7279,  1.1745,  0.2611])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tanh(a);
             expected=
                "tensor([ 0.7156, -0.6218,  0.8257,  0.2553])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void truncTest()
        {
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 3.4742,  0.5466, -0.8008, -0.9079])
            // >>> torch.trunc(a)
            // tensor([ 3.,  0., -0., -0.])
            // 

#if TODO
            var given=  a = torch.randn(4);
             given=  a;
            var expected=
                "tensor([ 3.4742,  0.5466, -0.8008, -0.9079])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.trunc(a);
             expected=
                "tensor([ 3.,  0., -0., -0.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void argmaxTest()
        {
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],
            //         [-0.7401, -0.8805, -0.3402, -1.1936],
            //         [ 0.4907, -1.3948, -1.0691, -0.3132],
            //         [-1.6092,  0.5419, -0.2993,  0.3195]])
            // >>> torch.argmax(a)
            // tensor(0)
            // 

#if TODO
            var given=  a = torch.randn(4, 4);
             given=  a;
            var expected=
                "tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],\n" +
                "        [-0.7401, -0.8805, -0.3402, -1.1936],\n" +
                "        [ 0.4907, -1.3948, -1.0691, -0.3132],\n" +
                "        [-1.6092,  0.5419, -0.2993,  0.3195]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.argmax(a);
             expected=
                "tensor(0)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],
            //         [-0.7401, -0.8805, -0.3402, -1.1936],
            //         [ 0.4907, -1.3948, -1.0691, -0.3132],
            //         [-1.6092,  0.5419, -0.2993,  0.3195]])
            // >>> torch.argmax(a, dim=1)
            // tensor([ 0,  2,  0,  1])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[ 1.3398,  0.2663, -0.2686,  0.2450],\n" +
                "        [-0.7401, -0.8805, -0.3402, -1.1936],\n" +
                "        [ 0.4907, -1.3948, -1.0691, -0.3132],\n" +
                "        [-1.6092,  0.5419, -0.2993,  0.3195]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.argmax(a, dim=1);
             expected=
                "tensor([ 0,  2,  0,  1])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void argminTest()
        {
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 0.1139,  0.2254, -0.1381,  0.3687],
            //         [ 1.0100, -1.1975, -0.0102, -0.4732],
            //         [-0.9240,  0.1207, -0.7506, -1.0213],
            //         [ 1.7809, -1.2960,  0.9384,  0.1438]])
            // >>> torch.argmin(a)
            // tensor(13)
            // 

#if TODO
            var given=  a = torch.randn(4, 4);
             given=  a;
            var expected=
                "tensor([[ 0.1139,  0.2254, -0.1381,  0.3687],\n" +
                "        [ 1.0100, -1.1975, -0.0102, -0.4732],\n" +
                "        [-0.9240,  0.1207, -0.7506, -1.0213],\n" +
                "        [ 1.7809, -1.2960,  0.9384,  0.1438]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.argmin(a);
             expected=
                "tensor(13)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 0.1139,  0.2254, -0.1381,  0.3687],
            //         [ 1.0100, -1.1975, -0.0102, -0.4732],
            //         [-0.9240,  0.1207, -0.7506, -1.0213],
            //         [ 1.7809, -1.2960,  0.9384,  0.1438]])
            // >>> torch.argmin(a, dim=1)
            // tensor([ 2,  1,  3,  1])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[ 0.1139,  0.2254, -0.1381,  0.3687],\n" +
                "        [ 1.0100, -1.1975, -0.0102, -0.4732],\n" +
                "        [-0.9240,  0.1207, -0.7506, -1.0213],\n" +
                "        [ 1.7809, -1.2960,  0.9384,  0.1438]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.argmin(a, dim=1);
             expected=
                "tensor([ 2,  1,  3,  1])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void cumprodTest()
        {
            // >>> a = torch.randn(10)
            // >>> a
            // tensor([ 0.6001,  0.2069, -0.1919,  0.9792,  0.6727,  1.0062,  0.4126,
            //         -0.2129, -0.4206,  0.1968])
            // >>> torch.cumprod(a, dim=0)
            // tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0158, -0.0065,
            //          0.0014, -0.0006, -0.0001])
            // 
            // >>> a[5] = 0.0
            // >>> torch.cumprod(a, dim=0)
            // tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0000, -0.0000,
            //          0.0000, -0.0000, -0.0000])
            // 

#if TODO
            var given=  a = torch.randn(10);
             given=  a;
            var expected=
                "tensor([ 0.6001,  0.2069, -0.1919,  0.9792,  0.6727,  1.0062,  0.4126,\n" +
                "        -0.2129, -0.4206,  0.1968])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cumprod(a, dim=0);
             expected=
                "tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0158, -0.0065,\n" +
                "         0.0014, -0.0006, -0.0001])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  a[5] = 0.0;
             given=  torch.cumprod(a, dim=0);
             expected=
                "tensor([ 0.6001,  0.1241, -0.0238, -0.0233, -0.0157, -0.0000, -0.0000,\n" +
                "         0.0000, -0.0000, -0.0000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void cumsumTest()
        {
            // >>> a = torch.randn(10)
            // >>> a
            // tensor([-0.8286, -0.4890,  0.5155,  0.8443,  0.1865, -0.1752, -2.0595,
            //          0.1850, -1.1571, -0.4243])
            // >>> torch.cumsum(a, dim=0)
            // tensor([-0.8286, -1.3175, -0.8020,  0.0423,  0.2289,  0.0537, -2.0058,
            //         -1.8209, -2.9780, -3.4022])
            // 

#if TODO
            var given=  a = torch.randn(10);
             given=  a;
            var expected=
                "tensor([-0.8286, -0.4890,  0.5155,  0.8443,  0.1865, -0.1752, -2.0595,\n" +
                "         0.1850, -1.1571, -0.4243])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cumsum(a, dim=0);
             expected=
                "tensor([-0.8286, -1.3175, -0.8020,  0.0423,  0.2289,  0.0537, -2.0058,\n" +
                "        -1.8209, -2.9780, -3.4022])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void distTest()
        {
            // >>> x = torch.randn(4)
            // >>> x
            // tensor([-1.5393, -0.8675,  0.5916,  1.6321])
            // >>> y = torch.randn(4)
            // >>> y
            // tensor([ 0.0967, -1.0511,  0.6295,  0.8360])
            // >>> torch.dist(x, y, 3.5)
            // tensor(1.6727)
            // >>> torch.dist(x, y, 3)
            // tensor(1.6973)
            // >>> torch.dist(x, y, 0)
            // tensor(inf)
            // >>> torch.dist(x, y, 1)
            // tensor(2.6537)
            // 

#if TODO
            var given=  x = torch.randn(4);
             given=  x;
            var expected=
                "tensor([-1.5393, -0.8675,  0.5916,  1.6321])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.randn(4);
             given=  y;
             expected=
                "tensor([ 0.0967, -1.0511,  0.6295,  0.8360])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.dist(x, y, 3.5);
             expected=
                "tensor(1.6727)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.dist(x, y, 3);
             expected=
                "tensor(1.6973)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.dist(x, y, 0);
             expected=
                "tensor(inf)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.dist(x, y, 1);
             expected=
                "tensor(2.6537)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void logsumexpTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> torch.logsumexp(a, 1)
            // tensor([ 0.8442,  1.4322,  0.8711])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  torch.logsumexp(a, 1);
            var expected=
                "tensor([ 0.8442,  1.4322,  0.8711])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void meanTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[ 0.2294, -0.5481,  1.3288]])
            // >>> torch.mean(a)
            // tensor(0.3367)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[ 0.2294, -0.5481,  1.3288]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mean(a);
             expected=
                "tensor(0.3367)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[-0.3841,  0.6320,  0.4254, -0.7384],
            //         [-0.9644,  1.0131, -0.6549, -1.4279],
            //         [-0.2951, -1.3350, -0.7694,  0.5600],
            //         [ 1.0842, -0.9580,  0.3623,  0.2343]])
            // >>> torch.mean(a, 1)
            // tensor([-0.0163, -0.5085, -0.4599,  0.1807])
            // >>> torch.mean(a, 1, True)
            // tensor([[-0.0163],
            //         [-0.5085],
            //         [-0.4599],
            //         [ 0.1807]])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[-0.3841,  0.6320,  0.4254, -0.7384],\n" +
                "        [-0.9644,  1.0131, -0.6549, -1.4279],\n" +
                "        [-0.2951, -1.3350, -0.7694,  0.5600],\n" +
                "        [ 1.0842, -0.9580,  0.3623,  0.2343]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mean(a, 1);
             expected=
                "tensor([-0.0163, -0.5085, -0.4599,  0.1807])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mean(a, 1, True);
             expected=
                "tensor([[-0.0163],\n" +
                "        [-0.5085],\n" +
                "        [-0.4599],\n" +
                "        [ 0.1807]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void medianTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[ 1.5219, -1.5212,  0.2202]])
            // >>> torch.median(a)
            // tensor(0.2202)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[ 1.5219, -1.5212,  0.2202]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.median(a);
             expected=
                "tensor(0.2202)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 5)
            // >>> a
            // tensor([[ 0.2505, -0.3982, -0.9948,  0.3518, -1.3131],
            //         [ 0.3180, -0.6993,  1.0436,  0.0438,  0.2270],
            //         [-0.2751,  0.7303,  0.2192,  0.3321,  0.2488],
            //         [ 1.0778, -1.9510,  0.7048,  0.4742, -0.7125]])
            // >>> torch.median(a, 1)
            // torch.return_types.median(values=tensor([-0.3982,  0.2270,  0.2488,  0.4742]), indices=tensor([1, 4, 4, 3]))
            // 

#if TODO
             given=  a = torch.randn(4, 5);
             given=  a;
             expected=
                "tensor([[ 0.2505, -0.3982, -0.9948,  0.3518, -1.3131],\n" +
                "        [ 0.3180, -0.6993,  1.0436,  0.0438,  0.2270],\n" +
                "        [-0.2751,  0.7303,  0.2192,  0.3321,  0.2488],\n" +
                "        [ 1.0778, -1.9510,  0.7048,  0.4742, -0.7125]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.median(a, 1);
             expected=
                "torch.return_types.median(values=tensor([-0.3982,  0.2270,  0.2488,  0.4742]), indices=tensor([1, 4, 4, 3]))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void modeTest()
        {
            // >>> a = torch.randint(10, (5,))
            // >>> a
            // tensor([6, 5, 1, 0, 2])
            // >>> b = a + (torch.randn(50, 1) * 5).long()
            // >>> torch.mode(b, 0)
            // torch.return_types.mode(values=tensor([6, 5, 1, 0, 2]), indices=tensor([2, 2, 2, 2, 2]))
            // 

#if TODO
            var given=  a = torch.randint(10, (5,));
             given=  a;
            var expected=
                "tensor([6, 5, 1, 0, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  b = a + (torch.randn(50, 1) * 5).long();
             given=  torch.mode(b, 0);
             expected=
                "torch.return_types.mode(values=tensor([6, 5, 1, 0, 2]), indices=tensor([2, 2, 2, 2, 2]))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void normTest()
        {
            // >>> import torch
            // >>> a = torch.arange(9, dtype= torch.float) - 4
            // >>> b = a.reshape((3, 3))
            // >>> torch.norm(a)
            // tensor(7.7460)
            // >>> torch.norm(b)
            // tensor(7.7460)
            // >>> torch.norm(a, float('inf'))
            // tensor(4.)
            // >>> torch.norm(b, float('inf'))
            // tensor(4.)
            // >>> c = torch.tensor([[ 1, 2, 3],[-1, 1, 4]] , dtype= torch.float)
            // >>> torch.norm(c, dim=0)
            // tensor([1.4142, 2.2361, 5.0000])
            // >>> torch.norm(c, dim=1)
            // tensor([3.7417, 4.2426])
            // >>> torch.norm(c, p=1, dim=1)
            // tensor([6., 6.])
            // >>> d = torch.arange(8, dtype= torch.float).reshape(2,2,2)
            // >>> torch.norm(d, dim=(1,2))
            // tensor([ 3.7417, 11.2250])
            // >>> torch.norm(d[0, :, :]), torch.norm(d[1, :, :])
            // (tensor(3.7417), tensor(11.2250))
            // 

#if TODO
            var given=  import torch;
             given=  a = torch.arange(9, dtype= torch.float) - 4;
             given=  b = a.reshape((3, 3));
             given=  torch.norm(a);
            var expected=
                "tensor(7.7460)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.norm(b);
             expected=
                "tensor(7.7460)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.norm(a, float('inf'));
             expected=
                "tensor(4.)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.norm(b, float('inf'));
             expected=
                "tensor(4.)";
            Assert.AreEqual(expected, given.repr);
             given=  c = torch.tensor({{ 1, 2, 3},{-1, 1, 4}} , dtype= torch.float);
             given=  torch.norm(c, dim=0);
             expected=
                "tensor([1.4142, 2.2361, 5.0000])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.norm(c, dim=1);
             expected=
                "tensor([3.7417, 4.2426])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.norm(c, p=1, dim=1);
             expected=
                "tensor([6., 6.])";
            Assert.AreEqual(expected, given.repr);
             given=  d = torch.arange(8, dtype= torch.float).reshape(2,2,2);
             given=  torch.norm(d, dim=(1,2));
             expected=
                "tensor([ 3.7417, 11.2250])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.norm(d{0, :, :}), torch.norm(d{1, :, :});
             expected=
                "(tensor(3.7417), tensor(11.2250))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void prodTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[-0.8020,  0.5428, -1.5854]])
            // >>> torch.prod(a)
            // tensor(0.6902)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[-0.8020,  0.5428, -1.5854]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.prod(a);
             expected=
                "tensor(0.6902)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 2)
            // >>> a
            // tensor([[ 0.5261, -0.3837],
            //         [ 1.1857, -0.2498],
            //         [-1.1646,  0.0705],
            //         [ 1.1131, -1.0629]])
            // >>> torch.prod(a, 1)
            // tensor([-0.2018, -0.2962, -0.0821, -1.1831])
            // 

#if TODO
             given=  a = torch.randn(4, 2);
             given=  a;
             expected=
                "tensor([[ 0.5261, -0.3837],\n" +
                "        [ 1.1857, -0.2498],\n" +
                "        [-1.1646,  0.0705],\n" +
                "        [ 1.1131, -1.0629]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.prod(a, 1);
             expected=
                "tensor([-0.2018, -0.2962, -0.0821, -1.1831])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void stdTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[-0.8166, -1.3802, -0.3560]])
            // >>> torch.std(a)
            // tensor(0.5130)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[-0.8166, -1.3802, -0.3560]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.std(a);
             expected=
                "tensor(0.5130)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 0.2035,  1.2959,  1.8101, -0.4644],
            //         [ 1.5027, -0.3270,  0.5905,  0.6538],
            //         [-1.5745,  1.3330, -0.5596, -0.6548],
            //         [ 0.1264, -0.5080,  1.6420,  0.1992]])
            // >>> torch.std(a, dim=1)
            // tensor([ 1.0311,  0.7477,  1.2204,  0.9087])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[ 0.2035,  1.2959,  1.8101, -0.4644],\n" +
                "        [ 1.5027, -0.3270,  0.5905,  0.6538],\n" +
                "        [-1.5745,  1.3330, -0.5596, -0.6548],\n" +
                "        [ 0.1264, -0.5080,  1.6420,  0.1992]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.std(a, dim=1);
             expected=
                "tensor([ 1.0311,  0.7477,  1.2204,  0.9087])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sumTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[ 0.1133, -0.9567,  0.2958]])
            // >>> torch.sum(a)
            // tensor(-0.5475)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[ 0.1133, -0.9567,  0.2958]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sum(a);
             expected=
                "tensor(-0.5475)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 0.0569, -0.2475,  0.0737, -0.3429],
            //         [-0.2993,  0.9138,  0.9337, -1.6864],
            //         [ 0.1132,  0.7892, -0.1003,  0.5688],
            //         [ 0.3637, -0.9906, -0.4752, -1.5197]])
            // >>> torch.sum(a, 1)
            // tensor([-0.4598, -0.1381,  1.3708, -2.6217])
            // >>> b = torch.arange(4 * 5 * 6).view(4, 5, 6)
            // >>> torch.sum(b, (2, 1))
            // tensor([  435.,  1335.,  2235.,  3135.])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[ 0.0569, -0.2475,  0.0737, -0.3429],\n" +
                "        [-0.2993,  0.9138,  0.9337, -1.6864],\n" +
                "        [ 0.1132,  0.7892, -0.1003,  0.5688],\n" +
                "        [ 0.3637, -0.9906, -0.4752, -1.5197]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.sum(a, 1);
             expected=
                "tensor([-0.4598, -0.1381,  1.3708, -2.6217])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.arange(4 * 5 * 6).view(4, 5, 6);
             given=  torch.sum(b, (2, 1));
             expected=
                "tensor([  435.,  1335.,  2235.,  3135.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void uniqueTest()
        {
            // >>> output = torch.unique(torch.tensor([1, 3, 2, 3], dtype=torch.long))
            // >>> output
            // tensor([ 2,  3,  1])
            // 
            // >>> output, inverse_indices = torch.unique(
            //         torch.tensor([1, 3, 2, 3], dtype=torch.long), sorted=True, return_inverse=True)
            // >>> output
            // tensor([ 1,  2,  3])
            // >>> inverse_indices
            // tensor([ 0,  2,  1,  2])
            // 
            // >>> output, inverse_indices = torch.unique(
            //         torch.tensor([[1, 3], [2, 3]], dtype=torch.long), sorted=True, return_inverse=True)
            // >>> output
            // tensor([ 1,  2,  3])
            // >>> inverse_indices
            // tensor([[ 0,  2],
            //         [ 1,  2]])
            // 

#if TODO
            var given=  output = torch.unique(torch.tensor({1, 3, 2, 3}, dtype=torch.long));
             given=  output;
            var expected=
                "tensor([ 2,  3,  1])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  output, inverse_indices = torch.unique(;
             expected=
                "        torch.tensor([1, 3, 2, 3], dtype=torch.long), sorted=True, return_inverse=True)";
            Assert.AreEqual(expected, given.repr);
             given=  output;
             expected=
                "tensor([ 1,  2,  3])";
            Assert.AreEqual(expected, given.repr);
             given=  inverse_indices;
             expected=
                "tensor([ 0,  2,  1,  2])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  output, inverse_indices = torch.unique(;
             expected=
                "        torch.tensor([[1, 3], [2, 3]], dtype=torch.long), sorted=True, return_inverse=True)";
            Assert.AreEqual(expected, given.repr);
             given=  output;
             expected=
                "tensor([ 1,  2,  3])";
            Assert.AreEqual(expected, given.repr);
             given=  inverse_indices;
             expected=
                "tensor([[ 0,  2],\n" +
                "        [ 1,  2]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void unique_consecutiveTest()
        {
            // >>> x = torch.tensor([1, 1, 2, 2, 3, 1, 1, 2])
            // >>> output = torch.unique_consecutive(x)
            // >>> output
            // tensor([1, 2, 3, 1, 2])
            // 
            // >>> output, inverse_indices = torch.unique_consecutive(x, return_inverse=True)
            // >>> output
            // tensor([1, 2, 3, 1, 2])
            // >>> inverse_indices
            // tensor([0, 0, 1, 1, 2, 3, 3, 4])
            // 
            // >>> output, counts = torch.unique_consecutive(x, return_counts=True)
            // >>> output
            // tensor([1, 2, 3, 1, 2])
            // >>> counts
            // tensor([2, 2, 1, 2, 1])
            // 

#if TODO
            var given=  x = torch.tensor({1, 1, 2, 2, 3, 1, 1, 2});
             given=  output = torch.unique_consecutive(x);
             given=  output;
            var expected=
                "tensor([1, 2, 3, 1, 2])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  output, inverse_indices = torch.unique_consecutive(x, return_inverse=True);
             given=  output;
             expected=
                "tensor([1, 2, 3, 1, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  inverse_indices;
             expected=
                "tensor([0, 0, 1, 1, 2, 3, 3, 4])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  output, counts = torch.unique_consecutive(x, return_counts=True);
             given=  output;
             expected=
                "tensor([1, 2, 3, 1, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  counts;
             expected=
                "tensor([2, 2, 1, 2, 1])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void varTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[-0.3425, -1.2636, -0.4864]])
            // >>> torch.var(a)
            // tensor(0.2455)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[-0.3425, -1.2636, -0.4864]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.var(a);
             expected=
                "tensor(0.2455)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[-0.3567,  1.7385, -1.3042,  0.7423],
            //         [ 1.3436, -0.1015, -0.9834, -0.8438],
            //         [ 0.6056,  0.1089, -0.3112, -1.4085],
            //         [-0.7700,  0.6074, -0.1469,  0.7777]])
            // >>> torch.var(a, 1)
            // tensor([ 1.7444,  1.1363,  0.7356,  0.5112])
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[-0.3567,  1.7385, -1.3042,  0.7423],\n" +
                "        [ 1.3436, -0.1015, -0.9834, -0.8438],\n" +
                "        [ 0.6056,  0.1089, -0.3112, -1.4085],\n" +
                "        [-0.7700,  0.6074, -0.1469,  0.7777]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.var(a, 1);
             expected=
                "tensor([ 1.7444,  1.1363,  0.7356,  0.5112])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void allcloseTest()
        {
            // >>> torch.allclose(torch.tensor([10000., 1e-07]), torch.tensor([10000.1, 1e-08]))
            // False
            // >>> torch.allclose(torch.tensor([10000., 1e-08]), torch.tensor([10000.1, 1e-09]))
            // True
            // >>> torch.allclose(torch.tensor([1.0, float('nan')]), torch.tensor([1.0, float('nan')]))
            // False
            // >>> torch.allclose(torch.tensor([1.0, float('nan')]), torch.tensor([1.0, float('nan')]), equal_nan=True)
            // True
            // 

#if TODO
            var given=  torch.allclose(torch.tensor({10000., 1e-07}), torch.tensor({10000.1, 1e-08}));
            var expected=
                "False";
            Assert.AreEqual(expected, given.repr);
             given=  torch.allclose(torch.tensor({10000., 1e-08}), torch.tensor({10000.1, 1e-09}));
             expected=
                "True";
            Assert.AreEqual(expected, given.repr);
             given=  torch.allclose(torch.tensor({1.0, float('nan')}), torch.tensor({1.0, float('nan')}));
             expected=
                "False";
            Assert.AreEqual(expected, given.repr);
             given=  torch.allclose(torch.tensor({1.0, float('nan')}), torch.tensor({1.0, float('nan')}), equal_nan=True);
             expected=
                "True";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void argsortTest()
        {
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[ 0.0785,  1.5267, -0.8521,  0.4065],
            //         [ 0.1598,  0.0788, -0.0745, -1.2700],
            //         [ 1.2208,  1.0722, -0.7064,  1.2564],
            //         [ 0.0669, -0.2318, -0.8229, -0.9280]])
            // 
            // 
            // >>> torch.argsort(a, dim=1)
            // tensor([[2, 0, 3, 1],
            //         [3, 2, 1, 0],
            //         [2, 1, 0, 3],
            //         [3, 2, 1, 0]])
            // 

#if TODO
            var given=  a = torch.randn(4, 4);
             given=  a;
            var expected=
                "tensor([[ 0.0785,  1.5267, -0.8521,  0.4065],\n" +
                "        [ 0.1598,  0.0788, -0.0745, -1.2700],\n" +
                "        [ 1.2208,  1.0722, -0.7064,  1.2564],\n" +
                "        [ 0.0669, -0.2318, -0.8229, -0.9280]])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.argsort(a, dim=1);
             expected=
                "tensor([[2, 0, 3, 1],\n" +
                "        [3, 2, 1, 0],\n" +
                "        [2, 1, 0, 3],\n" +
                "        [3, 2, 1, 0]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void eqTest()
        {
            // >>> torch.eq(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            // tensor([[ 1,  0],
            //         [ 0,  1]], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.eq(torch.tensor({{1, 2}, {3, 4}}), torch.tensor({{1, 1}, {4, 4}}));
            var expected=
                "tensor([[ 1,  0],\n" +
                "        [ 0,  1]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void equalTest()
        {
            // >>> torch.equal(torch.tensor([1, 2]), torch.tensor([1, 2]))
            // True
            // 

#if TODO
            var given=  torch.equal(torch.tensor({1, 2}), torch.tensor({1, 2}));
            var expected=
                "True";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void geTest()
        {
            // >>> torch.ge(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            // tensor([[ 1,  1],
            //         [ 0,  1]], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.ge(torch.tensor({{1, 2}, {3, 4}}), torch.tensor({{1, 1}, {4, 4}}));
            var expected=
                "tensor([[ 1,  1],\n" +
                "        [ 0,  1]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void gtTest()
        {
            // >>> torch.gt(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            // tensor([[ 0,  1],
            //         [ 0,  0]], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.gt(torch.tensor({{1, 2}, {3, 4}}), torch.tensor({{1, 1}, {4, 4}}));
            var expected=
                "tensor([[ 0,  1],\n" +
                "        [ 0,  0]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void isfiniteTest()
        {
            // >>> torch.isfinite(torch.tensor([1, float('inf'), 2, float('-inf'), float('nan')]))
            // tensor([ 1,  0,  1,  0,  0], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.isfinite(torch.tensor({1, float('inf'), 2, float('-inf'), float('nan')}));
            var expected=
                "tensor([ 1,  0,  1,  0,  0], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void isinfTest()
        {
            // >>> torch.isinf(torch.tensor([1, float('inf'), 2, float('-inf'), float('nan')]))
            // tensor([ 0,  1,  0,  1,  0], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.isinf(torch.tensor({1, float('inf'), 2, float('-inf'), float('nan')}));
            var expected=
                "tensor([ 0,  1,  0,  1,  0], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void isnanTest()
        {
            // >>> torch.isnan(torch.tensor([1, float('nan'), 2]))
            // tensor([ 0,  1,  0], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.isnan(torch.tensor({1, float('nan'), 2}));
            var expected=
                "tensor([ 0,  1,  0], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void kthvalueTest()
        {
            // >>> x = torch.arange(1., 6.)
            // >>> x
            // tensor([ 1.,  2.,  3.,  4.,  5.])
            // >>> torch.kthvalue(x, 4)
            // torch.return_types.kthvalue(values=tensor(4.), indices=tensor(3))
            // 
            // >>> x=torch.arange(1.,7.).resize_(2,3)
            // >>> x
            // tensor([[ 1.,  2.,  3.],
            //         [ 4.,  5.,  6.]])
            // >>> torch.kthvalue(x, 2, 0, True)
            // torch.return_types.kthvalue(values=tensor([[4., 5., 6.]]), indices=tensor([[1, 1, 1]]))
            // 

#if TODO
            var given=  x = torch.arange(1., 6.);
             given=  x;
            var expected=
                "tensor([ 1.,  2.,  3.,  4.,  5.])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.kthvalue(x, 4);
             expected=
                "torch.return_types.kthvalue(values=tensor(4.), indices=tensor(3))\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  x=torch.arange(1.,7.).resize_(2,3);
             given=  x;
             expected=
                "tensor([[ 1.,  2.,  3.],\n" +
                "        [ 4.,  5.,  6.]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.kthvalue(x, 2, 0, True);
             expected=
                "torch.return_types.kthvalue(values=tensor([[4., 5., 6.]]), indices=tensor([[1, 1, 1]]))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void leTest()
        {
            // >>> torch.le(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            // tensor([[ 1,  0],
            //         [ 1,  1]], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.le(torch.tensor({{1, 2}, {3, 4}}), torch.tensor({{1, 1}, {4, 4}}));
            var expected=
                "tensor([[ 1,  0],\n" +
                "        [ 1,  1]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void ltTest()
        {
            // >>> torch.lt(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            // tensor([[ 0,  0],
            //         [ 1,  0]], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.lt(torch.tensor({{1, 2}, {3, 4}}), torch.tensor({{1, 1}, {4, 4}}));
            var expected=
                "tensor([[ 0,  0],\n" +
                "        [ 1,  0]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void maxTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[ 0.6763,  0.7445, -2.2369]])
            // >>> torch.max(a)
            // tensor(0.7445)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[ 0.6763,  0.7445, -2.2369]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.max(a);
             expected=
                "tensor(0.7445)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[-1.2360, -0.2942, -0.1222,  0.8475],
            //         [ 1.1949, -1.1127, -2.2379, -0.6702],
            //         [ 1.5717, -0.9207,  0.1297, -1.8768],
            //         [-0.6172,  1.0036, -0.6060, -0.2432]])
            // >>> torch.max(a, 1)
            // torch.return_types.max(values=tensor([0.8475, 1.1949, 1.5717, 1.0036]), indices=tensor([3, 0, 0, 1]))
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[-1.2360, -0.2942, -0.1222,  0.8475],\n" +
                "        [ 1.1949, -1.1127, -2.2379, -0.6702],\n" +
                "        [ 1.5717, -0.9207,  0.1297, -1.8768],\n" +
                "        [-0.6172,  1.0036, -0.6060, -0.2432]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.max(a, 1);
             expected=
                "torch.return_types.max(values=tensor([0.8475, 1.1949, 1.5717, 1.0036]), indices=tensor([3, 0, 0, 1]))";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.2942, -0.7416,  0.2653, -0.1584])
            // >>> b = torch.randn(4)
            // >>> b
            // tensor([ 0.8722, -1.7421, -0.4141, -0.5055])
            // >>> torch.max(a, b)
            // tensor([ 0.8722, -0.7416,  0.2653, -0.1584])
            // 

#if TODO
             given=  a = torch.randn(4);
             given=  a;
             expected=
                "tensor([ 0.2942, -0.7416,  0.2653, -0.1584])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4);
             given=  b;
             expected=
                "tensor([ 0.8722, -1.7421, -0.4141, -0.5055])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.max(a, b);
             expected=
                "tensor([ 0.8722, -0.7416,  0.2653, -0.1584])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void minTest()
        {
            // >>> a = torch.randn(1, 3)
            // >>> a
            // tensor([[ 0.6750,  1.0857,  1.7197]])
            // >>> torch.min(a)
            // tensor(0.6750)
            // 

#if TODO
            var given=  a = torch.randn(1, 3);
             given=  a;
            var expected=
                "tensor([[ 0.6750,  1.0857,  1.7197]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.min(a);
             expected=
                "tensor(0.6750)";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4, 4)
            // >>> a
            // tensor([[-0.6248,  1.1334, -1.1899, -0.2803],
            //         [-1.4644, -0.2635, -0.3651,  0.6134],
            //         [ 0.2457,  0.0384,  1.0128,  0.7015],
            //         [-0.1153,  2.9849,  2.1458,  0.5788]])
            // >>> torch.min(a, 1)
            // torch.return_types.min(values=tensor([-1.1899, -1.4644,  0.0384, -0.1153]), indices=tensor([2, 0, 1, 0]))
            // 

#if TODO
             given=  a = torch.randn(4, 4);
             given=  a;
             expected=
                "tensor([[-0.6248,  1.1334, -1.1899, -0.2803],\n" +
                "        [-1.4644, -0.2635, -0.3651,  0.6134],\n" +
                "        [ 0.2457,  0.0384,  1.0128,  0.7015],\n" +
                "        [-0.1153,  2.9849,  2.1458,  0.5788]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.min(a, 1);
             expected=
                "torch.return_types.min(values=tensor([-1.1899, -1.4644,  0.0384, -0.1153]), indices=tensor([2, 0, 1, 0]))";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(4)
            // >>> a
            // tensor([ 0.8137, -1.1740, -0.6460,  0.6308])
            // >>> b = torch.randn(4)
            // >>> b
            // tensor([-0.1369,  0.1555,  0.4019, -0.1929])
            // >>> torch.min(a, b)
            // tensor([-0.1369, -1.1740, -0.6460, -0.1929])
            // 

#if TODO
             given=  a = torch.randn(4);
             given=  a;
             expected=
                "tensor([ 0.8137, -1.1740, -0.6460,  0.6308])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4);
             given=  b;
             expected=
                "tensor([-0.1369,  0.1555,  0.4019, -0.1929])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.min(a, b);
             expected=
                "tensor([-0.1369, -1.1740, -0.6460, -0.1929])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void neTest()
        {
            // >>> torch.ne(torch.tensor([[1, 2], [3, 4]]), torch.tensor([[1, 1], [4, 4]]))
            // tensor([[ 0,  1],
            //         [ 1,  0]], dtype=torch.uint8)
            // 

#if TODO
            var given=  torch.ne(torch.tensor({{1, 2}, {3, 4}}), torch.tensor({{1, 1}, {4, 4}}));
            var expected=
                "tensor([[ 0,  1],\n" +
                "        [ 1,  0]], dtype=torch.uint8)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void sortTest()
        {
            // >>> x = torch.randn(3, 4)
            // >>> sorted, indices = torch.sort(x)
            // >>> sorted
            // tensor([[-0.2162,  0.0608,  0.6719,  2.3332],
            //         [-0.5793,  0.0061,  0.6058,  0.9497],
            //         [-0.5071,  0.3343,  0.9553,  1.0960]])
            // >>> indices
            // tensor([[ 1,  0,  2,  3],
            //         [ 3,  1,  0,  2],
            //         [ 0,  3,  1,  2]])
            // 
            // >>> sorted, indices = torch.sort(x, 0)
            // >>> sorted
            // tensor([[-0.5071, -0.2162,  0.6719, -0.5793],
            //         [ 0.0608,  0.0061,  0.9497,  0.3343],
            //         [ 0.6058,  0.9553,  1.0960,  2.3332]])
            // >>> indices
            // tensor([[ 2,  0,  0,  1],
            //         [ 0,  1,  1,  2],
            //         [ 1,  2,  2,  0]])
            // 

#if TODO
            var given=  x = torch.randn(3, 4);
             given=  sorted, indices = torch.sort(x);
             given=  sorted;
            var expected=
                "tensor([[-0.2162,  0.0608,  0.6719,  2.3332],\n" +
                "        [-0.5793,  0.0061,  0.6058,  0.9497],\n" +
                "        [-0.5071,  0.3343,  0.9553,  1.0960]])";
            Assert.AreEqual(expected, given.repr);
             given=  indices;
             expected=
                "tensor([[ 1,  0,  2,  3],\n" +
                "        [ 3,  1,  0,  2],\n" +
                "        [ 0,  3,  1,  2]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  sorted, indices = torch.sort(x, 0);
             given=  sorted;
             expected=
                "tensor([[-0.5071, -0.2162,  0.6719, -0.5793],\n" +
                "        [ 0.0608,  0.0061,  0.9497,  0.3343],\n" +
                "        [ 0.6058,  0.9553,  1.0960,  2.3332]])";
            Assert.AreEqual(expected, given.repr);
             given=  indices;
             expected=
                "tensor([[ 2,  0,  0,  1],\n" +
                "        [ 0,  1,  1,  2],\n" +
                "        [ 1,  2,  2,  0]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void topkTest()
        {
            // >>> x = torch.arange(1., 6.)
            // >>> x
            // tensor([ 1.,  2.,  3.,  4.,  5.])
            // >>> torch.topk(x, 3)
            // torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2]))
            // 

#if TODO
            var given=  x = torch.arange(1., 6.);
             given=  x;
            var expected=
                "tensor([ 1.,  2.,  3.,  4.,  5.])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.topk(x, 3);
             expected=
                "torch.return_types.topk(values=tensor([5., 4., 3.]), indices=tensor([4, 3, 2]))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void fftTest()
        {
            // >>> # unbatched 2D FFT
            // >>> x = torch.randn(4, 3, 2)
            // >>> torch.fft(x, 2)
            // tensor([[[-0.0876,  1.7835],
            //          [-2.0399, -2.9754],
            //          [ 4.4773, -5.0119]],
            // 
            //         [[-1.5716,  2.7631],
            //          [-3.8846,  5.2652],
            //          [ 0.2046, -0.7088]],
            // 
            //         [[ 1.9938, -0.5901],
            //          [ 6.5637,  6.4556],
            //          [ 2.9865,  4.9318]],
            // 
            //         [[ 7.0193,  1.1742],
            //          [-1.3717, -2.1084],
            //          [ 2.0289,  2.9357]]])
            // >>> # batched 1D FFT
            // >>> torch.fft(x, 1)
            // tensor([[[ 1.8385,  1.2827],
            //          [-0.1831,  1.6593],
            //          [ 2.4243,  0.5367]],
            // 
            //         [[-0.9176, -1.5543],
            //          [-3.9943, -2.9860],
            //          [ 1.2838, -2.9420]],
            // 
            //         [[-0.8854, -0.6860],
            //          [ 2.4450,  0.0808],
            //          [ 1.3076, -0.5768]],
            // 
            //         [[-0.1231,  2.7411],
            //          [-0.3075, -1.7295],
            //          [-0.5384, -2.0299]]])
            // >>> # arbitrary number of batch dimensions, 2D FFT
            // >>> x = torch.randn(3, 3, 5, 5, 2)
            // >>> y = torch.fft(x, 2)
            // >>> y.shape
            // torch.Size([3, 3, 5, 5, 2])
            // 

#if TODO
            var given=  # unbatched 2D FFT;
             given=  x = torch.randn(4, 3, 2);
             given=  torch.fft(x, 2);
            var expected=
                "tensor([[[-0.0876,  1.7835],\n" +
                "         [-2.0399, -2.9754],\n" +
                "         [ 4.4773, -5.0119]],\n" +
                "\n" +
                "        [[-1.5716,  2.7631],\n" +
                "         [-3.8846,  5.2652],\n" +
                "         [ 0.2046, -0.7088]],\n" +
                "\n" +
                "        [[ 1.9938, -0.5901],\n" +
                "         [ 6.5637,  6.4556],\n" +
                "         [ 2.9865,  4.9318]],\n" +
                "\n" +
                "        [[ 7.0193,  1.1742],\n" +
                "         [-1.3717, -2.1084],\n" +
                "         [ 2.0289,  2.9357]]])";
            Assert.AreEqual(expected, given.repr);
             given=  # batched 1D FFT;
             given=  torch.fft(x, 1);
             expected=
                "tensor([[[ 1.8385,  1.2827],\n" +
                "         [-0.1831,  1.6593],\n" +
                "         [ 2.4243,  0.5367]],\n" +
                "\n" +
                "        [[-0.9176, -1.5543],\n" +
                "         [-3.9943, -2.9860],\n" +
                "         [ 1.2838, -2.9420]],\n" +
                "\n" +
                "        [[-0.8854, -0.6860],\n" +
                "         [ 2.4450,  0.0808],\n" +
                "         [ 1.3076, -0.5768]],\n" +
                "\n" +
                "        [[-0.1231,  2.7411],\n" +
                "         [-0.3075, -1.7295],\n" +
                "         [-0.5384, -2.0299]]])";
            Assert.AreEqual(expected, given.repr);
             given=  # arbitrary number of batch dimensions, 2D FFT;
             given=  x = torch.randn(3, 3, 5, 5, 2);
             given=  y = torch.fft(x, 2);
             given=  y.shape;
             expected=
                "torch.Size([3, 3, 5, 5, 2])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void ifftTest()
        {
            // >>> x = torch.randn(3, 3, 2)
            // >>> x
            // tensor([[[ 1.2766,  1.3680],
            //          [-0.8337,  2.0251],
            //          [ 0.9465, -1.4390]],
            // 
            //         [[-0.1890,  1.6010],
            //          [ 1.1034, -1.9230],
            //          [-0.9482,  1.0775]],
            // 
            //         [[-0.7708, -0.8176],
            //          [-0.1843, -0.2287],
            //          [-1.9034, -0.2196]]])
            // >>> y = torch.fft(x, 2)
            // >>> torch.ifft(y, 2)  # recover x
            // tensor([[[ 1.2766,  1.3680],
            //          [-0.8337,  2.0251],
            //          [ 0.9465, -1.4390]],
            // 
            //         [[-0.1890,  1.6010],
            //          [ 1.1034, -1.9230],
            //          [-0.9482,  1.0775]],
            // 
            //         [[-0.7708, -0.8176],
            //          [-0.1843, -0.2287],
            //          [-1.9034, -0.2196]]])
            // 

#if TODO
            var given=  x = torch.randn(3, 3, 2);
             given=  x;
            var expected=
                "tensor([[[ 1.2766,  1.3680],\n" +
                "         [-0.8337,  2.0251],\n" +
                "         [ 0.9465, -1.4390]],\n" +
                "\n" +
                "        [[-0.1890,  1.6010],\n" +
                "         [ 1.1034, -1.9230],\n" +
                "         [-0.9482,  1.0775]],\n" +
                "\n" +
                "        [[-0.7708, -0.8176],\n" +
                "         [-0.1843, -0.2287],\n" +
                "         [-1.9034, -0.2196]]])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.fft(x, 2);
             given=  torch.ifft(y, 2)  # recover x;
             expected=
                "tensor([[[ 1.2766,  1.3680],\n" +
                "         [-0.8337,  2.0251],\n" +
                "         [ 0.9465, -1.4390]],\n" +
                "\n" +
                "        [[-0.1890,  1.6010],\n" +
                "         [ 1.1034, -1.9230],\n" +
                "         [-0.9482,  1.0775]],\n" +
                "\n" +
                "        [[-0.7708, -0.8176],\n" +
                "         [-0.1843, -0.2287],\n" +
                "         [-1.9034, -0.2196]]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void rfftTest()
        {
            // >>> x = torch.randn(5, 5)
            // >>> torch.rfft(x, 2).shape
            // torch.Size([5, 3, 2])
            // >>> torch.rfft(x, 2, onesided=False).shape
            // torch.Size([5, 5, 2])
            // 

#if TODO
            var given=  x = torch.randn(5, 5);
             given=  torch.rfft(x, 2).shape;
            var expected=
                "torch.Size([5, 3, 2])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.rfft(x, 2, onesided=False).shape;
             expected=
                "torch.Size([5, 5, 2])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void irfftTest()
        {
            // >>> x = torch.randn(4, 4)
            // >>> torch.rfft(x, 2, onesided=True).shape
            // torch.Size([4, 3, 2])
            // >>>
            // >>> # notice that with onesided=True, output size does not determine the original signal size
            // >>> x = torch.randn(4, 5)
            // 
            // >>> torch.rfft(x, 2, onesided=True).shape
            // torch.Size([4, 3, 2])
            // >>>
            // >>> # now we use the original shape to recover x
            // >>> x
            // tensor([[-0.8992,  0.6117, -1.6091, -0.4155, -0.8346],
            //         [-2.1596, -0.0853,  0.7232,  0.1941, -0.0789],
            //         [-2.0329,  1.1031,  0.6869, -0.5042,  0.9895],
            //         [-0.1884,  0.2858, -1.5831,  0.9917, -0.8356]])
            // >>> y = torch.rfft(x, 2, onesided=True)
            // >>> torch.irfft(y, 2, onesided=True, signal_sizes=x.shape)  # recover x
            // tensor([[-0.8992,  0.6117, -1.6091, -0.4155, -0.8346],
            //         [-2.1596, -0.0853,  0.7232,  0.1941, -0.0789],
            //         [-2.0329,  1.1031,  0.6869, -0.5042,  0.9895],
            //         [-0.1884,  0.2858, -1.5831,  0.9917, -0.8356]])
            // 

#if TODO
            var given=  x = torch.randn(4, 4);
             given=  torch.rfft(x, 2, onesided=True).shape;
            var expected=
                "torch.Size([4, 3, 2])";
            Assert.AreEqual(expected, given.repr);
             given= ;
             given=  # notice that with onesided=True, output size does not determine the original signal size;
             given=  x = torch.randn(4, 5);
             expected=
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.rfft(x, 2, onesided=True).shape;
             expected=
                "torch.Size([4, 3, 2])";
            Assert.AreEqual(expected, given.repr);
             given= ;
             given=  # now we use the original shape to recover x;
             given=  x;
             expected=
                "tensor([[-0.8992,  0.6117, -1.6091, -0.4155, -0.8346],\n" +
                "        [-2.1596, -0.0853,  0.7232,  0.1941, -0.0789],\n" +
                "        [-2.0329,  1.1031,  0.6869, -0.5042,  0.9895],\n" +
                "        [-0.1884,  0.2858, -1.5831,  0.9917, -0.8356]])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.rfft(x, 2, onesided=True);
             given=  torch.irfft(y, 2, onesided=True, signal_sizes=x.shape)  # recover x;
             expected=
                "tensor([[-0.8992,  0.6117, -1.6091, -0.4155, -0.8346],\n" +
                "        [-2.1596, -0.0853,  0.7232,  0.1941, -0.0789],\n" +
                "        [-2.0329,  1.1031,  0.6869, -0.5042,  0.9895],\n" +
                "        [-0.1884,  0.2858, -1.5831,  0.9917, -0.8356]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void bincountTest()
        {
            // >>> input = torch.randint(0, 8, (5,), dtype=torch.int64)
            // >>> weights = torch.linspace(0, 1, steps=5)
            // >>> input, weights
            // (tensor([4, 3, 6, 3, 4]),
            //  tensor([ 0.0000,  0.2500,  0.5000,  0.7500,  1.0000])
            // 
            // >>> torch.bincount(input)
            // tensor([0, 0, 0, 2, 2, 0, 1])
            // 
            // >>> input.bincount(weights)
            // tensor([0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.5000])
            // 

#if TODO
            var given=  input = torch.randint(0, 8, (5,), dtype=torch.int64);
             given=  weights = torch.linspace(0, 1, steps=5);
             given=  input, weights;
            var expected=
                "(tensor([4, 3, 6, 3, 4]),\n" +
                " tensor([ 0.0000,  0.2500,  0.5000,  0.7500,  1.0000])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.bincount(input);
             expected=
                "tensor([0, 0, 0, 2, 2, 0, 1])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  input.bincount(weights);
             expected=
                "tensor([0.0000, 0.0000, 0.0000, 1.0000, 1.0000, 0.0000, 0.5000])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void broadcast_tensorsTest()
        {
            // >>> x = torch.arange(3).view(1, 3)
            // >>> y = torch.arange(2).view(2, 1)
            // >>> a, b = torch.broadcast_tensors(x, y)
            // >>> a.size()
            // torch.Size([2, 3])
            // >>> a
            // tensor([[0, 1, 2],
            //         [0, 1, 2]])
            // 

#if TODO
            var given=  x = torch.arange(3).view(1, 3);
             given=  y = torch.arange(2).view(2, 1);
             given=  a, b = torch.broadcast_tensors(x, y);
             given=  a.size();
            var expected=
                "torch.Size([2, 3])";
            Assert.AreEqual(expected, given.repr);
             given=  a;
             expected=
                "tensor([[0, 1, 2],\n" +
                "        [0, 1, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void cartesian_prodTest()
        {
            // >>> a = [1, 2, 3]
            // >>> b = [4, 5]
            // >>> list(itertools.product(a, b))
            // [(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]
            // >>> tensor_a = torch.tensor(a)
            // >>> tensor_b = torch.tensor(b)
            // >>> torch.cartesian_prod(tensor_a, tensor_b)
            // tensor([[1, 4],
            //         [1, 5],
            //         [2, 4],
            //         [2, 5],
            //         [3, 4],
            //         [3, 5]])
            // 

#if TODO
            var given=  a = [1, 2, 3];
             given=  b = [4, 5];
             given=  list(itertools.product(a, b));
            var expected=
                "[(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)]";
            Assert.AreEqual(expected, given.repr);
             given=  tensor_a = torch.tensor(a);
             given=  tensor_b = torch.tensor(b);
             given=  torch.cartesian_prod(tensor_a, tensor_b);
             expected=
                "tensor([[1, 4],\n" +
                "        [1, 5],\n" +
                "        [2, 4],\n" +
                "        [2, 5],\n" +
                "        [3, 4],\n" +
                "        [3, 5]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void combinationsTest()
        {
            // >>> a = [1, 2, 3]
            // >>> list(itertools.combinations(a, r=2))
            // [(1, 2), (1, 3), (2, 3)]
            // >>> list(itertools.combinations(a, r=3))
            // [(1, 2, 3)]
            // >>> list(itertools.combinations_with_replacement(a, r=2))
            // [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]
            // >>> tensor_a = torch.tensor(a)
            // >>> torch.combinations(tensor_a)
            // tensor([[1, 2],
            //         [1, 3],
            //         [2, 3]])
            // >>> torch.combinations(tensor_a, r=3)
            // tensor([[1, 2, 3]])
            // >>> torch.combinations(tensor_a, with_replacement=True)
            // tensor([[1, 1],
            //         [1, 2],
            //         [1, 3],
            //         [2, 2],
            //         [2, 3],
            //         [3, 3]])
            // 

#if TODO
            var given=  a = [1, 2, 3];
             given=  list(itertools.combinations(a, r=2));
            var expected=
                "[(1, 2), (1, 3), (2, 3)]";
            Assert.AreEqual(expected, given.repr);
             given=  list(itertools.combinations(a, r=3));
             expected=
                "[(1, 2, 3)]";
            Assert.AreEqual(expected, given.repr);
             given=  list(itertools.combinations_with_replacement(a, r=2));
             expected=
                "[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]";
            Assert.AreEqual(expected, given.repr);
             given=  tensor_a = torch.tensor(a);
             given=  torch.combinations(tensor_a);
             expected=
                "tensor([[1, 2],\n" +
                "        [1, 3],\n" +
                "        [2, 3]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.combinations(tensor_a, r=3);
             expected=
                "tensor([[1, 2, 3]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.combinations(tensor_a, with_replacement=True);
             expected=
                "tensor([[1, 1],\n" +
                "        [1, 2],\n" +
                "        [1, 3],\n" +
                "        [2, 2],\n" +
                "        [2, 3],\n" +
                "        [3, 3]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void crossTest()
        {
            // >>> a = torch.randn(4, 3)
            // >>> a
            // tensor([[-0.3956,  1.1455,  1.6895],
            //         [-0.5849,  1.3672,  0.3599],
            //         [-1.1626,  0.7180, -0.0521],
            //         [-0.1339,  0.9902, -2.0225]])
            // >>> b = torch.randn(4, 3)
            // >>> b
            // tensor([[-0.0257, -1.4725, -1.2251],
            //         [-1.1479, -0.7005, -1.9757],
            //         [-1.3904,  0.3726, -1.1836],
            //         [-0.9688, -0.7153,  0.2159]])
            // >>> torch.cross(a, b, dim=1)
            // tensor([[ 1.0844, -0.5281,  0.6120],
            //         [-2.4490, -1.5687,  1.9792],
            //         [-0.8304, -1.3037,  0.5650],
            //         [-1.2329,  1.9883,  1.0551]])
            // >>> torch.cross(a, b)
            // tensor([[ 1.0844, -0.5281,  0.6120],
            //         [-2.4490, -1.5687,  1.9792],
            //         [-0.8304, -1.3037,  0.5650],
            //         [-1.2329,  1.9883,  1.0551]])
            // 

#if TODO
            var given=  a = torch.randn(4, 3);
             given=  a;
            var expected=
                "tensor([[-0.3956,  1.1455,  1.6895],\n" +
                "        [-0.5849,  1.3672,  0.3599],\n" +
                "        [-1.1626,  0.7180, -0.0521],\n" +
                "        [-0.1339,  0.9902, -2.0225]])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4, 3);
             given=  b;
             expected=
                "tensor([[-0.0257, -1.4725, -1.2251],\n" +
                "        [-1.1479, -0.7005, -1.9757],\n" +
                "        [-1.3904,  0.3726, -1.1836],\n" +
                "        [-0.9688, -0.7153,  0.2159]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cross(a, b, dim=1);
             expected=
                "tensor([[ 1.0844, -0.5281,  0.6120],\n" +
                "        [-2.4490, -1.5687,  1.9792],\n" +
                "        [-0.8304, -1.3037,  0.5650],\n" +
                "        [-1.2329,  1.9883,  1.0551]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cross(a, b);
             expected=
                "tensor([[ 1.0844, -0.5281,  0.6120],\n" +
                "        [-2.4490, -1.5687,  1.9792],\n" +
                "        [-0.8304, -1.3037,  0.5650],\n" +
                "        [-1.2329,  1.9883,  1.0551]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void diagTest()
        {
            // >>> a = torch.randn(3)
            // >>> a
            // tensor([ 0.5950,-0.0872, 2.3298])
            // >>> torch.diag(a)
            // tensor([[ 0.5950, 0.0000, 0.0000],
            //         [ 0.0000,-0.0872, 0.0000],
            //         [ 0.0000, 0.0000, 2.3298]])
            // >>> torch.diag(a, 1)
            // tensor([[ 0.0000, 0.5950, 0.0000, 0.0000],
            //         [ 0.0000, 0.0000,-0.0872, 0.0000],
            //         [ 0.0000, 0.0000, 0.0000, 2.3298],
            //         [ 0.0000, 0.0000, 0.0000, 0.0000]])
            // 

#if TODO
            var given=  a = torch.randn(3);
             given=  a;
            var expected=
                "tensor([ 0.5950,-0.0872, 2.3298])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diag(a);
             expected=
                "tensor([[ 0.5950, 0.0000, 0.0000],\n" +
                "        [ 0.0000,-0.0872, 0.0000],\n" +
                "        [ 0.0000, 0.0000, 2.3298]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diag(a, 1);
             expected=
                "tensor([[ 0.0000, 0.5950, 0.0000, 0.0000],\n" +
                "        [ 0.0000, 0.0000,-0.0872, 0.0000],\n" +
                "        [ 0.0000, 0.0000, 0.0000, 2.3298],\n" +
                "        [ 0.0000, 0.0000, 0.0000, 0.0000]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.randn(3, 3)
            // >>> a
            // tensor([[-0.4264, 0.0255,-0.1064],
            //         [ 0.8795,-0.2429, 0.1374],
            //         [ 0.1029,-0.6482,-1.6300]])
            // >>> torch.diag(a, 0)
            // tensor([-0.4264,-0.2429,-1.6300])
            // >>> torch.diag(a, 1)
            // tensor([ 0.0255, 0.1374])
            // 

#if TODO
             given=  a = torch.randn(3, 3);
             given=  a;
             expected=
                "tensor([[-0.4264, 0.0255,-0.1064],\n" +
                "        [ 0.8795,-0.2429, 0.1374],\n" +
                "        [ 0.1029,-0.6482,-1.6300]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diag(a, 0);
             expected=
                "tensor([-0.4264,-0.2429,-1.6300])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diag(a, 1);
             expected=
                "tensor([ 0.0255, 0.1374])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void diag_embedTest()
        {
            // >>> a = torch.randn(2, 3)
            // >>> torch.diag_embed(a)
            // tensor([[[ 1.5410,  0.0000,  0.0000],
            //          [ 0.0000, -0.2934,  0.0000],
            //          [ 0.0000,  0.0000, -2.1788]],
            // 
            //         [[ 0.5684,  0.0000,  0.0000],
            //          [ 0.0000, -1.0845,  0.0000],
            //          [ 0.0000,  0.0000, -1.3986]]])
            // 
            // >>> torch.diag_embed(a, offset=1, dim1=0, dim2=2)
            // tensor([[[ 0.0000,  1.5410,  0.0000,  0.0000],
            //          [ 0.0000,  0.5684,  0.0000,  0.0000]],
            // 
            //         [[ 0.0000,  0.0000, -0.2934,  0.0000],
            //          [ 0.0000,  0.0000, -1.0845,  0.0000]],
            // 
            //         [[ 0.0000,  0.0000,  0.0000, -2.1788],
            //          [ 0.0000,  0.0000,  0.0000, -1.3986]],
            // 
            //         [[ 0.0000,  0.0000,  0.0000,  0.0000],
            //          [ 0.0000,  0.0000,  0.0000,  0.0000]]])
            // 

#if TODO
            var given=  a = torch.randn(2, 3);
             given=  torch.diag_embed(a);
            var expected=
                "tensor([[[ 1.5410,  0.0000,  0.0000],\n" +
                "         [ 0.0000, -0.2934,  0.0000],\n" +
                "         [ 0.0000,  0.0000, -2.1788]],\n" +
                "\n" +
                "        [[ 0.5684,  0.0000,  0.0000],\n" +
                "         [ 0.0000, -1.0845,  0.0000],\n" +
                "         [ 0.0000,  0.0000, -1.3986]]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diag_embed(a, offset=1, dim1=0, dim2=2);
             expected=
                "tensor([[[ 0.0000,  1.5410,  0.0000,  0.0000],\n" +
                "         [ 0.0000,  0.5684,  0.0000,  0.0000]],\n" +
                "\n" +
                "        [[ 0.0000,  0.0000, -0.2934,  0.0000],\n" +
                "         [ 0.0000,  0.0000, -1.0845,  0.0000]],\n" +
                "\n" +
                "        [[ 0.0000,  0.0000,  0.0000, -2.1788],\n" +
                "         [ 0.0000,  0.0000,  0.0000, -1.3986]],\n" +
                "\n" +
                "        [[ 0.0000,  0.0000,  0.0000,  0.0000],\n" +
                "         [ 0.0000,  0.0000,  0.0000,  0.0000]]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void diagflatTest()
        {
            // >>> a = torch.randn(3)
            // >>> a
            // tensor([-0.2956, -0.9068,  0.1695])
            // >>> torch.diagflat(a)
            // tensor([[-0.2956,  0.0000,  0.0000],
            //         [ 0.0000, -0.9068,  0.0000],
            //         [ 0.0000,  0.0000,  0.1695]])
            // >>> torch.diagflat(a, 1)
            // tensor([[ 0.0000, -0.2956,  0.0000,  0.0000],
            //         [ 0.0000,  0.0000, -0.9068,  0.0000],
            //         [ 0.0000,  0.0000,  0.0000,  0.1695],
            //         [ 0.0000,  0.0000,  0.0000,  0.0000]])
            // 
            // >>> a = torch.randn(2, 2)
            // >>> a
            // tensor([[ 0.2094, -0.3018],
            //         [-0.1516,  1.9342]])
            // >>> torch.diagflat(a)
            // tensor([[ 0.2094,  0.0000,  0.0000,  0.0000],
            //         [ 0.0000, -0.3018,  0.0000,  0.0000],
            //         [ 0.0000,  0.0000, -0.1516,  0.0000],
            //         [ 0.0000,  0.0000,  0.0000,  1.9342]])
            // 

#if TODO
            var given=  a = torch.randn(3);
             given=  a;
            var expected=
                "tensor([-0.2956, -0.9068,  0.1695])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diagflat(a);
             expected=
                "tensor([[-0.2956,  0.0000,  0.0000],\n" +
                "        [ 0.0000, -0.9068,  0.0000],\n" +
                "        [ 0.0000,  0.0000,  0.1695]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diagflat(a, 1);
             expected=
                "tensor([[ 0.0000, -0.2956,  0.0000,  0.0000],\n" +
                "        [ 0.0000,  0.0000, -0.9068,  0.0000],\n" +
                "        [ 0.0000,  0.0000,  0.0000,  0.1695],\n" +
                "        [ 0.0000,  0.0000,  0.0000,  0.0000]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  a = torch.randn(2, 2);
             given=  a;
             expected=
                "tensor([[ 0.2094, -0.3018],\n" +
                "        [-0.1516,  1.9342]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diagflat(a);
             expected=
                "tensor([[ 0.2094,  0.0000,  0.0000,  0.0000],\n" +
                "        [ 0.0000, -0.3018,  0.0000,  0.0000],\n" +
                "        [ 0.0000,  0.0000, -0.1516,  0.0000],\n" +
                "        [ 0.0000,  0.0000,  0.0000,  1.9342]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void diagonalTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a
            // tensor([[-1.0854,  1.1431, -0.1752],
            //         [ 0.8536, -0.0905,  0.0360],
            //         [ 0.6927, -0.3735, -0.4945]])
            // 
            // 
            // >>> torch.diagonal(a, 0)
            // tensor([-1.0854, -0.0905, -0.4945])
            // 
            // 
            // >>> torch.diagonal(a, 1)
            // tensor([ 1.1431,  0.0360])
            // 
            // 
            // >>> x = torch.randn(2, 5, 4, 2)
            // >>> torch.diagonal(x, offset=-1, dim1=1, dim2=2)
            // tensor([[[-1.2631,  0.3755, -1.5977, -1.8172],
            //          [-1.1065,  1.0401, -0.2235, -0.7938]],
            // 
            //         [[-1.7325, -0.3081,  0.6166,  0.2335],
            //          [ 1.0500,  0.7336, -0.3836, -1.1015]]])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a;
            var expected=
                "tensor([[-1.0854,  1.1431, -0.1752],\n" +
                "        [ 0.8536, -0.0905,  0.0360],\n" +
                "        [ 0.6927, -0.3735, -0.4945]])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diagonal(a, 0);
             expected=
                "tensor([-1.0854, -0.0905, -0.4945])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.diagonal(a, 1);
             expected=
                "tensor([ 1.1431,  0.0360])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  x = torch.randn(2, 5, 4, 2);
             given=  torch.diagonal(x, offset=-1, dim1=1, dim2=2);
             expected=
                "tensor([[[-1.2631,  0.3755, -1.5977, -1.8172],\n" +
                "         [-1.1065,  1.0401, -0.2235, -0.7938]],\n" +
                "\n" +
                "        [[-1.7325, -0.3081,  0.6166,  0.2335],\n" +
                "         [ 1.0500,  0.7336, -0.3836, -1.1015]]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void einsumTest()
        {
            // >>> x = torch.randn(5)
            // >>> y = torch.randn(4)
            // >>> torch.einsum('i,j->ij', x, y)  # outer product
            // tensor([[-0.0570, -0.0286, -0.0231,  0.0197],
            //         [ 1.2616,  0.6335,  0.5113, -0.4351],
            //         [ 1.4452,  0.7257,  0.5857, -0.4984],
            //         [-0.4647, -0.2333, -0.1883,  0.1603],
            //         [-1.1130, -0.5588, -0.4510,  0.3838]])
            // 
            // 
            // >>> A = torch.randn(3,5,4)
            // >>> l = torch.randn(2,5)
            // >>> r = torch.randn(2,4)
            // >>> torch.einsum('bn,anm,bm->ba', l, A, r) # compare torch.nn.functional.bilinear
            // tensor([[-0.3430, -5.2405,  0.4494],
            //         [ 0.3311,  5.5201, -3.0356]])
            // 
            // 
            // >>> As = torch.randn(3,2,5)
            // >>> Bs = torch.randn(3,5,4)
            // >>> torch.einsum('bij,bjk->bik', As, Bs) # batch matrix multiplication
            // tensor([[[-1.0564, -1.5904,  3.2023,  3.1271],
            //          [-1.6706, -0.8097, -0.8025, -2.1183]],
            // 
            //         [[ 4.2239,  0.3107, -0.5756, -0.2354],
            //          [-1.4558, -0.3460,  1.5087, -0.8530]],
            // 
            //         [[ 2.8153,  1.8787, -4.3839, -1.2112],
            //          [ 0.3728, -2.1131,  0.0921,  0.8305]]])
            // 
            // >>> A = torch.randn(3, 3)
            // >>> torch.einsum('ii->i', A) # diagonal
            // tensor([-0.7825,  0.8291, -0.1936])
            // 
            // >>> A = torch.randn(4, 3, 3)
            // >>> torch.einsum('...ii->...i', A) # batch diagonal
            // tensor([[-1.0864,  0.7292,  0.0569],
            //         [-0.9725, -1.0270,  0.6493],
            //         [ 0.5832, -1.1716, -1.5084],
            //         [ 0.4041, -1.1690,  0.8570]])
            // 
            // >>> A = torch.randn(2, 3, 4, 5)
            // >>> torch.einsum('...ij->...ji', A).shape # batch permute
            // torch.Size([2, 3, 5, 4])
            // 

#if TODO
            var given=  x = torch.randn(5);
             given=  y = torch.randn(4);
             given=  torch.einsum('i,j->ij', x, y)  # outer product;
            var expected=
                "tensor([[-0.0570, -0.0286, -0.0231,  0.0197],\n" +
                "        [ 1.2616,  0.6335,  0.5113, -0.4351],\n" +
                "        [ 1.4452,  0.7257,  0.5857, -0.4984],\n" +
                "        [-0.4647, -0.2333, -0.1883,  0.1603],\n" +
                "        [-1.1130, -0.5588, -0.4510,  0.3838]])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  A = torch.randn(3,5,4);
             given=  l = torch.randn(2,5);
             given=  r = torch.randn(2,4);
             given=  torch.einsum('bn,anm,bm->ba', l, A, r) # compare torch.nn.functional.bilinear;
             expected=
                "tensor([[-0.3430, -5.2405,  0.4494],\n" +
                "        [ 0.3311,  5.5201, -3.0356]])\n" +
                "\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  As = torch.randn(3,2,5);
             given=  Bs = torch.randn(3,5,4);
             given=  torch.einsum('bij,bjk->bik', As, Bs) # batch matrix multiplication;
             expected=
                "tensor([[[-1.0564, -1.5904,  3.2023,  3.1271],\n" +
                "         [-1.6706, -0.8097, -0.8025, -2.1183]],\n" +
                "\n" +
                "        [[ 4.2239,  0.3107, -0.5756, -0.2354],\n" +
                "         [-1.4558, -0.3460,  1.5087, -0.8530]],\n" +
                "\n" +
                "        [[ 2.8153,  1.8787, -4.3839, -1.2112],\n" +
                "         [ 0.3728, -2.1131,  0.0921,  0.8305]]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  A = torch.randn(3, 3);
             given=  torch.einsum('ii->i', A) # diagonal;
             expected=
                "tensor([-0.7825,  0.8291, -0.1936])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  A = torch.randn(4, 3, 3);
             given=  torch.einsum('...ii->...i', A) # batch diagonal;
             expected=
                "tensor([[-1.0864,  0.7292,  0.0569],\n" +
                "        [-0.9725, -1.0270,  0.6493],\n" +
                "        [ 0.5832, -1.1716, -1.5084],\n" +
                "        [ 0.4041, -1.1690,  0.8570]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  A = torch.randn(2, 3, 4, 5);
             given=  torch.einsum('...ij->...ji', A).shape # batch permute;
             expected=
                "torch.Size([2, 3, 5, 4])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void flattenTest()
        {
            // >>> t = torch.tensor([[[1, 2],
            //                        [3, 4]],
            //                       [[5, 6],
            //                        [7, 8]]])
            // >>> torch.flatten(t)
            // tensor([1, 2, 3, 4, 5, 6, 7, 8])
            // >>> torch.flatten(t, start_dim=1)
            // tensor([[1, 2, 3, 4],
            //         [5, 6, 7, 8]])
            // 

#if TODO
            var given=  t = torch.tensor({{{1, 2},;
            var expected=
                "                       [3, 4]],\n" +
                "                      [[5, 6],\n" +
                "                       [7, 8]]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.flatten(t);
             expected=
                "tensor([1, 2, 3, 4, 5, 6, 7, 8])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.flatten(t, start_dim=1);
             expected=
                "tensor([[1, 2, 3, 4],\n" +
                "        [5, 6, 7, 8]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void flipTest()
        {
            // >>> x = torch.arange(8).view(2, 2, 2)
            // >>> x
            // tensor([[[ 0,  1],
            //          [ 2,  3]],
            // 
            //         [[ 4,  5],
            //          [ 6,  7]]])
            // >>> torch.flip(x, [0, 1])
            // tensor([[[ 6,  7],
            //          [ 4,  5]],
            // 
            //         [[ 2,  3],
            //          [ 0,  1]]])
            // 

#if TODO
            var given=  x = torch.arange(8).view(2, 2, 2);
             given=  x;
            var expected=
                "tensor([[[ 0,  1],\n" +
                "         [ 2,  3]],\n" +
                "\n" +
                "        [[ 4,  5],\n" +
                "         [ 6,  7]]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.flip(x, {0, 1});
             expected=
                "tensor([[[ 6,  7],\n" +
                "         [ 4,  5]],\n" +
                "\n" +
                "        [[ 2,  3],\n" +
                "         [ 0,  1]]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void rot90Test()
        {
            // >>> x = torch.arange(4).view(2, 2)
            // >>> x
            // tensor([[0, 1],
            //         [2, 3]])
            // >>> torch.rot90(x, 1, [0, 1])
            // tensor([[1, 3],
            //         [0, 2]])
            // 
            // >>> x = torch.arange(8).view(2, 2, 2)
            // >>> x
            // tensor([[[0, 1],
            //          [2, 3]],
            // 
            //         [[4, 5],
            //          [6, 7]]])
            // >>> torch.rot90(x, 1, [1, 2])
            // tensor([[[1, 3],
            //          [0, 2]],
            // 
            //         [[5, 7],
            //          [4, 6]]])
            // 

#if TODO
            var given=  x = torch.arange(4).view(2, 2);
             given=  x;
            var expected=
                "tensor([[0, 1],\n" +
                "        [2, 3]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.rot90(x, 1, {0, 1});
             expected=
                "tensor([[1, 3],\n" +
                "        [0, 2]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  x = torch.arange(8).view(2, 2, 2);
             given=  x;
             expected=
                "tensor([[[0, 1],\n" +
                "         [2, 3]],\n" +
                "\n" +
                "        [[4, 5],\n" +
                "         [6, 7]]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.rot90(x, 1, {1, 2});
             expected=
                "tensor([[[1, 3],\n" +
                "         [0, 2]],\n" +
                "\n" +
                "        [[5, 7],\n" +
                "         [4, 6]]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void histcTest()
        {
            // >>> torch.histc(torch.tensor([1., 2, 1]), bins=4, min=0, max=3)
            // tensor([ 0.,  2.,  1.,  0.])
            // 

#if TODO
            var given=  torch.histc(torch.tensor({1., 2, 1}), bins=4, min=0, max=3);
            var expected=
                "tensor([ 0.,  2.,  1.,  0.])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void meshgridTest()
        {
            // >>> x = torch.tensor([1, 2, 3])
            // >>> y = torch.tensor([4, 5, 6])
            // >>> grid_x, grid_y = torch.meshgrid(x, y)
            // >>> grid_x
            // tensor([[1, 1, 1],
            //         [2, 2, 2],
            //         [3, 3, 3]])
            // >>> grid_y
            // tensor([[4, 5, 6],
            //         [4, 5, 6],
            //         [4, 5, 6]])
            // 

#if TODO
            var given=  x = torch.tensor({1, 2, 3});
             given=  y = torch.tensor({4, 5, 6});
             given=  grid_x, grid_y = torch.meshgrid(x, y);
             given=  grid_x;
            var expected=
                "tensor([[1, 1, 1],\n" +
                "        [2, 2, 2],\n" +
                "        [3, 3, 3]])";
            Assert.AreEqual(expected, given.repr);
             given=  grid_y;
             expected=
                "tensor([[4, 5, 6],\n" +
                "        [4, 5, 6],\n" +
                "        [4, 5, 6]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void renormTest()
        {
            // >>> x = torch.ones(3, 3)
            // >>> x[1].fill_(2)
            // tensor([ 2.,  2.,  2.])
            // >>> x[2].fill_(3)
            // tensor([ 3.,  3.,  3.])
            // >>> x
            // tensor([[ 1.,  1.,  1.],
            //         [ 2.,  2.,  2.],
            //         [ 3.,  3.,  3.]])
            // >>> torch.renorm(x, 1, 0, 5)
            // tensor([[ 1.0000,  1.0000,  1.0000],
            //         [ 1.6667,  1.6667,  1.6667],
            //         [ 1.6667,  1.6667,  1.6667]])
            // 

#if TODO
            var given=  x = torch.ones(3, 3);
             given=  x[1].fill_(2);
            var expected=
                "tensor([ 2.,  2.,  2.])";
            Assert.AreEqual(expected, given.repr);
             given=  x[2].fill_(3);
             expected=
                "tensor([ 3.,  3.,  3.])";
            Assert.AreEqual(expected, given.repr);
             given=  x;
             expected=
                "tensor([[ 1.,  1.,  1.],\n" +
                "        [ 2.,  2.,  2.],\n" +
                "        [ 3.,  3.,  3.]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.renorm(x, 1, 0, 5);
             expected=
                "tensor([[ 1.0000,  1.0000,  1.0000],\n" +
                "        [ 1.6667,  1.6667,  1.6667],\n" +
                "        [ 1.6667,  1.6667,  1.6667]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void repeat_interleaveTest()
        {
            // >>> x = torch.tensor([1, 2, 3])
            // >>> x.repeat_interleave(2)
            // tensor([1, 1, 2, 2, 3, 3])
            // >>> y = torch.tensor([[1, 2], [3, 4]])
            // >>> torch.repeat_interleave(y, 2)
            // tensor([1, 1, 2, 2, 3, 3, 4, 4])
            // >>> torch.repeat_interleave(y, 3, dim=1)
            // tensor([[1, 1, 1, 2, 2, 2],
            //         [3, 3, 3, 4, 4, 4]])
            // >>> torch.repeat_interleave(y, torch.tensor([1, 2]), dim=0)
            // tensor([[1, 2],
            //         [3, 4],
            //         [3, 4]])
            // 

#if TODO
            var given=  x = torch.tensor({1, 2, 3});
             given=  x.repeat_interleave(2);
            var expected=
                "tensor([1, 1, 2, 2, 3, 3])";
            Assert.AreEqual(expected, given.repr);
             given=  y = torch.tensor({{1, 2}, {3, 4}});
             given=  torch.repeat_interleave(y, 2);
             expected=
                "tensor([1, 1, 2, 2, 3, 3, 4, 4])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.repeat_interleave(y, 3, dim=1);
             expected=
                "tensor([[1, 1, 1, 2, 2, 2],\n" +
                "        [3, 3, 3, 4, 4, 4]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.repeat_interleave(y, torch.tensor({1, 2}), dim=0);
             expected=
                "tensor([[1, 2],\n" +
                "        [3, 4],\n" +
                "        [3, 4]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void rollTest()
        {
            // >>> x = torch.tensor([1, 2, 3, 4, 5, 6, 7, 8]).view(4, 2)
            // >>> x
            // tensor([[1, 2],
            //         [3, 4],
            //         [5, 6],
            //         [7, 8]])
            // >>> torch.roll(x, 1, 0)
            // tensor([[7, 8],
            //         [1, 2],
            //         [3, 4],
            //         [5, 6]])
            // >>> torch.roll(x, -1, 0)
            // tensor([[3, 4],
            //         [5, 6],
            //         [7, 8],
            //         [1, 2]])
            // >>> torch.roll(x, shifts=(2, 1), dims=(0, 1))
            // tensor([[6, 5],
            //         [8, 7],
            //         [2, 1],
            //         [4, 3]])
            // 

#if TODO
            var given=  x = torch.tensor({1, 2, 3, 4, 5, 6, 7, 8}).view(4, 2);
             given=  x;
            var expected=
                "tensor([[1, 2],\n" +
                "        [3, 4],\n" +
                "        [5, 6],\n" +
                "        [7, 8]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.roll(x, 1, 0);
             expected=
                "tensor([[7, 8],\n" +
                "        [1, 2],\n" +
                "        [3, 4],\n" +
                "        [5, 6]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.roll(x, -1, 0);
             expected=
                "tensor([[3, 4],\n" +
                "        [5, 6],\n" +
                "        [7, 8],\n" +
                "        [1, 2]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.roll(x, shifts=(2, 1), dims=(0, 1));
             expected=
                "tensor([[6, 5],\n" +
                "        [8, 7],\n" +
                "        [2, 1],\n" +
                "        [4, 3]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void tensordotTest()
        {
            // >>> a = torch.arange(60.).reshape(3, 4, 5)
            // >>> b = torch.arange(24.).reshape(4, 3, 2)
            // >>> torch.tensordot(a, b, dims=([1, 0], [0, 1]))
            // tensor([[4400., 4730.],
            //         [4532., 4874.],
            //         [4664., 5018.],
            //         [4796., 5162.],
            //         [4928., 5306.]])
            // 
            // >>> a = torch.randn(3, 4, 5, device='cuda')
            // >>> b = torch.randn(4, 5, 6, device='cuda')
            // >>> c = torch.tensordot(a, b, dims=2).cpu()
            // tensor([[ 8.3504, -2.5436,  6.2922,  2.7556, -1.0732,  3.2741],
            //         [ 3.3161,  0.0704,  5.0187, -0.4079, -4.3126,  4.8744],
            //         [ 0.8223,  3.9445,  3.2168, -0.2400,  3.4117,  1.7780]])
            // 

#if TODO
            var given=  a = torch.arange(60.).reshape(3, 4, 5);
             given=  b = torch.arange(24.).reshape(4, 3, 2);
             given=  torch.tensordot(a, b, dims=({1, 0}, {0, 1}));
            var expected=
                "tensor([[4400., 4730.],\n" +
                "        [4532., 4874.],\n" +
                "        [4664., 5018.],\n" +
                "        [4796., 5162.],\n" +
                "        [4928., 5306.]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  a = torch.randn(3, 4, 5, device='cuda');
             given=  b = torch.randn(4, 5, 6, device='cuda');
             given=  c = torch.tensordot(a, b, dims=2).cpu();
             expected=
                "tensor([[ 8.3504, -2.5436,  6.2922,  2.7556, -1.0732,  3.2741],\n" +
                "        [ 3.3161,  0.0704,  5.0187, -0.4079, -4.3126,  4.8744],\n" +
                "        [ 0.8223,  3.9445,  3.2168, -0.2400,  3.4117,  1.7780]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void traceTest()
        {
            // >>> x = torch.arange(1., 10.).view(3, 3)
            // >>> x
            // tensor([[ 1.,  2.,  3.],
            //         [ 4.,  5.,  6.],
            //         [ 7.,  8.,  9.]])
            // >>> torch.trace(x)
            // tensor(15.)
            // 

#if TODO
            var given=  x = torch.arange(1., 10.).view(3, 3);
             given=  x;
            var expected=
                "tensor([[ 1.,  2.,  3.],\n" +
                "        [ 4.,  5.,  6.],\n" +
                "        [ 7.,  8.,  9.]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.trace(x);
             expected=
                "tensor(15.)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void trilTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a
            // tensor([[-1.0813, -0.8619,  0.7105],
            //         [ 0.0935,  0.1380,  2.2112],
            //         [-0.3409, -0.9828,  0.0289]])
            // >>> torch.tril(a)
            // tensor([[-1.0813,  0.0000,  0.0000],
            //         [ 0.0935,  0.1380,  0.0000],
            //         [-0.3409, -0.9828,  0.0289]])
            // 
            // >>> b = torch.randn(4, 6)
            // >>> b
            // tensor([[ 1.2219,  0.5653, -0.2521, -0.2345,  1.2544,  0.3461],
            //         [ 0.4785, -0.4477,  0.6049,  0.6368,  0.8775,  0.7145],
            //         [ 1.1502,  3.2716, -1.1243, -0.5413,  0.3615,  0.6864],
            //         [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0978]])
            // >>> torch.tril(b, diagonal=1)
            // tensor([[ 1.2219,  0.5653,  0.0000,  0.0000,  0.0000,  0.0000],
            //         [ 0.4785, -0.4477,  0.6049,  0.0000,  0.0000,  0.0000],
            //         [ 1.1502,  3.2716, -1.1243, -0.5413,  0.0000,  0.0000],
            //         [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0000]])
            // >>> torch.tril(b, diagonal=-1)
            // tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
            //         [ 0.4785,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
            //         [ 1.1502,  3.2716,  0.0000,  0.0000,  0.0000,  0.0000],
            //         [-0.0614, -0.7344, -1.3164,  0.0000,  0.0000,  0.0000]])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a;
            var expected=
                "tensor([[-1.0813, -0.8619,  0.7105],\n" +
                "        [ 0.0935,  0.1380,  2.2112],\n" +
                "        [-0.3409, -0.9828,  0.0289]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tril(a);
             expected=
                "tensor([[-1.0813,  0.0000,  0.0000],\n" +
                "        [ 0.0935,  0.1380,  0.0000],\n" +
                "        [-0.3409, -0.9828,  0.0289]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4, 6);
             given=  b;
             expected=
                "tensor([[ 1.2219,  0.5653, -0.2521, -0.2345,  1.2544,  0.3461],\n" +
                "        [ 0.4785, -0.4477,  0.6049,  0.6368,  0.8775,  0.7145],\n" +
                "        [ 1.1502,  3.2716, -1.1243, -0.5413,  0.3615,  0.6864],\n" +
                "        [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0978]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tril(b, diagonal=1);
             expected=
                "tensor([[ 1.2219,  0.5653,  0.0000,  0.0000,  0.0000,  0.0000],\n" +
                "        [ 0.4785, -0.4477,  0.6049,  0.0000,  0.0000,  0.0000],\n" +
                "        [ 1.1502,  3.2716, -1.1243, -0.5413,  0.0000,  0.0000],\n" +
                "        [-0.0614, -0.7344, -1.3164, -0.7648, -1.4024,  0.0000]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.tril(b, diagonal=-1);
             expected=
                "tensor([[ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\n" +
                "        [ 0.4785,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],\n" +
                "        [ 1.1502,  3.2716,  0.0000,  0.0000,  0.0000,  0.0000],\n" +
                "        [-0.0614, -0.7344, -1.3164,  0.0000,  0.0000,  0.0000]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void tril_indicesTest()
        {
            // >>> a = torch.tril_indices(3, 3)
            // >>> a
            // tensor([[0, 1, 1, 2, 2, 2],
            //         [0, 0, 1, 0, 1, 2]])
            // 

#if TODO
            var given=  a = torch.tril_indices(3, 3);
             given=  a;
            var expected=
                "tensor([[0, 1, 1, 2, 2, 2],\n" +
                "        [0, 0, 1, 0, 1, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.tril_indices(4, 3, -1)
            // >>> a
            // tensor([[1, 2, 2, 3, 3, 3],
            //         [0, 0, 1, 0, 1, 2]])
            // 

#if TODO
             given=  a = torch.tril_indices(4, 3, -1);
             given=  a;
             expected=
                "tensor([[1, 2, 2, 3, 3, 3],\n" +
                "        [0, 0, 1, 0, 1, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.tril_indices(4, 3, 1)
            // >>> a
            // tensor([[0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],
            //         [0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2]])
            // 

#if TODO
             given=  a = torch.tril_indices(4, 3, 1);
             given=  a;
             expected=
                "tensor([[0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3],\n" +
                "        [0, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void triuTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a
            // tensor([[ 0.2309,  0.5207,  2.0049],
            //         [ 0.2072, -1.0680,  0.6602],
            //         [ 0.3480, -0.5211, -0.4573]])
            // >>> torch.triu(a)
            // tensor([[ 0.2309,  0.5207,  2.0049],
            //         [ 0.0000, -1.0680,  0.6602],
            //         [ 0.0000,  0.0000, -0.4573]])
            // >>> torch.triu(a, diagonal=1)
            // tensor([[ 0.0000,  0.5207,  2.0049],
            //         [ 0.0000,  0.0000,  0.6602],
            //         [ 0.0000,  0.0000,  0.0000]])
            // >>> torch.triu(a, diagonal=-1)
            // tensor([[ 0.2309,  0.5207,  2.0049],
            //         [ 0.2072, -1.0680,  0.6602],
            //         [ 0.0000, -0.5211, -0.4573]])
            // 
            // >>> b = torch.randn(4, 6)
            // >>> b
            // tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],
            //         [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],
            //         [ 0.4333,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],
            //         [-0.9888,  1.0679, -1.3337, -1.6556,  0.4798,  0.2830]])
            // >>> torch.triu(b, diagonal=1)
            // tensor([[ 0.0000, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],
            //         [ 0.0000,  0.0000, -1.2919,  1.3378, -0.1768, -1.0857],
            //         [ 0.0000,  0.0000,  0.0000, -1.0432,  0.9348, -0.4410],
            //         [ 0.0000,  0.0000,  0.0000,  0.0000,  0.4798,  0.2830]])
            // >>> torch.triu(b, diagonal=-1)
            // tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],
            //         [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],
            //         [ 0.0000,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],
            //         [ 0.0000,  0.0000, -1.3337, -1.6556,  0.4798,  0.2830]])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a;
            var expected=
                "tensor([[ 0.2309,  0.5207,  2.0049],\n" +
                "        [ 0.2072, -1.0680,  0.6602],\n" +
                "        [ 0.3480, -0.5211, -0.4573]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.triu(a);
             expected=
                "tensor([[ 0.2309,  0.5207,  2.0049],\n" +
                "        [ 0.0000, -1.0680,  0.6602],\n" +
                "        [ 0.0000,  0.0000, -0.4573]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.triu(a, diagonal=1);
             expected=
                "tensor([[ 0.0000,  0.5207,  2.0049],\n" +
                "        [ 0.0000,  0.0000,  0.6602],\n" +
                "        [ 0.0000,  0.0000,  0.0000]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.triu(a, diagonal=-1);
             expected=
                "tensor([[ 0.2309,  0.5207,  2.0049],\n" +
                "        [ 0.2072, -1.0680,  0.6602],\n" +
                "        [ 0.0000, -0.5211, -0.4573]])\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(4, 6);
             given=  b;
             expected=
                "tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],\n" +
                "        [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],\n" +
                "        [ 0.4333,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],\n" +
                "        [-0.9888,  1.0679, -1.3337, -1.6556,  0.4798,  0.2830]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.triu(b, diagonal=1);
             expected=
                "tensor([[ 0.0000, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],\n" +
                "        [ 0.0000,  0.0000, -1.2919,  1.3378, -0.1768, -1.0857],\n" +
                "        [ 0.0000,  0.0000,  0.0000, -1.0432,  0.9348, -0.4410],\n" +
                "        [ 0.0000,  0.0000,  0.0000,  0.0000,  0.4798,  0.2830]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.triu(b, diagonal=-1);
             expected=
                "tensor([[ 0.5876, -0.0794, -1.8373,  0.6654,  0.2604,  1.5235],\n" +
                "        [-0.2447,  0.9556, -1.2919,  1.3378, -0.1768, -1.0857],\n" +
                "        [ 0.0000,  0.3146,  0.6576, -1.0432,  0.9348, -0.4410],\n" +
                "        [ 0.0000,  0.0000, -1.3337, -1.6556,  0.4798,  0.2830]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void triu_indicesTest()
        {
            // >>> a = torch.triu_indices(3, 3)
            // >>> a
            // tensor([[0, 0, 0, 1, 1, 2],
            //         [0, 1, 2, 1, 2, 2]])
            // 

#if TODO
            var given=  a = torch.triu_indices(3, 3);
             given=  a;
            var expected=
                "tensor([[0, 0, 0, 1, 1, 2],\n" +
                "        [0, 1, 2, 1, 2, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.triu_indices(4, 3, -1)
            // >>> a
            // tensor([[0, 0, 0, 1, 1, 1, 2, 2, 3],
            //         [0, 1, 2, 0, 1, 2, 1, 2, 2]])
            // 

#if TODO
             given=  a = torch.triu_indices(4, 3, -1);
             given=  a;
             expected=
                "tensor([[0, 0, 0, 1, 1, 1, 2, 2, 3],\n" +
                "        [0, 1, 2, 0, 1, 2, 1, 2, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
            // >>> a = torch.triu_indices(4, 3, 1)
            // >>> a
            // tensor([[0, 0, 1],
            //         [1, 2, 2]])
            // 

#if TODO
             given=  a = torch.triu_indices(4, 3, 1);
             given=  a;
             expected=
                "tensor([[0, 0, 1],\n" +
                "        [1, 2, 2]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addbmmTest()
        {
            // >>> M = torch.randn(3, 5)
            // >>> batch1 = torch.randn(10, 3, 4)
            // >>> batch2 = torch.randn(10, 4, 5)
            // >>> torch.addbmm(M, batch1, batch2)
            // tensor([[  6.6311,   0.0503,   6.9768, -12.0362,  -2.1653],
            //         [ -4.8185,  -1.4255,  -6.6760,   8.9453,   2.5743],
            //         [ -3.8202,   4.3691,   1.0943,  -1.1109,   5.4730]])
            // 

#if TODO
            var given=  M = torch.randn(3, 5);
             given=  batch1 = torch.randn(10, 3, 4);
             given=  batch2 = torch.randn(10, 4, 5);
             given=  torch.addbmm(M, batch1, batch2);
            var expected=
                "tensor([[  6.6311,   0.0503,   6.9768, -12.0362,  -2.1653],\n" +
                "        [ -4.8185,  -1.4255,  -6.6760,   8.9453,   2.5743],\n" +
                "        [ -3.8202,   4.3691,   1.0943,  -1.1109,   5.4730]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addmmTest()
        {
            // >>> M = torch.randn(2, 3)
            // >>> mat1 = torch.randn(2, 3)
            // >>> mat2 = torch.randn(3, 3)
            // >>> torch.addmm(M, mat1, mat2)
            // tensor([[-4.8716,  1.4671, -1.3746],
            //         [ 0.7573, -3.9555, -2.8681]])
            // 

#if TODO
            var given=  M = torch.randn(2, 3);
             given=  mat1 = torch.randn(2, 3);
             given=  mat2 = torch.randn(3, 3);
             given=  torch.addmm(M, mat1, mat2);
            var expected=
                "tensor([[-4.8716,  1.4671, -1.3746],\n" +
                "        [ 0.7573, -3.9555, -2.8681]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addmvTest()
        {
            // >>> M = torch.randn(2)
            // >>> mat = torch.randn(2, 3)
            // >>> vec = torch.randn(3)
            // >>> torch.addmv(M, mat, vec)
            // tensor([-0.3768, -5.5565])
            // 

#if TODO
            var given=  M = torch.randn(2);
             given=  mat = torch.randn(2, 3);
             given=  vec = torch.randn(3);
             given=  torch.addmv(M, mat, vec);
            var expected=
                "tensor([-0.3768, -5.5565])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void addrTest()
        {
            // >>> vec1 = torch.arange(1., 4.)
            // >>> vec2 = torch.arange(1., 3.)
            // >>> M = torch.zeros(3, 2)
            // >>> torch.addr(M, vec1, vec2)
            // tensor([[ 1.,  2.],
            //         [ 2.,  4.],
            //         [ 3.,  6.]])
            // 

#if TODO
            var given=  vec1 = torch.arange(1., 4.);
             given=  vec2 = torch.arange(1., 3.);
             given=  M = torch.zeros(3, 2);
             given=  torch.addr(M, vec1, vec2);
            var expected=
                "tensor([[ 1.,  2.],\n" +
                "        [ 2.,  4.],\n" +
                "        [ 3.,  6.]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void baddbmmTest()
        {
            // >>> M = torch.randn(10, 3, 5)
            // >>> batch1 = torch.randn(10, 3, 4)
            // >>> batch2 = torch.randn(10, 4, 5)
            // >>> torch.baddbmm(M, batch1, batch2).size()
            // torch.Size([10, 3, 5])
            // 

#if TODO
            var given=  M = torch.randn(10, 3, 5);
             given=  batch1 = torch.randn(10, 3, 4);
             given=  batch2 = torch.randn(10, 4, 5);
             given=  torch.baddbmm(M, batch1, batch2).size();
            var expected=
                "torch.Size([10, 3, 5])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void bmmTest()
        {
            // >>> batch1 = torch.randn(10, 3, 4)
            // >>> batch2 = torch.randn(10, 4, 5)
            // >>> res = torch.bmm(batch1, batch2)
            // >>> res.size()
            // torch.Size([10, 3, 5])
            // 

#if TODO
            var given=  batch1 = torch.randn(10, 3, 4);
             given=  batch2 = torch.randn(10, 4, 5);
             given=  res = torch.bmm(batch1, batch2);
             given=  res.size();
            var expected=
                "torch.Size([10, 3, 5])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void chain_matmulTest()
        {
            // >>> a = torch.randn(3, 4)
            // >>> b = torch.randn(4, 5)
            // >>> c = torch.randn(5, 6)
            // >>> d = torch.randn(6, 7)
            // >>> torch.chain_matmul(a, b, c, d)
            // tensor([[ -2.3375,  -3.9790,  -4.1119,  -6.6577,   9.5609, -11.5095,  -3.2614],
            //         [ 21.4038,   3.3378,  -8.4982,  -5.2457, -10.2561,  -2.4684,   2.7163],
            //         [ -0.9647,  -5.8917,  -2.3213,  -5.2284,  12.8615, -12.2816,  -2.5095]])
            // 

#if TODO
            var given=  a = torch.randn(3, 4);
             given=  b = torch.randn(4, 5);
             given=  c = torch.randn(5, 6);
             given=  d = torch.randn(6, 7);
             given=  torch.chain_matmul(a, b, c, d);
            var expected=
                "tensor([[ -2.3375,  -3.9790,  -4.1119,  -6.6577,   9.5609, -11.5095,  -3.2614],\n" +
                "        [ 21.4038,   3.3378,  -8.4982,  -5.2457, -10.2561,  -2.4684,   2.7163],\n" +
                "        [ -0.9647,  -5.8917,  -2.3213,  -5.2284,  12.8615, -12.2816,  -2.5095]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void choleskyTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a = torch.mm(a, a.t()) # make symmetric positive-definite
            // >>> l = torch.cholesky(a)
            // >>> a
            // tensor([[ 2.4112, -0.7486,  1.4551],
            //         [-0.7486,  1.3544,  0.1294],
            //         [ 1.4551,  0.1294,  1.6724]])
            // >>> l
            // tensor([[ 1.5528,  0.0000,  0.0000],
            //         [-0.4821,  1.0592,  0.0000],
            //         [ 0.9371,  0.5487,  0.7023]])
            // >>> torch.mm(l, l.t())
            // tensor([[ 2.4112, -0.7486,  1.4551],
            //         [-0.7486,  1.3544,  0.1294],
            //         [ 1.4551,  0.1294,  1.6724]])
            // >>> a = torch.randn(3, 2, 2)
            // >>> a = torch.matmul(a, a.transpose(-1, -2)) + 1e-03 # make symmetric positive-definite
            // >>> l = torch.cholesky(a)
            // >>> z = torch.matmul(l, l.transpose(-1, -2))
            // >>> torch.max(torch.abs(z - a)) # Max non-zero
            // tensor(2.3842e-07)
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a = torch.mm(a, a.t()) # make symmetric positive-definite;
             given=  l = torch.cholesky(a);
             given=  a;
            var expected=
                "tensor([[ 2.4112, -0.7486,  1.4551],\n" +
                "        [-0.7486,  1.3544,  0.1294],\n" +
                "        [ 1.4551,  0.1294,  1.6724]])";
            Assert.AreEqual(expected, given.repr);
             given=  l;
             expected=
                "tensor([[ 1.5528,  0.0000,  0.0000],\n" +
                "        [-0.4821,  1.0592,  0.0000],\n" +
                "        [ 0.9371,  0.5487,  0.7023]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mm(l, l.t());
             expected=
                "tensor([[ 2.4112, -0.7486,  1.4551],\n" +
                "        [-0.7486,  1.3544,  0.1294],\n" +
                "        [ 1.4551,  0.1294,  1.6724]])";
            Assert.AreEqual(expected, given.repr);
             given=  a = torch.randn(3, 2, 2);
             given=  a = torch.matmul(a, a.transpose(-1, -2)) + 1e-03 # make symmetric positive-definite;
             given=  l = torch.cholesky(a);
             given=  z = torch.matmul(l, l.transpose(-1, -2));
             given=  torch.max(torch.abs(z - a)) # Max non-zero;
             expected=
                "tensor(2.3842e-07)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void cholesky_inverseTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a = torch.mm(a, a.t()) + 1e-05 * torch.eye(3) # make symmetric positive definite
            // >>> u = torch.cholesky(a)
            // >>> a
            // tensor([[  0.9935,  -0.6353,   1.5806],
            //         [ -0.6353,   0.8769,  -1.7183],
            //         [  1.5806,  -1.7183,  10.6618]])
            // >>> torch.cholesky_inverse(u)
            // tensor([[ 1.9314,  1.2251, -0.0889],
            //         [ 1.2251,  2.4439,  0.2122],
            //         [-0.0889,  0.2122,  0.1412]])
            // >>> a.inverse()
            // tensor([[ 1.9314,  1.2251, -0.0889],
            //         [ 1.2251,  2.4439,  0.2122],
            //         [-0.0889,  0.2122,  0.1412]])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a = torch.mm(a, a.t()) + 1e-05 * torch.eye(3) # make symmetric positive definite;
             given=  u = torch.cholesky(a);
             given=  a;
            var expected=
                "tensor([[  0.9935,  -0.6353,   1.5806],\n" +
                "        [ -0.6353,   0.8769,  -1.7183],\n" +
                "        [  1.5806,  -1.7183,  10.6618]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cholesky_inverse(u);
             expected=
                "tensor([[ 1.9314,  1.2251, -0.0889],\n" +
                "        [ 1.2251,  2.4439,  0.2122],\n" +
                "        [-0.0889,  0.2122,  0.1412]])";
            Assert.AreEqual(expected, given.repr);
             given=  a.inverse();
             expected=
                "tensor([[ 1.9314,  1.2251, -0.0889],\n" +
                "        [ 1.2251,  2.4439,  0.2122],\n" +
                "        [-0.0889,  0.2122,  0.1412]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void cholesky_solveTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a = torch.mm(a, a.t()) # make symmetric positive definite
            // >>> u = torch.cholesky(a)
            // >>> a
            // tensor([[ 0.7747, -1.9549,  1.3086],
            //         [-1.9549,  6.7546, -5.4114],
            //         [ 1.3086, -5.4114,  4.8733]])
            // >>> b = torch.randn(3, 2)
            // >>> b
            // tensor([[-0.6355,  0.9891],
            //         [ 0.1974,  1.4706],
            //         [-0.4115, -0.6225]])
            // >>> torch.cholesky_solve(b, u)
            // tensor([[ -8.1625,  19.6097],
            //         [ -5.8398,  14.2387],
            //         [ -4.3771,  10.4173]])
            // >>> torch.mm(a.inverse(), b)
            // tensor([[ -8.1626,  19.6097],
            //         [ -5.8398,  14.2387],
            //         [ -4.3771,  10.4173]])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a = torch.mm(a, a.t()) # make symmetric positive definite;
             given=  u = torch.cholesky(a);
             given=  a;
            var expected=
                "tensor([[ 0.7747, -1.9549,  1.3086],\n" +
                "        [-1.9549,  6.7546, -5.4114],\n" +
                "        [ 1.3086, -5.4114,  4.8733]])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(3, 2);
             given=  b;
             expected=
                "tensor([[-0.6355,  0.9891],\n" +
                "        [ 0.1974,  1.4706],\n" +
                "        [-0.4115, -0.6225]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.cholesky_solve(b, u);
             expected=
                "tensor([[ -8.1625,  19.6097],\n" +
                "        [ -5.8398,  14.2387],\n" +
                "        [ -4.3771,  10.4173]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mm(a.inverse(), b);
             expected=
                "tensor([[ -8.1626,  19.6097],\n" +
                "        [ -5.8398,  14.2387],\n" +
                "        [ -4.3771,  10.4173]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void dotTest()
        {
            // >>> torch.dot(torch.tensor([2, 3]), torch.tensor([2, 1]))
            // tensor(7)
            // 

#if TODO
            var given=  torch.dot(torch.tensor({2, 3}), torch.tensor({2, 1}));
            var expected=
                "tensor(7)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void gelsTest()
        {
            // >>> A = torch.tensor([[1., 1, 1],
            //                       [2, 3, 4],
            //                       [3, 5, 2],
            //                       [4, 2, 5],
            //                       [5, 4, 3]])
            // >>> B = torch.tensor([[-10., -3],
            //                       [ 12, 14],
            //                       [ 14, 12],
            //                       [ 16, 16],
            //                       [ 18, 16]])
            // >>> X, _ = torch.gels(B, A)
            // >>> X
            // tensor([[  2.0000,   1.0000],
            //         [  1.0000,   1.0000],
            //         [  1.0000,   2.0000],
            //         [ 10.9635,   4.8501],
            //         [  8.9332,   5.2418]])
            // 

#if TODO
            var given=  A = torch.tensor({{1., 1, 1},;
            var expected=
                "                      [2, 3, 4],\n" +
                "                      [3, 5, 2],\n" +
                "                      [4, 2, 5],\n" +
                "                      [5, 4, 3]])";
            Assert.AreEqual(expected, given.repr);
             given=  B = torch.tensor({{-10., -3},;
             expected=
                "                      [ 12, 14],\n" +
                "                      [ 14, 12],\n" +
                "                      [ 16, 16],\n" +
                "                      [ 18, 16]])";
            Assert.AreEqual(expected, given.repr);
             given=  X, _ = torch.gels(B, A);
             given=  X;
             expected=
                "tensor([[  2.0000,   1.0000],\n" +
                "        [  1.0000,   1.0000],\n" +
                "        [  1.0000,   2.0000],\n" +
                "        [ 10.9635,   4.8501],\n" +
                "        [  8.9332,   5.2418]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void gerTest()
        {
            // >>> v1 = torch.arange(1., 5.)
            // >>> v2 = torch.arange(1., 4.)
            // >>> torch.ger(v1, v2)
            // tensor([[  1.,   2.,   3.],
            //         [  2.,   4.,   6.],
            //         [  3.,   6.,   9.],
            //         [  4.,   8.,  12.]])
            // 

#if TODO
            var given=  v1 = torch.arange(1., 5.);
             given=  v2 = torch.arange(1., 4.);
             given=  torch.ger(v1, v2);
            var expected=
                "tensor([[  1.,   2.,   3.],\n" +
                "        [  2.,   4.,   6.],\n" +
                "        [  3.,   6.,   9.],\n" +
                "        [  4.,   8.,  12.]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void inverseTest()
        {
            // >>> x = torch.rand(4, 4)
            // >>> y = torch.inverse(x)
            // >>> z = torch.mm(x, y)
            // >>> z
            // tensor([[ 1.0000, -0.0000, -0.0000,  0.0000],
            //         [ 0.0000,  1.0000,  0.0000,  0.0000],
            //         [ 0.0000,  0.0000,  1.0000,  0.0000],
            //         [ 0.0000, -0.0000, -0.0000,  1.0000]])
            // >>> torch.max(torch.abs(z - torch.eye(4))) # Max non-zero
            // tensor(1.1921e-07)
            // >>> # Batched inverse example
            // >>> x = torch.randn(2, 3, 4, 4)
            // >>> y = torch.inverse(x)
            // >>> z = torch.matmul(x, y)
            // >>> torch.max(torch.abs(z - torch.eye(4).expand_as(x))) # Max non-zero
            // tensor(1.9073e-06)
            // 

#if TODO
            var given=  x = torch.rand(4, 4);
             given=  y = torch.inverse(x);
             given=  z = torch.mm(x, y);
             given=  z;
            var expected=
                "tensor([[ 1.0000, -0.0000, -0.0000,  0.0000],\n" +
                "        [ 0.0000,  1.0000,  0.0000,  0.0000],\n" +
                "        [ 0.0000,  0.0000,  1.0000,  0.0000],\n" +
                "        [ 0.0000, -0.0000, -0.0000,  1.0000]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.max(torch.abs(z - torch.eye(4))) # Max non-zero;
             expected=
                "tensor(1.1921e-07)";
            Assert.AreEqual(expected, given.repr);
             given=  # Batched inverse example;
             given=  x = torch.randn(2, 3, 4, 4);
             given=  y = torch.inverse(x);
             given=  z = torch.matmul(x, y);
             given=  torch.max(torch.abs(z - torch.eye(4).expand_as(x))) # Max non-zero;
             expected=
                "tensor(1.9073e-06)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void detTest()
        {
            // >>> A = torch.randn(3, 3)
            // >>> torch.det(A)
            // tensor(3.7641)
            // 

#if TODO
            var given=  A = torch.randn(3, 3);
             given=  torch.det(A);
            var expected=
                "tensor(3.7641)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void logdetTest()
        {
            // >>> A = torch.randn(3, 3)
            // >>> torch.det(A)
            // tensor(0.2611)
            // >>> torch.logdet(A)
            // tensor(-1.3430)
            // 

#if TODO
            var given=  A = torch.randn(3, 3);
             given=  torch.det(A);
            var expected=
                "tensor(0.2611)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.logdet(A);
             expected=
                "tensor(-1.3430)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void slogdetTest()
        {
            // >>> A = torch.randn(3, 3)
            // >>> A
            // tensor([[ 0.0032, -0.2239, -1.1219],
            //         [-0.6690,  0.1161,  0.4053],
            //         [-1.6218, -0.9273, -0.0082]])
            // >>> torch.det(A)
            // tensor(-0.7576)
            // >>> torch.logdet(A)
            // tensor(nan)
            // >>> torch.slogdet(A)
            // torch.return_types.slogdet(sign=tensor(-1.), logabsdet=tensor(-0.2776))
            // 

#if TODO
            var given=  A = torch.randn(3, 3);
             given=  A;
            var expected=
                "tensor([[ 0.0032, -0.2239, -1.1219],\n" +
                "        [-0.6690,  0.1161,  0.4053],\n" +
                "        [-1.6218, -0.9273, -0.0082]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.det(A);
             expected=
                "tensor(-0.7576)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.logdet(A);
             expected=
                "tensor(nan)";
            Assert.AreEqual(expected, given.repr);
             given=  torch.slogdet(A);
             expected=
                "torch.return_types.slogdet(sign=tensor(-1.), logabsdet=tensor(-0.2776))";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void luTest()
        {
            // >>> A = torch.randn(2, 3, 3)
            // >>> A_LU, pivots = torch.lu(A)
            // >>> A_LU
            // tensor([[[ 1.3506,  2.5558, -0.0816],
            //          [ 0.1684,  1.1551,  0.1940],
            //          [ 0.1193,  0.6189, -0.5497]],
            // 
            //         [[ 0.4526,  1.2526, -0.3285],
            //          [-0.7988,  0.7175, -0.9701],
            //          [ 0.2634, -0.9255, -0.3459]]])
            // >>> pivots
            // tensor([[ 3,  3,  3],
            //         [ 3,  3,  3]], dtype=torch.int32)
            // >>> A_LU, pivots, info = torch.lu(A, get_infos=True)
            // >>> if info.nonzero().size(0) == 0:
            // ...   print('LU factorization succeeded for all samples!')
            // LU factorization succeeded for all samples!
            // 

#if TODO
            var given=  A = torch.randn(2, 3, 3);
             given=  A_LU, pivots = torch.lu(A);
             given=  A_LU;
            var expected=
                "tensor([[[ 1.3506,  2.5558, -0.0816],\n" +
                "         [ 0.1684,  1.1551,  0.1940],\n" +
                "         [ 0.1193,  0.6189, -0.5497]],\n" +
                "\n" +
                "        [[ 0.4526,  1.2526, -0.3285],\n" +
                "         [-0.7988,  0.7175, -0.9701],\n" +
                "         [ 0.2634, -0.9255, -0.3459]]])";
            Assert.AreEqual(expected, given.repr);
             given=  pivots;
             expected=
                "tensor([[ 3,  3,  3],\n" +
                "        [ 3,  3,  3]], dtype=torch.int32)";
            Assert.AreEqual(expected, given.repr);
             given=  A_LU, pivots, info = torch.lu(A, get_infos=True);
             given=  if info.nonzero().size(0) == 0:;
             expected=
                "...   print('LU factorization succeeded for all samples!')\n" +
                "LU factorization succeeded for all samples!";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void lu_solveTest()
        {
            // >>> A = torch.randn(2, 3, 3)
            // >>> b = torch.randn(2, 3)
            // >>> A_LU = torch.lu(A)
            // >>> x = torch.lu_solve(b, *A_LU)
            // >>> torch.norm(torch.bmm(A, x.unsqueeze(2)) - b.unsqueeze(2))
            // tensor(1.00000e-07 *
            //        2.8312)
            // 

#if TODO
            var given=  A = torch.randn(2, 3, 3);
             given=  b = torch.randn(2, 3);
             given=  A_LU = torch.lu(A);
             given=  x = torch.lu_solve(b, *A_LU);
             given=  torch.norm(torch.bmm(A, x.unsqueeze(2)) - b.unsqueeze(2));
            var expected=
                "tensor(1.00000e-07 *\n" +
                "       2.8312)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void lu_unpackTest()
        {
            // >>> A = torch.randn(2, 3, 3)
            // >>> A_LU, pivots = A.lu()
            // >>> P, A_L, A_U = torch.lu_unpack(A_LU, pivots)
            // >>>
            // >>> # can recover A from factorization
            // >>> A_ = torch.bmm(P, torch.bmm(A_L, A_U))
            // 

#if TODO
            var given=  A = torch.randn(2, 3, 3);
             given=  A_LU, pivots = A.lu();
             given=  P, A_L, A_U = torch.lu_unpack(A_LU, pivots);
             given= ;
             given=  # can recover A from factorization;
             given=  A_ = torch.bmm(P, torch.bmm(A_L, A_U));
#endif
        }


        [TestMethod]
        public void matmulTest()
        {
            // >>> # vector x vector
            // >>> tensor1 = torch.randn(3)
            // >>> tensor2 = torch.randn(3)
            // >>> torch.matmul(tensor1, tensor2).size()
            // torch.Size([])
            // >>> # matrix x vector
            // >>> tensor1 = torch.randn(3, 4)
            // >>> tensor2 = torch.randn(4)
            // >>> torch.matmul(tensor1, tensor2).size()
            // torch.Size([3])
            // >>> # batched matrix x broadcasted vector
            // >>> tensor1 = torch.randn(10, 3, 4)
            // >>> tensor2 = torch.randn(4)
            // >>> torch.matmul(tensor1, tensor2).size()
            // torch.Size([10, 3])
            // >>> # batched matrix x batched matrix
            // >>> tensor1 = torch.randn(10, 3, 4)
            // >>> tensor2 = torch.randn(10, 4, 5)
            // >>> torch.matmul(tensor1, tensor2).size()
            // torch.Size([10, 3, 5])
            // >>> # batched matrix x broadcasted matrix
            // >>> tensor1 = torch.randn(10, 3, 4)
            // >>> tensor2 = torch.randn(4, 5)
            // >>> torch.matmul(tensor1, tensor2).size()
            // torch.Size([10, 3, 5])
            // 
#if TODO
            
            // vector x vector;
            var  tensor1 = torch.randn(3);
             var  tensor2 = torch.randn(3);
             var given=  torch.matmul(tensor1, tensor2).size();
            var expected=
                "torch.Size([])";
            Assert.AreEqual(expected, given.repr);
             given=  # matrix x vector;
             given=  tensor1 = torch.randn(3, 4);
             given=  tensor2 = torch.randn(4);
             given=  torch.matmul(tensor1, tensor2).size();
             expected=
                "torch.Size([3])";
            Assert.AreEqual(expected, given.repr);
             given=  # batched matrix x broadcasted vector;
             given=  tensor1 = torch.randn(10, 3, 4);
             given=  tensor2 = torch.randn(4);
             given=  torch.matmul(tensor1, tensor2).size();
             expected=
                "torch.Size([10, 3])";
            Assert.AreEqual(expected, given.repr);
             given=  # batched matrix x batched matrix;
             given=  tensor1 = torch.randn(10, 3, 4);
             given=  tensor2 = torch.randn(10, 4, 5);
             given=  torch.matmul(tensor1, tensor2).size();
             expected=
                "torch.Size([10, 3, 5])";
            Assert.AreEqual(expected, given.repr);
             given=  # batched matrix x broadcasted matrix;
             given=  tensor1 = torch.randn(10, 3, 4);
             given=  tensor2 = torch.randn(4, 5);
             given=  torch.matmul(tensor1, tensor2).size();
             expected=
                "torch.Size([10, 3, 5])";
            Assert.AreEqual(expected, given.repr);
#endif

        }


        [TestMethod]
        public void matrix_powerTest()
        {
            // >>> a = torch.randn(2, 2, 2)
            // >>> a
            // tensor([[[-1.9975, -1.9610],
            //          [ 0.9592, -2.3364]],
            // 
            //         [[-1.2534, -1.3429],
            //          [ 0.4153, -1.4664]]])
            // >>> torch.matrix_power(a, 3)
            // tensor([[[  3.9392, -23.9916],
            //          [ 11.7357,  -0.2070]],
            // 
            //         [[  0.2468,  -6.7168],
            //          [  2.0774,  -0.8187]]])
            // 

#if TODO
            var given=  a = torch.randn(2, 2, 2);
             given=  a;
            var expected=
                "tensor([[[-1.9975, -1.9610],\n" +
                "         [ 0.9592, -2.3364]],\n" +
                "\n" +
                "        [[-1.2534, -1.3429],\n" +
                "         [ 0.4153, -1.4664]]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.matrix_power(a, 3);
             expected=
                "tensor([[[  3.9392, -23.9916],\n" +
                "         [ 11.7357,  -0.2070]],\n" +
                "\n" +
                "        [[  0.2468,  -6.7168],\n" +
                "         [  2.0774,  -0.8187]]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void matrix_rankTest()
        {
            // >>> a = torch.eye(10)
            // >>> torch.matrix_rank(a)
            // tensor(10)
            // >>> b = torch.eye(10)
            // >>> b[0, 0] = 0
            // >>> torch.matrix_rank(b)
            // tensor(9)
            // 

#if TODO
            var given=  a = torch.eye(10);
             given=  torch.matrix_rank(a);
            var expected=
                "tensor(10)";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.eye(10);
             given=  b[0, 0] = 0;
             given=  torch.matrix_rank(b);
             expected=
                "tensor(9)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void mmTest()
        {
            // >>> mat1 = torch.randn(2, 3)
            // >>> mat2 = torch.randn(3, 3)
            // >>> torch.mm(mat1, mat2)
            // tensor([[ 0.4851,  0.5037, -0.3633],
            //         [-0.0760, -3.6705,  2.4784]])
            // 

#if TODO
            var given=  mat1 = torch.randn(2, 3);
             given=  mat2 = torch.randn(3, 3);
             given=  torch.mm(mat1, mat2);
            var expected=
                "tensor([[ 0.4851,  0.5037, -0.3633],\n" +
                "        [-0.0760, -3.6705,  2.4784]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void mvTest()
        {
            // >>> mat = torch.randn(2, 3)
            // >>> vec = torch.randn(3)
            // >>> torch.mv(mat, vec)
            // tensor([ 1.0404, -0.6361])
            // 

#if TODO
            var given=  mat = torch.randn(2, 3);
             given=  vec = torch.randn(3);
             given=  torch.mv(mat, vec);
            var expected=
                "tensor([ 1.0404, -0.6361])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void pinverseTest()
        {
            // >>> input = torch.randn(3, 5)
            // >>> input
            // tensor([[ 0.5495,  0.0979, -1.4092, -0.1128,  0.4132],
            //         [-1.1143, -0.3662,  0.3042,  1.6374, -0.9294],
            //         [-0.3269, -0.5745, -0.0382, -0.5922, -0.6759]])
            // >>> torch.pinverse(input)
            // tensor([[ 0.0600, -0.1933, -0.2090],
            //         [-0.0903, -0.0817, -0.4752],
            //         [-0.7124, -0.1631, -0.2272],
            //         [ 0.1356,  0.3933, -0.5023],
            //         [-0.0308, -0.1725, -0.5216]])
            // 

#if TODO
            var given=  input = torch.randn(3, 5);
             given=  input;
            var expected=
                "tensor([[ 0.5495,  0.0979, -1.4092, -0.1128,  0.4132],\n" +
                "        [-1.1143, -0.3662,  0.3042,  1.6374, -0.9294],\n" +
                "        [-0.3269, -0.5745, -0.0382, -0.5922, -0.6759]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.pinverse(input);
             expected=
                "tensor([[ 0.0600, -0.1933, -0.2090],\n" +
                "        [-0.0903, -0.0817, -0.4752],\n" +
                "        [-0.7124, -0.1631, -0.2272],\n" +
                "        [ 0.1356,  0.3933, -0.5023],\n" +
                "        [-0.0308, -0.1725, -0.5216]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void pstrfTest()
        {
            // >>> a = torch.randn(3, 3)
            // >>> a = torch.mm(a, a.t()) # make symmetric positive definite
            // >>> a
            // tensor([[ 3.5405, -0.4577,  0.8342],
            //         [-0.4577,  1.8244, -0.1996],
            //         [ 0.8342, -0.1996,  3.7493]])
            // >>> u,piv = torch.pstrf(a)
            // >>> u
            // tensor([[ 1.9363,  0.4308, -0.1031],
            //         [ 0.0000,  1.8316, -0.2256],
            //         [ 0.0000,  0.0000,  1.3277]])
            // >>> piv
            // tensor([ 2,  0,  1], dtype=torch.int32)
            // >>> p = torch.eye(3).index_select(0,piv.long()).index_select(0,piv.long()).t() # make pivot permutation
            // >>> torch.mm(torch.mm(p.t(),torch.mm(u.t(),u)),p) # reconstruct
            // tensor([[ 3.5405, -0.4577,  0.8342],
            //         [-0.4577,  1.8244, -0.1996],
            //         [ 0.8342, -0.1996,  3.7493]])
            // 

#if TODO
            var given=  a = torch.randn(3, 3);
             given=  a = torch.mm(a, a.t()) # make symmetric positive definite;
             given=  a;
            var expected=
                "tensor([[ 3.5405, -0.4577,  0.8342],\n" +
                "        [-0.4577,  1.8244, -0.1996],\n" +
                "        [ 0.8342, -0.1996,  3.7493]])";
            Assert.AreEqual(expected, given.repr);
             given=  u,piv = torch.pstrf(a);
             given=  u;
             expected=
                "tensor([[ 1.9363,  0.4308, -0.1031],\n" +
                "        [ 0.0000,  1.8316, -0.2256],\n" +
                "        [ 0.0000,  0.0000,  1.3277]])";
            Assert.AreEqual(expected, given.repr);
             given=  piv;
             expected=
                "tensor([ 2,  0,  1], dtype=torch.int32)";
            Assert.AreEqual(expected, given.repr);
             given=  p = torch.eye(3).index_select(0,piv.long()).index_select(0,piv.long()).t() # make pivot permutation;
             given=  torch.mm(torch.mm(p.t(),torch.mm(u.t(),u)),p) # reconstruct;
             expected=
                "tensor([[ 3.5405, -0.4577,  0.8342],\n" +
                "        [-0.4577,  1.8244, -0.1996],\n" +
                "        [ 0.8342, -0.1996,  3.7493]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void qrTest()
        {
            // >>> a = torch.tensor([[12., -51, 4], [6, 167, -68], [-4, 24, -41]])
            // >>> q, r = torch.qr(a)
            // >>> q
            // tensor([[-0.8571,  0.3943,  0.3314],
            //         [-0.4286, -0.9029, -0.0343],
            //         [ 0.2857, -0.1714,  0.9429]])
            // >>> r
            // tensor([[ -14.0000,  -21.0000,   14.0000],
            //         [   0.0000, -175.0000,   70.0000],
            //         [   0.0000,    0.0000,  -35.0000]])
            // >>> torch.mm(q, r).round()
            // tensor([[  12.,  -51.,    4.],
            //         [   6.,  167.,  -68.],
            //         [  -4.,   24.,  -41.]])
            // >>> torch.mm(q.t(), q).round()
            // tensor([[ 1.,  0.,  0.],
            //         [ 0.,  1., -0.],
            //         [ 0., -0.,  1.]])
            // 

#if TODO
            var given=  a = torch.tensor({{12., -51, 4}, {6, 167, -68}, {-4, 24, -41}});
             given=  q, r = torch.qr(a);
             given=  q;
            var expected=
                "tensor([[-0.8571,  0.3943,  0.3314],\n" +
                "        [-0.4286, -0.9029, -0.0343],\n" +
                "        [ 0.2857, -0.1714,  0.9429]])";
            Assert.AreEqual(expected, given.repr);
             given=  r;
             expected=
                "tensor([[ -14.0000,  -21.0000,   14.0000],\n" +
                "        [   0.0000, -175.0000,   70.0000],\n" +
                "        [   0.0000,    0.0000,  -35.0000]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mm(q, r).round();
             expected=
                "tensor([[  12.,  -51.,    4.],\n" +
                "        [   6.,  167.,  -68.],\n" +
                "        [  -4.,   24.,  -41.]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.mm(q.t(), q).round();
             expected=
                "tensor([[ 1.,  0.,  0.],\n" +
                "        [ 0.,  1., -0.],\n" +
                "        [ 0., -0.,  1.]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void solveTest()
        {
            // >>> A = torch.tensor([[6.80, -2.11,  5.66,  5.97,  8.23],
            //                       [-6.05, -3.30,  5.36, -4.44,  1.08],
            //                       [-0.45,  2.58, -2.70,  0.27,  9.04],
            //                       [8.32,  2.71,  4.35,  -7.17,  2.14],
            //                       [-9.67, -5.14, -7.26,  6.08, -6.87]]).t()
            // >>> B = torch.tensor([[4.02,  6.19, -8.22, -7.57, -3.03],
            //                       [-1.56,  4.00, -8.67,  1.75,  2.86],
            //                       [9.81, -4.09, -4.57, -8.61,  8.99]]).t()
            // >>> X, LU = torch.solve(B, A)
            // >>> torch.dist(B, torch.mm(A, X))
            // tensor(1.00000e-06 *
            //        7.0977)
            // 
            // >>> # Batched solver example
            // >>> A = torch.randn(2, 3, 1, 4, 4)
            // >>> B = torch.randn(2, 3, 1, 4, 6)
            // >>> X, LU = torch.solve(B, A)
            // >>> torch.dist(B, A.matmul(X))
            // tensor(1.00000e-06 *
            //    3.6386)
            // 

#if TODO
            var given=  A = torch.tensor({{6.80, -2.11,  5.66,  5.97,  8.23},;
            var expected=
                "                      [-6.05, -3.30,  5.36, -4.44,  1.08],\n" +
                "                      [-0.45,  2.58, -2.70,  0.27,  9.04],\n" +
                "                      [8.32,  2.71,  4.35,  -7.17,  2.14],\n" +
                "                      [-9.67, -5.14, -7.26,  6.08, -6.87]]).t()";
            Assert.AreEqual(expected, given.repr);
             given=  B = torch.tensor({{4.02,  6.19, -8.22, -7.57, -3.03},;
             expected=
                "                      [-1.56,  4.00, -8.67,  1.75,  2.86],\n" +
                "                      [9.81, -4.09, -4.57, -8.61,  8.99]]).t()";
            Assert.AreEqual(expected, given.repr);
             given=  X, LU = torch.solve(B, A);
             given=  torch.dist(B, torch.mm(A, X));
             expected=
                "tensor(1.00000e-06 *\n" +
                "       7.0977)\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  # Batched solver example;
             given=  A = torch.randn(2, 3, 1, 4, 4);
             given=  B = torch.randn(2, 3, 1, 4, 6);
             given=  X, LU = torch.solve(B, A);
             given=  torch.dist(B, A.matmul(X));
             expected=
                "tensor(1.00000e-06 *\n" +
                "   3.6386)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void svdTest()
        {
            // >>> a = torch.tensor([[8.79,  6.11, -9.15,  9.57, -3.49,  9.84],
            //                       [9.93,  6.91, -7.93,  1.64,  4.02,  0.15],
            //                       [9.83,  5.04,  4.86,  8.83,  9.80, -8.99],
            //                       [5.45, -0.27,  4.85,  0.74, 10.00, -6.02],
            //                       [3.16,  7.98,  3.01,  5.80,  4.27, -5.31]]).t()
            // 
            // >>> torch.svd(a).__class__
            // <class 'torch.return_types.svd'>
            // >>> u, s, v = torch.svd(a)
            // >>> u
            // tensor([[-0.5911,  0.2632,  0.3554,  0.3143,  0.2299],
            //         [-0.3976,  0.2438, -0.2224, -0.7535, -0.3636],
            //         [-0.0335, -0.6003, -0.4508,  0.2334, -0.3055],
            //         [-0.4297,  0.2362, -0.6859,  0.3319,  0.1649],
            //         [-0.4697, -0.3509,  0.3874,  0.1587, -0.5183],
            //         [ 0.2934,  0.5763, -0.0209,  0.3791, -0.6526]])
            // >>> s
            // tensor([ 27.4687,  22.6432,   8.5584,   5.9857,   2.0149])
            // >>> v
            // tensor([[-0.2514,  0.8148, -0.2606,  0.3967, -0.2180],
            //         [-0.3968,  0.3587,  0.7008, -0.4507,  0.1402],
            //         [-0.6922, -0.2489, -0.2208,  0.2513,  0.5891],
            //         [-0.3662, -0.3686,  0.3859,  0.4342, -0.6265],
            //         [-0.4076, -0.0980, -0.4933, -0.6227, -0.4396]])
            // >>> torch.dist(a, torch.mm(torch.mm(u, torch.diag(s)), v.t()))
            // tensor(1.00000e-06 *
            //        9.3738)
            // 

#if TODO
            var given=  a = torch.tensor({{8.79,  6.11, -9.15,  9.57, -3.49,  9.84},;
            var expected=
                "                      [9.93,  6.91, -7.93,  1.64,  4.02,  0.15],\n" +
                "                      [9.83,  5.04,  4.86,  8.83,  9.80, -8.99],\n" +
                "                      [5.45, -0.27,  4.85,  0.74, 10.00, -6.02],\n" +
                "                      [3.16,  7.98,  3.01,  5.80,  4.27, -5.31]]).t()\n" +
                "";
            Assert.AreEqual(expected, given.repr);
             given=  torch.svd(a).__class__;
             expected=
                "<class 'torch.return_types.svd'>";
            Assert.AreEqual(expected, given.repr);
             given=  u, s, v = torch.svd(a);
             given=  u;
             expected=
                "tensor([[-0.5911,  0.2632,  0.3554,  0.3143,  0.2299],\n" +
                "        [-0.3976,  0.2438, -0.2224, -0.7535, -0.3636],\n" +
                "        [-0.0335, -0.6003, -0.4508,  0.2334, -0.3055],\n" +
                "        [-0.4297,  0.2362, -0.6859,  0.3319,  0.1649],\n" +
                "        [-0.4697, -0.3509,  0.3874,  0.1587, -0.5183],\n" +
                "        [ 0.2934,  0.5763, -0.0209,  0.3791, -0.6526]])";
            Assert.AreEqual(expected, given.repr);
             given=  s;
             expected=
                "tensor([ 27.4687,  22.6432,   8.5584,   5.9857,   2.0149])";
            Assert.AreEqual(expected, given.repr);
             given=  v;
             expected=
                "tensor([[-0.2514,  0.8148, -0.2606,  0.3967, -0.2180],\n" +
                "        [-0.3968,  0.3587,  0.7008, -0.4507,  0.1402],\n" +
                "        [-0.6922, -0.2489, -0.2208,  0.2513,  0.5891],\n" +
                "        [-0.3662, -0.3686,  0.3859,  0.4342, -0.6265],\n" +
                "        [-0.4076, -0.0980, -0.4933, -0.6227, -0.4396]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.dist(a, torch.mm(torch.mm(u, torch.diag(s)), v.t()));
             expected=
                "tensor(1.00000e-06 *\n" +
                "       9.3738)";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void symeigTest()
        {
            // >>> a = torch.tensor([[ 1.96,  0.00,  0.00,  0.00,  0.00],
            //                       [-6.49,  3.80,  0.00,  0.00,  0.00],
            //                       [-0.47, -6.39,  4.17,  0.00,  0.00],
            //                       [-7.20,  1.50, -1.51,  5.70,  0.00],
            //                       [-0.65, -6.34,  2.67,  1.80, -7.10]]).t()
            // >>> e, v = torch.symeig(a, eigenvectors=True)
            // >>> e
            // tensor([-11.0656,  -6.2287,   0.8640,   8.8655,  16.0948])
            // >>> v
            // tensor([[-0.2981, -0.6075,  0.4026, -0.3745,  0.4896],
            //         [-0.5078, -0.2880, -0.4066, -0.3572, -0.6053],
            //         [-0.0816, -0.3843, -0.6600,  0.5008,  0.3991],
            //         [-0.0036, -0.4467,  0.4553,  0.6204, -0.4564],
            //         [-0.8041,  0.4480,  0.1725,  0.3108,  0.1622]])
            // 

#if TODO
            var given=  a = torch.tensor({{ 1.96,  0.00,  0.00,  0.00,  0.00},;
            var expected=
                "                      [-6.49,  3.80,  0.00,  0.00,  0.00],\n" +
                "                      [-0.47, -6.39,  4.17,  0.00,  0.00],\n" +
                "                      [-7.20,  1.50, -1.51,  5.70,  0.00],\n" +
                "                      [-0.65, -6.34,  2.67,  1.80, -7.10]]).t()";
            Assert.AreEqual(expected, given.repr);
             given=  e, v = torch.symeig(a, eigenvectors=True);
             given=  e;
             expected=
                "tensor([-11.0656,  -6.2287,   0.8640,   8.8655,  16.0948])";
            Assert.AreEqual(expected, given.repr);
             given=  v;
             expected=
                "tensor([[-0.2981, -0.6075,  0.4026, -0.3745,  0.4896],\n" +
                "        [-0.5078, -0.2880, -0.4066, -0.3572, -0.6053],\n" +
                "        [-0.0816, -0.3843, -0.6600,  0.5008,  0.3991],\n" +
                "        [-0.0036, -0.4467,  0.4553,  0.6204, -0.4564],\n" +
                "        [-0.8041,  0.4480,  0.1725,  0.3108,  0.1622]])";
            Assert.AreEqual(expected, given.repr);
#endif
        }


        [TestMethod]
        public void triangular_solveTest()
        {
            // >>> A = torch.randn(2, 2).triu()
            // >>> A
            // tensor([[ 1.1527, -1.0753],
            //         [ 0.0000,  0.7986]])
            // >>> b = torch.randn(2, 3)
            // >>> b
            // tensor([[-0.0210,  2.3513, -1.5492],
            //         [ 1.5429,  0.7403, -1.0243]])
            // >>> torch.triangular_solve(b, A)
            // torch.return_types.triangular_solve(
            // solution=tensor([[ 1.7841,  2.9046, -2.5405],
            //         [ 1.9320,  0.9270, -1.2826]]),
            // cloned_coefficient=tensor([[ 1.1527, -1.0753],
            //         [ 0.0000,  0.7986]]))
            // 

#if TODO
            var given=  A = torch.randn(2, 2).triu();
             given=  A;
            var expected=
                "tensor([[ 1.1527, -1.0753],\n" +
                "        [ 0.0000,  0.7986]])";
            Assert.AreEqual(expected, given.repr);
             given=  b = torch.randn(2, 3);
             given=  b;
             expected=
                "tensor([[-0.0210,  2.3513, -1.5492],\n" +
                "        [ 1.5429,  0.7403, -1.0243]])";
            Assert.AreEqual(expected, given.repr);
             given=  torch.triangular_solve(b, A);
             expected=
                "torch.return_types.triangular_solve(\n" +
                "solution=tensor([[ 1.7841,  2.9046, -2.5405],\n" +
                "        [ 1.9320,  0.9270, -1.2826]]),\n" +
                "cloned_coefficient=tensor([[ 1.1527, -1.0753],\n" +
                "        [ 0.0000,  0.7986]]))";
            Assert.AreEqual(expected, given.repr);
#endif
        }

    }
}
