// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Assert = NUnit.Framework.Assert;

namespace Torch.UnitTest
{
    [TestClass]
    public class PyTorch_nn_initTest : BaseTestCase
    {
        
        [TestMethod]
        public void calculate_gainTest()
        {
            // >>> gain = nn.init.calculate_gain('leaky_relu')
            // 
            
            #if TODO
            var given=  gain = nn.init.calculate_gain('leaky_relu');
            #endif
        }
        
        
        [TestMethod]
        public void uniform_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.uniform_(w)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.uniform_(w);
            #endif
        }
        
        
        [TestMethod]
        public void normal_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.normal_(w)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.normal_(w);
            #endif
        }
        
        
        [TestMethod]
        public void constant_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.constant_(w, 0.3)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.constant_(w, 0.3);
            #endif
        }
        
        
        [TestMethod]
        public void eye_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.eye_(w)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.eye_(w);
            #endif
        }
        
        
        [TestMethod]
        public void dirac_Test()
        {
            // >>> w = torch.empty(3, 16, 5, 5)
            // >>> nn.init.dirac_(w)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 16, 5, 5);
             given=  nn.init.dirac_(w);
            #endif
        }
        
        
        [TestMethod]
        public void xavier_uniform_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.xavier_uniform_(w, gain=nn.init.calculate_gain('relu'))
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.xavier_uniform_(w, gain=nn.init.calculate_gain('relu'));
            #endif
        }
        
        
        [TestMethod]
        public void xavier_normal_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.xavier_normal_(w)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.xavier_normal_(w);
            #endif
        }
        
        
        [TestMethod]
        public void kaiming_uniform_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.kaiming_uniform_(w, mode='fan_in', nonlinearity='relu')
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.kaiming_uniform_(w, mode='fan_in', nonlinearity='relu');
            #endif
        }
        
        
        [TestMethod]
        public void kaiming_normal_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.kaiming_normal_(w, mode='fan_out', nonlinearity='relu')
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.kaiming_normal_(w, mode='fan_out', nonlinearity='relu');
            #endif
        }
        
        
        [TestMethod]
        public void orthogonal_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.orthogonal_(w)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.orthogonal_(w);
            #endif
        }
        
        
        [TestMethod]
        public void sparse_Test()
        {
            // >>> w = torch.empty(3, 5)
            // >>> nn.init.sparse_(w, sparsity=0.1)
            // 
            
            #if TODO
            var given=  w = torch.empty(3, 5);
             given=  nn.init.sparse_(w, sparsity=0.1);
            #endif
        }
        
    }
}
