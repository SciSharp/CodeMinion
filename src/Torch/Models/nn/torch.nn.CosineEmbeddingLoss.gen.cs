// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Creates a criterion that measures the loss given input tensors
            ///	\(x_1\), \(x_2\) and a Tensor label \(y\) with values 1 or -1.
            ///	This is used for measuring whether two inputs are similar or dissimilar,
            ///	using the cosine distance, and is typically used for learning nonlinear
            ///	embeddings or semi-supervised learning.<br></br>
            ///	
            ///	The loss function for each sample is:
            ///	
            ///	\[\text{loss}(x, y) =
            ///	\begin{cases}
            ///	1 - \cos(x_1, x_2), & \text{if } y = 1 \\
            ///	\max(0, \cos(x_1, x_2) - \text{margin}), & \text{if } y = -1
            ///	\end{cases}
            ///	
            ///	\]
            /// </summary>
            public partial class CosineEmbeddingLoss : Module
            {
                // auto-generated class
                
                public CosineEmbeddingLoss(PyObject pyobj) : base(pyobj) { }
                
                public CosineEmbeddingLoss(Module other) : base(other.PyObject as PyObject) { }
                
                public CosineEmbeddingLoss(float? margin = 0.0f, bool? size_average = null, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (margin!=0.0f) kwargs["margin"]=ToPython(margin);
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("CosineEmbeddingLoss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
