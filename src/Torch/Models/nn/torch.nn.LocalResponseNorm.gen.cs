// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Applies local response normalization over an input signal composed
            ///	of several input planes, where channels occupy the second dimension.<br></br>
            ///	
            ///	Applies normalization across channels.<br></br>
            ///	
            ///	\[b_{c} = a_{c}\left(k + \frac{\alpha}{n}
            ///	\sum_{c'=\max(0, c-n/2)}^{\min(N-1,c+n/2)}a_{c'}^2\right)^{-\beta}
            ///	
            ///	\]
            /// </summary>
            public partial class LocalResponseNorm : Module
            {
                // auto-generated class
                
                public LocalResponseNorm(PyObject pyobj) : base(pyobj) { }
                
                public LocalResponseNorm(Module other) : base(other.PyObject as PyObject) { }
                
                public LocalResponseNorm(int size, double alpha = 0.0001, double beta = 0.75, double k = 1.0)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                        size,
                    });
                    var kwargs=new PyDict();
                    if (alpha!=0.0001) kwargs["alpha"]=ToPython(alpha);
                    if (beta!=0.75) kwargs["beta"]=ToPython(beta);
                    if (k!=1.0) kwargs["k"]=ToPython(k);
                    dynamic py = __self__.InvokeMethod("LocalResponseNorm", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
