// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	A long short-term memory (LSTM) cell.<br></br>
            ///	
            ///	\[\begin{array}{ll}
            ///	i = \sigma(W_{ii} x + b_{ii} + W_{hi} h + b_{hi}) \\
            ///	f = \sigma(W_{if} x + b_{if} + W_{hf} h + b_{hf}) \\
            ///	g = \tanh(W_{ig} x + b_{ig} + W_{hg} h + b_{hg}) \\
            ///	o = \sigma(W_{io} x + b_{io} + W_{ho} h + b_{ho}) \\
            ///	c' = f * c + i * g \\
            ///	h' = o * \tanh(c') \\
            ///	\end{array}\]
            ///	
            ///	where \(\sigma\) is the sigmoid function, and \(*\) is the Hadamard product.
            /// </summary>
            public partial class LSTMCell : Module
            {
                // auto-generated class
                
                public LSTMCell(PyObject pyobj) : base(pyobj) { }
                
                public LSTMCell(Module other) : base(other.PyObject as PyObject) { }
                
                public LSTMCell(int input_size, int hidden_size, bool bias = true)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                        input_size,
                        hidden_size,
                    });
                    var kwargs=new PyDict();
                    if (bias!=true) kwargs["bias"]=ToPython(bias);
                    dynamic py = __self__.InvokeMethod("LSTMCell", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
