// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Creates a criterion that optimizes a multi-label one-versus-all
            ///	loss based on max-entropy, between input \(x\) and target \(y\) of size
            ///	\((N, C)\).<br></br>
            ///	
            ///	For each sample in the minibatch:
            ///	
            ///	\[loss(x, y) = - \frac{1}{C} * \sum_i y[i] * \log((1 + \exp(-x[i]))^{-1})
            ///	                 + (1-y[i]) * \log\left(\frac{\exp(-x[i])}{(1 + \exp(-x[i]))}\right)
            ///	
            ///	\]
            ///	
            ///	where \(i \in \left\{0, \; \cdots , \; \text{x.nElement}() - 1\right\}\),
            ///	\(y[i] \in \left\{0, \; 1\right\}\).
            /// </summary>
            public partial class MultiLabelSoftMarginLoss : Module
            {
                // auto-generated class
                
                public MultiLabelSoftMarginLoss(PyObject pyobj) : base(pyobj) { }
                
                public MultiLabelSoftMarginLoss(Module other) : base(other.PyObject as PyObject) { }
                
                public MultiLabelSoftMarginLoss(Tensor weight = null, bool? size_average = null, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (weight!=null) kwargs["weight"]=ToPython(weight);
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("MultiLabelSoftMarginLoss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
