// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Applies a multi-layer Elman RNN with \(tanh\) or \(ReLU\) non-linearity to an
            ///	input sequence.<br></br>
            ///	
            ///	For each element in the input sequence, each layer computes the following
            ///	function:
            ///	
            ///	\[h_t = \text{tanh}(W_{ih} x_t + b_{ih} + W_{hh} h_{(t-1)} + b_{hh})
            ///	
            ///	\]
            ///	
            ///	where \(h_t\) is the hidden state at time t, \(x_t\) is
            ///	the input at time t, and \(h_{(t-1)}\) is the hidden state of the
            ///	previous layer at time t-1 or the initial hidden state at time 0.<br></br>
            ///	
            ///	If nonlinearity is 'relu', then ReLU is used instead of tanh.
            /// </summary>
            public partial class RNN : Module
            {
                // auto-generated class
                
                public RNN(PyObject pyobj) : base(pyobj) { }
                
                public RNN(Module other) : base(other.PyObject as PyObject) { }
                
                public RNN(int input_size, int hidden_size, int num_layers = 1, string nonlinearity = "tanh", bool bias = true, bool batch_first = false, int dropout = 0, bool bidirectional = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                        input_size,
                        hidden_size,
                    });
                    var kwargs=new PyDict();
                    if (num_layers!=1) kwargs["num_layers"]=ToPython(num_layers);
                    if (nonlinearity!="tanh") kwargs["nonlinearity"]=ToPython(nonlinearity);
                    if (bias!=true) kwargs["bias"]=ToPython(bias);
                    if (batch_first!=false) kwargs["batch_first"]=ToPython(batch_first);
                    if (dropout!=0) kwargs["dropout"]=ToPython(dropout);
                    if (bidirectional!=false) kwargs["bidirectional"]=ToPython(bidirectional);
                    dynamic py = __self__.InvokeMethod("RNN", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
