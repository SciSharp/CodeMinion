// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Randomly zero out entire channels (a channel is a 3D feature map,
            ///	e.g., the \(j\)-th channel of the \(i\)-th sample in the
            ///	batched input is a 3D tensor \(\text{input}[i, j]\)).<br></br>
            ///	
            ///	Each channel will be zeroed out independently on every forward call with
            ///	probability p using samples from a Bernoulli distribution.<br></br>
            ///	
            ///	Usually the input comes from nn.Conv3d modules.<br></br>
            ///	
            ///	As described in the paper
            ///	Efficient Object Localization Using Convolutional Networks ,
            ///	if adjacent pixels within feature maps are strongly correlated
            ///	(as is normally the case in early convolution layers) then i.i.d.<br></br>
            ///	 dropout
            ///	will not regularize the activations and will otherwise just result
            ///	in an effective learning rate decrease.<br></br>
            ///	
            ///	In this case, nn.Dropout3d() will help promote independence between
            ///	feature maps and should be used instead.
            /// </summary>
            public partial class Dropout3d : Module
            {
                // auto-generated class
                
                public Dropout3d(PyObject pyobj) : base(pyobj) { }
                
                public Dropout3d(Module other) : base(other.PyObject as PyObject) { }
                
                public Dropout3d(double? p = 0.5, bool? inplace = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (p!=0.5) kwargs["p"]=ToPython(p);
                    if (inplace!=false) kwargs["inplace"]=ToPython(inplace);
                    dynamic py = __self__.InvokeMethod("Dropout3d", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
