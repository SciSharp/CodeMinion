// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            /// Holds parameters in a list.
            /// 
            /// ParameterList can be indexed like a regular Python
            /// list, but parameters it contains are properly registered, and will be
            /// visible by all Module methods.
            /// </summary>
            public class ParameterList : Module, IEnumerable<Parameter>
            {
                // auto-generated class
                
                public ParameterList(PyObject pyobj) : base(pyobj) { }

                public ParameterList(PythonObject other) : base(other.PyObject as PyObject) { }

                public ParameterList(params Parameter[] parameters)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    dynamic py = __self__.InvokeMethod("ParameterList");
                    self=py as PyObject;
                    extend(parameters);
                }
                
                /// <summary>
                /// Appends a given parameter at the end of the list.
                /// </summary>
                public void append(nn.Parameter parameter)
                {
                    var pyargs=ToTuple(new object[]
                    {
                        parameter,
                    });
                    self.InvokeMethod("append", pyargs);
                }
                
                /// <summary>
                /// Appends parameters from a Python iterable to the end of the list.
                /// </summary>
                public void extend(params Parameter[] parameters)
                {
                    var pyargs= ToTuple(new[]{ToTuple(parameters)});
                    self.InvokeMethod("extend", pyargs);
                }

                public int len()
                {
                    return self.InvokeMethod("__len__").As<int>();
                }

                public Parameter this[int index]
                {
                    get { return new Parameter(self.GetItem(index)); }
                }

                public IEnumerator<Parameter> GetEnumerator()
                {
                    foreach (PyObject m in self)
                        yield return new Parameter(m);
                }

                IEnumerator IEnumerable.GetEnumerator()
                {
                    return GetEnumerator();
                }
            }
        }
    }
    
}
