// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Negative log likelihood loss with Poisson distribution of target.<br></br>
            ///	
            ///	The loss can be described as:
            ///	
            ///	\[\text{target} \sim \mathrm{Poisson}(\text{input})
            ///	
            ///	\text{loss}(\text{input}, \text{target}) = \text{input} - \text{target} * \log(\text{input})
            ///	                            + \log(\text{target!})\]
            ///	
            ///	The last term can be omitted or approximated with Stirling formula.<br></br>
            ///	 The
            ///	approximation is used for target values more than 1.<br></br>
            ///	 For targets less or
            ///	equal to 1 zeros are added to the loss.
            /// </summary>
            public partial class PoissonNLLLoss : Module
            {
                // auto-generated class
                
                public PoissonNLLLoss(PyObject pyobj) : base(pyobj) { }
                
                public PoissonNLLLoss(Module other) : base(other.PyObject as PyObject) { }
                
                public PoissonNLLLoss(bool? log_input = true, bool? full = false, bool? size_average = null, double? eps = 1.0e-5, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (log_input!=true) kwargs["log_input"]=ToPython(log_input);
                    if (full!=false) kwargs["full"]=ToPython(full);
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (eps!=1.0e-5) kwargs["eps"]=ToPython(eps);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("PoissonNLLLoss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
