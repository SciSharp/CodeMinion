// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Returns cosine similarity between \(x_1\) and \(x_2\), computed along dim.<br></br>
            ///	
            ///	\[\text{similarity} = \dfrac{x_1 \cdot x_2}{\max(\Vert x_1 \Vert _2 \cdot \Vert x_2 \Vert _2, \epsilon)}.
            ///	
            ///	\]
            /// </summary>
            public partial class CosineSimilarity : Module
            {
                // auto-generated class
                
                public CosineSimilarity(PyObject pyobj) : base(pyobj) { }
                
                public CosineSimilarity(Module other) : base(other.PyObject as PyObject) { }
                
                public CosineSimilarity(int? dim = 1, double? eps = 1.0e-5)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (dim!=1) kwargs["dim"]=ToPython(dim);
                    if (eps!=1.0e-5) kwargs["eps"]=ToPython(eps);
                    dynamic py = __self__.InvokeMethod("CosineSimilarity", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
