// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Computes the batchwise pairwise distance between vectors \(v_1\), \(v_2\) using the p-norm:
            ///	
            ///	\[\Vert x \Vert _p = \left( \sum_{i=1}^n  \vert x_i \vert ^ p \right) ^ {1/p}.
            ///	
            ///	\]
            /// </summary>
            public partial class PairwiseDistance : Module
            {
                // auto-generated class
                
                public PairwiseDistance(PyObject pyobj) : base(pyobj) { }
                
                public PairwiseDistance(Module other) : base(other.PyObject as PyObject) { }
                
                public PairwiseDistance(double p = 2.0, double? eps = 1.0e-5, bool? keepdim = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (p!=2.0) kwargs["p"]=ToPython(p);
                    if (eps!=1.0e-5) kwargs["eps"]=ToPython(eps);
                    if (keepdim!=false) kwargs["keepdim"]=ToPython(keepdim);
                    dynamic py = __self__.InvokeMethod("PairwiseDistance", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
