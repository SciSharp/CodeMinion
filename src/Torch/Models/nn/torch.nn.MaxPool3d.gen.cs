// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Applies a 3D max pooling over an input signal composed of several input
            ///	planes.<br></br>
            ///	
            ///	In the simplest case, the output value of the layer with input size \((N, C, D, H, W)\),
            ///	output \((N, C, D_{out}, H_{out}, W_{out})\) and kernel_size \((kD, kH, kW)\)
            ///	can be precisely described as:
            ///	
            ///	\[\begin{aligned}
            ///	    \text{out}(N_i, C_j, d, h, w) ={} & \max_{k=0, \ldots, kD-1} \max_{m=0, \ldots, kH-1} \max_{n=0, \ldots, kW-1} \\
            ///	                                      & \text{input}(N_i, C_j, \text{stride[0]} \times d + k,
            ///	                                                     \text{stride[1]} \times h + m, \text{stride[2]} \times w + n)
            ///	\end{aligned}
            ///	
            ///	\]
            ///	
            ///	If padding is non-zero, then the input is implicitly zero-padded on both sides
            ///	for padding number of points.<br></br>
            ///	 dilation controls the spacing between the kernel points.<br></br>
            ///	
            ///	It is harder to describe, but this link has a nice visualization of what dilation does.<br></br>
            ///	
            ///	The parameters kernel_size, stride, padding, dilation can either be:
            ///	
            ///	a single int – in which case the same value is used for the depth, height and width dimension
            ///	a tuple of three ints – in which case, the first int is used for the depth dimension,
            ///	the second int for the height dimension and the third int for the width dimension
            /// </summary>
            public partial class MaxPool3d : Module
            {
                // auto-generated class
                
                public MaxPool3d(PyObject pyobj) : base(pyobj) { }
                
                public MaxPool3d(Module other) : base(other.PyObject as PyObject) { }
                
                public MaxPool3d(int[] kernel_size, int[] stride, int padding = 0, int dilation = 1, bool return_indices = false, bool ceil_mode = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                        kernel_size,
                        stride,
                    });
                    var kwargs=new PyDict();
                    if (padding!=0) kwargs["padding"]=ToPython(padding);
                    if (dilation!=1) kwargs["dilation"]=ToPython(dilation);
                    if (return_indices!=false) kwargs["return_indices"]=ToPython(return_indices);
                    if (ceil_mode!=false) kwargs["ceil_mode"]=ToPython(ceil_mode);
                    dynamic py = __self__.InvokeMethod("MaxPool3d", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
