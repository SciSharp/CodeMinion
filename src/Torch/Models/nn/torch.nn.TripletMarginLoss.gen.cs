// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Creates a criterion that measures the triplet loss given an input
            ///	tensors \(x1\), \(x2\), \(x3\) and a margin with a value greater than \(0\).<br></br>
            ///	
            ///	This is used for measuring a relative similarity between samples.<br></br>
            ///	 A triplet
            ///	is composed by a, p and n (i.e., anchor, positive examples and negative
            ///	examples respectively).<br></br>
            ///	 The shapes of all input tensors should be
            ///	\((N, D)\).<br></br>
            ///	
            ///	The distance swap is described in detail in the paper Learning shallow
            ///	convolutional feature descriptors with triplet losses by
            ///	V.<br></br>
            ///	 Balntas, E.<br></br>
            ///	 Riba et al.<br></br>
            ///	
            ///	The loss function for each sample in the mini-batch is:
            ///	
            ///	\[L(a, p, n) = \max \{d(a_i, p_i) - d(a_i, n_i) + {\rm margin}, 0\}
            ///	
            ///	\]
            ///	
            ///	where
            ///	
            ///	\[d(x_i, y_i) = \left\lVert {\bf x}_i - {\bf y}_i \right\rVert_p
            ///	
            ///	\]
            /// </summary>
            public partial class TripletMarginLoss : Module
            {
                // auto-generated class
                
                public TripletMarginLoss(PyObject pyobj) : base(pyobj) { }
                
                public TripletMarginLoss(Module other) : base(other.PyObject as PyObject) { }
                
                public TripletMarginLoss(float? margin = 1.0f, int? p = 2, bool? swap = false, bool? size_average = null, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (margin!=1.0f) kwargs["margin"]=ToPython(margin);
                    if (p!=2) kwargs["p"]=ToPython(p);
                    if (swap!=false) kwargs["swap"]=ToPython(swap);
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("TripletMarginLoss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
