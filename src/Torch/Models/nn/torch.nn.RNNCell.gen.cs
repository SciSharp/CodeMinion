// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	An Elman RNN cell with tanh or ReLU non-linearity.<br></br>
            ///	
            ///	\[h' = \tanh(W_{ih} x + b_{ih}  +  W_{hh} h + b_{hh})\]
            ///	
            ///	If nonlinearity is ‘relu’, then ReLU is used in place of tanh.
            /// </summary>
            public partial class RNNCell : Module
            {
                // auto-generated class
                
                public RNNCell(PyObject pyobj) : base(pyobj) { }
                
                public RNNCell(Module other) : base(other.PyObject as PyObject) { }
                
                public RNNCell(int input_size, int hidden_size, bool bias = true, string nonlinearity = "tanh")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                        input_size,
                        hidden_size,
                    });
                    var kwargs=new PyDict();
                    if (bias!=true) kwargs["bias"]=ToPython(bias);
                    if (nonlinearity!="tanh") kwargs["nonlinearity"]=ToPython(nonlinearity);
                    dynamic py = __self__.InvokeMethod("RNNCell", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
