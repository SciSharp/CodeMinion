// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Creates a criterion that uses a squared term if the absolute
            ///	element-wise error falls below 1 and an L1 term otherwise.<br></br>
            ///	
            ///	It is less sensitive to outliers than the MSELoss and in some cases
            ///	prevents exploding gradients (e.g.<br></br>
            ///	 see Fast R-CNN paper by Ross Girshick).<br></br>
            ///	
            ///	Also known as the Huber loss:
            ///	
            ///	\[\text{loss}(x, y) = \frac{1}{n} \sum_{i} z_{i}
            ///	
            ///	\]
            ///	
            ///	where \(z_{i}\) is given by:
            ///	
            ///	\[z_{i} =
            ///	\begin{cases}
            ///	0.5 (x_i - y_i)^2, & \text{if } |x_i - y_i| < 1 \\
            ///	|x_i - y_i| - 0.5, & \text{otherwise }
            ///	\end{cases}
            ///	
            ///	\]
            ///	
            ///	\(x\) and \(y\) arbitrary shapes with a total of \(n\) elements each
            ///	the sum operation still operates over all the elements, and divides by \(n\).<br></br>
            ///	
            ///	The division by \(n\) can be avoided if sets reduction = 'sum'.
            /// </summary>
            public partial class SmoothL1Loss : Module
            {
                // auto-generated class
                
                public SmoothL1Loss(PyObject pyobj) : base(pyobj) { }
                
                public SmoothL1Loss(Module other) : base(other.PyObject as PyObject) { }
                
                public SmoothL1Loss(bool? size_average = null, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("SmoothL1Loss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
