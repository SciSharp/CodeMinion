// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	This criterion combines nn.LogSoftmax() and nn.NLLLoss() in one single class.<br></br>
            ///	
            ///	It is useful when training a classification problem with C classes.<br></br>
            ///	
            ///	If provided, the optional argument weight should be a 1D Tensor
            ///	assigning weight to each of the classes.<br></br>
            ///	
            ///	This is particularly useful when you have an unbalanced training set.<br></br>
            ///	
            ///	The input is expected to contain raw, unnormalized scores for each class.<br></br>
            ///	
            ///	input has to be a Tensor of size either \((minibatch, C)\) or
            ///	\((minibatch, C, d_1, d_2, ..., d_K)\)
            ///	with \(K \geq 1\) for the K-dimensional case (described later).<br></br>
            ///	
            ///	This criterion expects a class index in the range \([0, C-1]\) as the
            ///	target for each value of a 1D tensor of size minibatch; if ignore_index
            ///	is specified, this criterion also accepts this class index (this index may not
            ///	necessarily be in the class range).<br></br>
            ///	
            ///	The loss can be described as:
            ///	
            ///	\[\text{loss}(x, class) = -\log\left(\frac{\exp(x[class])}{\sum_j \exp(x[j])}\right)
            ///	               = -x[class] + \log\left(\sum_j \exp(x[j])\right)
            ///	
            ///	\]
            ///	
            ///	or in the case of the weight argument being specified:
            ///	
            ///	\[\text{loss}(x, class) = weight[class] \left(-x[class] + \log\left(\sum_j \exp(x[j])\right)\right)
            ///	
            ///	\]
            ///	
            ///	The losses are averaged across observations for each minibatch.<br></br>
            ///	
            ///	Can also be used for higher dimension inputs, such as 2D images, by providing
            ///	an input of size \((minibatch, C, d_1, d_2, ..., d_K)\) with \(K \geq 1\),
            ///	where \(K\) is the number of dimensions, and a target of appropriate shape
            ///	(see below).
            /// </summary>
            public partial class CrossEntropyLoss : Module
            {
                // auto-generated class
                
                public CrossEntropyLoss(PyObject pyobj) : base(pyobj) { }
                
                public CrossEntropyLoss(Module other) : base(other.PyObject as PyObject) { }
                
                public CrossEntropyLoss(Tensor weight = null, bool? size_average = null, int? ignore_index = -100, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (weight!=null) kwargs["weight"]=ToPython(weight);
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (ignore_index!=-100) kwargs["ignore_index"]=ToPython(ignore_index);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("CrossEntropyLoss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
