// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Upsamples a given multi-channel 1D (temporal), 2D (spatial) or 3D (volumetric) data.<br></br>
            ///	
            ///	The input data is assumed to be of the form
            ///	minibatch x channels x [optional depth] x [optional height] x width.<br></br>
            ///	
            ///	Hence, for spatial inputs, we expect a 4D Tensor and for volumetric inputs, we expect a 5D Tensor.<br></br>
            ///	
            ///	The algorithms available for upsampling are nearest neighbor and linear,
            ///	bilinear, bicubic and trilinear for 3D, 4D and 5D input Tensor,
            ///	respectively.<br></br>
            ///	
            ///	One can either give a scale_factor or the target output size to
            ///	calculate the output size.<br></br>
            ///	 (You cannot give both, as it is ambiguous)
            /// </summary>
            public partial class Upsample : Module
            {
                // auto-generated class
                
                public Upsample(PyObject pyobj) : base(pyobj) { }
                
                public Upsample(Module other) : base(other.PyObject as PyObject) { }
                
                public Upsample(int[] size = null, double[] scale_factor = null, string mode = "nearest", bool? align_corners = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (size!=null) kwargs["size"]=ToPython(size);
                    if (scale_factor!=null) kwargs["scale_factor"]=ToPython(scale_factor);
                    if (mode!="nearest") kwargs["mode"]=ToPython(mode);
                    if (align_corners!=false) kwargs["align_corners"]=ToPython(align_corners);
                    dynamic py = __self__.InvokeMethod("Upsample", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
