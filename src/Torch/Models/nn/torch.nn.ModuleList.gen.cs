// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            /// Holds submodules in a list.
            /// 
            /// ModuleList can be indexed like a regular Python list, but
            /// modules it contains are properly registered, and will be visible by all
            /// Module methods.
            /// </summary>
            public partial class ModuleList : PythonObject
            {
                // auto-generated class
                
                public ModuleList(PyObject pyobj) : base(pyobj) { }
                
                public ModuleList(params Module[] modules)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (modules!=null) kwargs["modules"]=ToPython(modules);
                    dynamic py = __self__.InvokeMethod("ModuleList", pyargs, kwargs);
                    self=py as PyObject;
                }
                
                /// <summary>
                /// Appends a given module to the end of the list.
                /// </summary>
                public void append(nn.Module module)
                {
                    //auto-generated code, do not change
                    var __self__=self;
                    var pyargs=ToTuple(new object[]
                    {
                        module,
                    });
                    var kwargs=new PyDict();
                    dynamic py = __self__.InvokeMethod("append", pyargs, kwargs);
                }
                
                /// <summary>
                /// Appends modules from a Python iterable to the end of the list.
                /// </summary>
                public void extend(params Module[] modules)
                {
                    //auto-generated code, do not change
                    var __self__=self;
                    var pyargs=ToTuple(new object[]
                    {
                        modules,
                    });
                    var kwargs=new PyDict();
                    dynamic py = __self__.InvokeMethod("extend", pyargs, kwargs);
                }
                
                /// <summary>
                /// Insert a given module before a given index in the list.
                /// </summary>
                /// <param name="index">
                /// index to insert.
                /// </param>
                /// <param name="module">
                /// module to insert
                /// </param>
                public void insert(int index, nn.Module module)
                {
                    //auto-generated code, do not change
                    var __self__=self;
                    var pyargs=ToTuple(new object[]
                    {
                        index,
                        module,
                    });
                    var kwargs=new PyDict();
                    dynamic py = __self__.InvokeMethod("insert", pyargs, kwargs);
                }
                
            }
        }
    }
    
}
