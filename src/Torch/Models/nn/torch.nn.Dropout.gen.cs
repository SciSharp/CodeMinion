// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	During training, randomly zeroes some of the elements of the input
            ///	tensor with probability p using samples from a Bernoulli
            ///	distribution.<br></br>
            ///	 Each channel will be zeroed out independently on every forward
            ///	call.<br></br>
            ///	
            ///	This has proven to be an effective technique for regularization and
            ///	preventing the co-adaptation of neurons as described in the paper
            ///	Improving neural networks by preventing co-adaptation of feature
            ///	detectors .
            ///	
            ///	Furthermore, the outputs are scaled by a factor of \(\frac{1}{1-p}\) during
            ///	training.<br></br>
            ///	 This means that during evaluation the module simply computes an
            ///	identity function.
            /// </summary>
            public partial class Dropout : Module
            {
                // auto-generated class
                
                public Dropout(PyObject pyobj) : base(pyobj) { }
                
                public Dropout(Module other) : base(other.PyObject as PyObject) { }
                
                public Dropout(double p = 0.5, bool inplace = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (p!=0.5) kwargs["p"]=ToPython(p);
                    if (inplace!=false) kwargs["inplace"]=ToPython(inplace);
                    dynamic py = __self__.InvokeMethod("Dropout", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
