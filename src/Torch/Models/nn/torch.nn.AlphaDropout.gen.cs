// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Applies Alpha Dropout over the input.<br></br>
            ///	
            ///	Alpha Dropout is a type of Dropout that maintains the self-normalizing
            ///	property.<br></br>
            ///	
            ///	For an input with zero mean and unit standard deviation, the output of
            ///	Alpha Dropout maintains the original mean and standard deviation of the
            ///	input.<br></br>
            ///	
            ///	Alpha Dropout goes hand-in-hand with SELU activation function, which ensures
            ///	that the outputs have zero mean and unit standard deviation.<br></br>
            ///	
            ///	During training, it randomly masks some of the elements of the input
            ///	tensor with probability p using samples from a bernoulli distribution.<br></br>
            ///	
            ///	The elements to masked are randomized on every forward call, and scaled
            ///	and shifted to maintain zero mean and unit standard deviation.<br></br>
            ///	
            ///	During evaluation the module simply computes an identity function.<br></br>
            ///	
            ///	More details can be found in the paper Self-Normalizing Neural Networks .
            /// </summary>
            public partial class AlphaDropout : Module
            {
                // auto-generated class
                
                public AlphaDropout(PyObject pyobj) : base(pyobj) { }
                
                public AlphaDropout(Module other) : base(other.PyObject as PyObject) { }
                
                public AlphaDropout(float p = 0.5f, bool? inplace = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (p!=0.5f) kwargs["p"]=ToPython(p);
                    if (inplace!=false) kwargs["inplace"]=ToPython(inplace);
                    dynamic py = __self__.InvokeMethod("AlphaDropout", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
