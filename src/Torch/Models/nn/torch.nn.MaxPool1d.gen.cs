// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Applies a 1D max pooling over an input signal composed of several input
            ///	planes.<br></br>
            ///	
            ///	In the simplest case, the output value of the layer with input size \((N, C, L)\)
            ///	and output \((N, C, L_{out})\) can be precisely described as:
            ///	
            ///	\[out(N_i, C_j, k) = \max_{m=0, \ldots, \text{kernel\_size} - 1}
            ///	        input(N_i, C_j, stride \times k + m)
            ///	
            ///	\]
            ///	
            ///	If padding is non-zero, then the input is implicitly zero-padded on both sides
            ///	for padding number of points.<br></br>
            ///	 dilation controls the spacing between the kernel points.<br></br>
            ///	
            ///	It is harder to describe, but this link has a nice visualization of what dilation does.
            /// </summary>
            public partial class MaxPool1d : Module
            {
                // auto-generated class
                
                public MaxPool1d(PyObject pyobj) : base(pyobj) { }
                
                public MaxPool1d(Module other) : base(other.PyObject as PyObject) { }
                
                public MaxPool1d(int kernel_size, int stride = 1, int padding = 0, int dilation = 1, bool return_indices = false, bool ceil_mode = false)
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                        kernel_size,
                    });
                    var kwargs=new PyDict();
                    if (stride!=1) kwargs["stride"]=ToPython(stride);
                    if (padding!=0) kwargs["padding"]=ToPython(padding);
                    if (dilation!=1) kwargs["dilation"]=ToPython(dilation);
                    if (return_indices!=false) kwargs["return_indices"]=ToPython(return_indices);
                    if (ceil_mode!=false) kwargs["ceil_mode"]=ToPython(ceil_mode);
                    dynamic py = __self__.InvokeMethod("MaxPool1d", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
