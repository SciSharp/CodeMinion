// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;

namespace Torch
{
    public static partial class torch {
        public static partial class nn {
            /// <summary>
            ///	Creates a criterion that measures the loss given
            ///	inputs \(x1\), \(x2\), two 1D mini-batch Tensors,
            ///	and a label 1D mini-batch tensor \(y\) (containing 1 or -1).<br></br>
            ///	
            ///	If \(y = 1\) then it assumed the first input should be ranked higher
            ///	(have a larger value) than the second input, and vice-versa for \(y = -1\).<br></br>
            ///	
            ///	The loss function for each sample in the mini-batch is:
            ///	
            ///	\[\text{loss}(x, y) = \max(0, -y * (x1 - x2) + \text{margin})
            ///	
            ///	\]
            /// </summary>
            public partial class MarginRankingLoss : Module
            {
                // auto-generated class
                
                public MarginRankingLoss(PyObject pyobj) : base(pyobj) { }
                
                public MarginRankingLoss(Module other) : base(other.PyObject as PyObject) { }
                
                public MarginRankingLoss(float? margin = 0.0f, bool? size_average = null, bool? reduce = null, string reduction = "mean")
                {
                    //auto-generated code, do not change
                    var nn = self.GetAttr("nn");
                    var __self__=nn;
                    var pyargs=ToTuple(new object[]
                    {
                    });
                    var kwargs=new PyDict();
                    if (margin!=0.0f) kwargs["margin"]=ToPython(margin);
                    if (size_average!=null) kwargs["size_average"]=ToPython(size_average);
                    if (reduce!=null) kwargs["reduce"]=ToPython(reduce);
                    if (reduction!="mean") kwargs["reduction"]=ToPython(reduction);
                    dynamic py = __self__.InvokeMethod("MarginRankingLoss", pyargs, kwargs);
                    self=py as PyObject;
                }
                
            }
        }
    }
    
}
