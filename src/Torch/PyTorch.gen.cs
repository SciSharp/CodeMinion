// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Numpy;
using Numpy.Models;


namespace Torch
{
    public partial class PyTorch
    {
        
        public bool is_tensor(Object obj)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                obj,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("is_tensor", pyargs, kwargs);
            return ToCsharp<bool>(py);
        }
        
        public bool is_storage(Object obj)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                obj,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("is_storage", pyargs, kwargs);
            return ToCsharp<bool>(py);
        }
        
        public bool is_floating_point(Tensor tensor)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                tensor,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("is_floating_point", pyargs, kwargs);
            return ToCsharp<bool>(py);
        }
        
        public void set_default_dtype(Dtype d)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                d,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("set_default_dtype", pyargs, kwargs);
        }
        
        public void get_default_dtype()
        {
            //auto-generated code, do not change
            var __self__=self;
            dynamic py = __self__.InvokeMethod("get_default_dtype");
        }
        
        public void set_default_tensor_type(Dtype t)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                t,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("set_default_tensor_type", pyargs, kwargs);
        }
        
        public void numel(Tensor input)
        {
            //auto-generated code, do not change
            var __self__=self;
            var pyargs=ToTuple(new object[]
            {
                input,
            });
            var kwargs=new PyDict();
            dynamic py = __self__.InvokeMethod("numel", pyargs, kwargs);
        }

        //public void set_printoptions(int precision =  4, int threshold =  1000, int edgeitems =  3, int linewidth =  80,  profile, bool sci_mode)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        profile,
        //        sci_mode,
        //    });
        //    var kwargs=new PyDict();
        //    if (precision!= 4) kwargs["precision"]=ToPython(precision);
        //    if (threshold!= 1000) kwargs["threshold"]=ToPython(threshold);
        //    if (edgeitems!= 3) kwargs["edgeitems"]=ToPython(edgeitems);
        //    if (linewidth!= 80) kwargs["linewidth"]=ToPython(linewidth);
        //    dynamic py = __self__.InvokeMethod("set_printoptions", pyargs, kwargs);
        //}

        //public void set_flush_denormal(bool mode)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mode,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("set_flush_denormal", pyargs, kwargs);
        //}

        //public Tensor sparse_coo_tensor(int indices, (array_like) values,  size, Dtype dtype = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        indices,
        //        values,
        //        size,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("sparse_coo_tensor", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sparse_coo_tensor<T>(int indices, (array_like) values,  size, Dtype dtype = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        indices,
        //        values,
        //        size,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("sparse_coo_tensor", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor as_tensor((array_like) data, Dtype dtype = null, Device device = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        data,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    dynamic py = __self__.InvokeMethod("as_tensor", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor as_tensor<T>((array_like) data, Dtype dtype = null, Device device = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        data,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    dynamic py = __self__.InvokeMethod("as_tensor", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor from_numpy()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("from_numpy");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor zeros(Shape sizes, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        sizes,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("zeros", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor zeros_like(Tensor input, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("zeros_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor ones(Shape sizes, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        sizes,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("ones", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor ones_like(Tensor input, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("ones_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor arange(double start, double end, double step, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        start,
        //        end,
        //        step,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("arange", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor range(float start, float end, float step, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        start,
        //        end,
        //        step,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("range", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor linspace(float start, float end, int steps, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        start,
        //        end,
        //        steps,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("linspace", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor logspace(float start, float end, int steps, float @base, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        start,
        //        end,
        //        steps,
        //        @base,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("logspace", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor eye(int n, int? m = null, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        n,
        //    });
        //    var kwargs=new PyDict();
        //    if (m!=null) kwargs["m"]=ToPython(m);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("eye", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        public Tensor empty(Shape sizes, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null, bool? pin_memory = null)
        {
            //auto-generated code, do not change
            var __self__ = self;
            var pyargs = ToTuple(new object[]
            {
                sizes,
            });
            var kwargs = new PyDict();
            if (@out != null) kwargs["out"] = ToPython(@out);
            if (dtype != null) kwargs["dtype"] = ToPython(dtype);
            if (layout != null) kwargs["layout"] = ToPython(layout);
            if (device != null) kwargs["device"] = ToPython(device);
            if (requires_grad != null) kwargs["requires_grad"] = ToPython(requires_grad);
            if (pin_memory != null) kwargs["pin_memory"] = ToPython(pin_memory);
            dynamic py = __self__.InvokeMethod("empty", pyargs, kwargs);
            return ToCsharp<Tensor>(py);
        }

        //public Tensor empty_like(Tensor input, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("empty_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor full(Shape size,  fill_value, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        size,
        //        fill_value,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("full", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor full_like(Tensor input,  fill_value, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        fill_value,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("full_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor cat( tensors, int? dim = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensors,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cat", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void chunk(Tensor tensor, int chunks, int dim)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //        chunks,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("chunk", pyargs, kwargs);
        //}

        //public Tensor gather(Tensor input, int dim, (LongTensor) index, Tensor @out = null, (bool,optional) sparse_grad)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //        index,
        //        sparse_grad,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("gather", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor index_select(Tensor input, int dim, (LongTensor) index, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //        index,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("index_select", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor masked_select(Tensor input, (ByteTensor) mask, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        mask,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("masked_select", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor narrow(Tensor input, int dimension, int start, int length)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dimension,
        //        start,
        //        length,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("narrow", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void nonzero(Tensor input, LongTensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("nonzero", pyargs, kwargs);
        //}

        //public Tensor reshape(Tensor input,  shape)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        shape,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("reshape", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void split(Tensor tensor, int split_size_or_sections, int dim)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //        split_size_or_sections,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("split", pyargs, kwargs);
        //}

        //public Tensor squeeze(Tensor input, int? dim = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("squeeze", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor stack( seq, int dim, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        seq,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("stack", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor t(Tensor input)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("t", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor take(Tensor input, (LongTensor) indices)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        indices,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("take", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor transpose(Tensor input, int dim0, int dim1)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim0,
        //        dim1,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("transpose", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void unbind(Tensor tensor, int dim)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("unbind", pyargs, kwargs);
        //}

        //public Tensor unsqueeze(Tensor input, int dim, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("unsqueeze", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor @where((ByteTensor) condition, Tensor x, Tensor y)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        condition,
        //        x,
        //        y,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("where", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void manual_seed(int seed)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        seed,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("manual_seed", pyargs, kwargs);
        //}

        //public void initial_seed()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("initial_seed");
        //}

        //public void get_rng_state()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("get_rng_state");
        //}

        //public void set_rng_state(torch.ByteTensor new_state)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        new_state,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("set_rng_state", pyargs, kwargs);
        //}

        //public Tensor bernoulli(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("bernoulli", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void multinomial(Tensor input, int num_samples, bool? replacement = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        num_samples,
        //    });
        //    var kwargs=new PyDict();
        //    if (replacement!=null) kwargs["replacement"]=ToPython(replacement);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("multinomial", pyargs, kwargs);
        //}

        //public void normal()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("normal");
        //}

        //public Tensor normal()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("normal");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor normal()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("normal");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor normal()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("normal");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor rand(Shape sizes, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        sizes,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("rand", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor rand_like(Tensor input, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("rand_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor randint(int? low = null, int high, (tuple) size, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        high,
        //        size,
        //    });
        //    var kwargs=new PyDict();
        //    if (low!=null) kwargs["low"]=ToPython(low);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("randint", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor randint_like(Tensor input, int? low = null, int high, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        high,
        //    });
        //    var kwargs=new PyDict();
        //    if (low!=null) kwargs["low"]=ToPython(low);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("randint_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor randn(Shape sizes, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        sizes,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("randn", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor randn_like(Tensor input, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("randn_like", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void randperm(int n, Tensor @out = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        n,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("randperm", pyargs, kwargs);
        //}

        //public void save( obj,  f,  pickle_module,  pickle_protocol)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        obj,
        //        f,
        //        pickle_module,
        //        pickle_protocol,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("save", pyargs, kwargs);
        //}

        //public void load( f,  map_location,  pickle_module,  pickle_load_args)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        f,
        //        map_location,
        //        pickle_module,
        //        pickle_load_args,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("load", pyargs, kwargs);
        //}

        //public void get_num_threads()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("get_num_threads");
        //}

        //public void set_num_threads()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("set_num_threads");
        //}

        //public Tensor abs(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("abs", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor acos(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("acos", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void @add()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("add");
        //}

        //public void @add()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("add");
        //}

        //public void @add()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("add");
        //}

        //public Tensor addcdiv(Tensor tensor, double? @value = null, Tensor tensor1, Tensor tensor2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //        tensor1,
        //        tensor2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@value!=null) kwargs["value"]=ToPython(@value);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("addcdiv", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor addcmul(Tensor tensor, double? @value = null, Tensor tensor1, Tensor tensor2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //        tensor1,
        //        tensor2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@value!=null) kwargs["value"]=ToPython(@value);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("addcmul", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor asin(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("asin", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor atan(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("atan", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor atan2(Tensor input1, Tensor input2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input1,
        //        input2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("atan2", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor ceil(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("ceil", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor clamp(Tensor input, double min, double max, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        min,
        //        max,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("clamp", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor clamp()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("clamp");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor clamp()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("clamp");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor cos(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cos", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor cosh(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cosh", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void div()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("div");
        //}

        //public Tensor div()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("div");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor div()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("div");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor digamma(Tensor input)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("digamma", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor erf(Tensor tensor, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("erf", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor erfc(Tensor tensor, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("erfc", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor erfinv(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("erfinv", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor exp(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("exp", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor expm1(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("expm1", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor floor(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("floor", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor fmod(Tensor input,  divisor, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        divisor,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("fmod", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor frac()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("frac");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void lerp(Tensor start, Tensor end,  weight, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        start,
        //        end,
        //        weight,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("lerp", pyargs, kwargs);
        //}

        //public Tensor log(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("log", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor log10(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("log10", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor log1p(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("log1p", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor log2(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("log2", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void mul()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("mul");
        //}

        //public void mul()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("mul");
        //}

        //public void mul()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("mul");
        //}

        //public Tensor mvlgamma(Tensor input, int p)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        p,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("mvlgamma", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor neg(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("neg", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void pow()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("pow");
        //}

        //public Tensor pow()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("pow");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor pow()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("pow");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor reciprocal(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("reciprocal", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor remainder(Tensor input,  divisor, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        divisor,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("remainder", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor round(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("round", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor rsqrt(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("rsqrt", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sigmoid(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("sigmoid", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sign(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("sign", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sin(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("sin", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sinh(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("sinh", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sqrt(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("sqrt", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor tan(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("tan", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor tanh(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("tanh", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor trunc(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("trunc", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void argmax()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("argmax");
        //}

        //public void argmax()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("argmax");
        //}

        //public void argmax()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("argmax");
        //}

        //public void argmin()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("argmin");
        //}

        //public void argmin()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("argmin");
        //}

        //public void argmin()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("argmin");
        //}

        //public Tensor cumprod(Tensor input, int dim, Dtype dtype = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cumprod", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor cumsum(Tensor input, int dim, Dtype dtype = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cumsum", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor dist(Tensor input, Tensor other, float? p = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (p!=null) kwargs["p"]=ToPython(p);
        //    dynamic py = __self__.InvokeMethod("dist", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void logsumexp(Tensor input,  dim, bool keepdim, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //        keepdim,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("logsumexp", pyargs, kwargs);
        //}

        //public void mean()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("mean");
        //}

        //public Tensor mean()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("mean");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor mean()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("mean");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void median()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("median");
        //}

        //public Tensor median()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("median");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void median()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("median");
        //}

        //public void mode(Tensor input, int dim, bool keepdim, Tensor values = null, Tensor indices = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dim,
        //        keepdim,
        //    });
        //    var kwargs=new PyDict();
        //    if (values!=null) kwargs["values"]=ToPython(values);
        //    if (indices!=null) kwargs["indices"]=ToPython(indices);
        //    dynamic py = __self__.InvokeMethod("mode", pyargs, kwargs);
        //}

        //public void norm(Tensor input, (abs(x)**ord)**(1./ord) p,  dim, bool? keepdim = null, Tensor @out = null, Dtype dtype = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        p,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    if (keepdim!=null) kwargs["keepdim"]=ToPython(keepdim);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    dynamic py = __self__.InvokeMethod("norm", pyargs, kwargs);
        //}

        //public void prod()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("prod");
        //}

        //public Tensor prod()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("prod");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor prod()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("prod");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void std()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("std");
        //}

        //public Tensor std()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("std");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor std()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("std");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void sum()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("sum");
        //}

        //public Tensor sum()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("sum");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor sum()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("sum");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void unique(Tensor input, bool sorted, bool return_inverse, bool return_counts, int dim)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        sorted,
        //        return_inverse,
        //        return_counts,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("unique", pyargs, kwargs);
        //}

        //public void unique_consecutive(Tensor input, bool return_inverse, bool return_counts, int dim)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        return_inverse,
        //        return_counts,
        //        dim,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("unique_consecutive", pyargs, kwargs);
        //}

        //public void @var()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("var");
        //}

        //public Tensor @var()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("var");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor @var()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("var");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void allclose(Tensor self, Tensor other, float? atol = null, float? rtol = null, float? equal_nan = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        self,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (atol!=null) kwargs["atol"]=ToPython(atol);
        //    if (rtol!=null) kwargs["rtol"]=ToPython(rtol);
        //    if (equal_nan!=null) kwargs["equal_nan"]=ToPython(equal_nan);
        //    dynamic py = __self__.InvokeMethod("allclose", pyargs, kwargs);
        //}

        //public void argsort(Tensor input, int? dim = null, bool? @descending = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (@descending!=null) kwargs["descending"]=ToPython(@descending);
        //    dynamic py = __self__.InvokeMethod("argsort", pyargs, kwargs);
        //}

        //public Tensor eq(Tensor input,  other, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("eq", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void equal()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("equal");
        //}

        //public Tensor ge(Tensor input,  other, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("ge", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor gt(Tensor input,  other, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("gt", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void isfinite(Tensor tensor)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("isfinite", pyargs, kwargs);
        //}

        //public void isinf(Tensor tensor)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("isinf", pyargs, kwargs);
        //}

        //public void isnan(Tensor tensor)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("isnan", pyargs, kwargs);
        //}

        //public void kthvalue(Tensor input, int k, int? dim = null, bool keepdim, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        k,
        //        keepdim,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("kthvalue", pyargs, kwargs);
        //}

        //public Tensor le(Tensor input,  other, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("le", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor lt(Tensor input,  other, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("lt", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void max()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("max");
        //}

        //public Tensor max()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("max");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void max()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("max");
        //}

        //public Tensor max()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("max");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void min()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("min");
        //}

        //public Tensor min()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("min");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void min()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("min");
        //}

        //public Tensor min()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("min");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor ne(Tensor input,  other, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("ne", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void sort(Tensor input, int? dim = null, bool? @descending = null, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (@descending!=null) kwargs["descending"]=ToPython(@descending);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("sort", pyargs, kwargs);
        //}

        //public void topk(Tensor input, int k, int? dim = null, bool? largest = null, bool? sorted = null, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        k,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (largest!=null) kwargs["largest"]=ToPython(largest);
        //    if (sorted!=null) kwargs["sorted"]=ToPython(sorted);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("topk", pyargs, kwargs);
        //}

        //public Tensor fft(Tensor input, int signal_ndim, bool? normalized = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        signal_ndim,
        //    });
        //    var kwargs=new PyDict();
        //    if (normalized!=null) kwargs["normalized"]=ToPython(normalized);
        //    dynamic py = __self__.InvokeMethod("fft", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor ifft(Tensor input, int signal_ndim, bool? normalized = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        signal_ndim,
        //    });
        //    var kwargs=new PyDict();
        //    if (normalized!=null) kwargs["normalized"]=ToPython(normalized);
        //    dynamic py = __self__.InvokeMethod("ifft", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor rfft(Tensor input, int signal_ndim, bool? normalized = null, bool? onesided = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        signal_ndim,
        //    });
        //    var kwargs=new PyDict();
        //    if (normalized!=null) kwargs["normalized"]=ToPython(normalized);
        //    if (onesided!=null) kwargs["onesided"]=ToPython(onesided);
        //    dynamic py = __self__.InvokeMethod("rfft", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor irfft(Tensor input, int signal_ndim, bool? normalized = null, bool? onesided = null,  signal_sizes)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        signal_ndim,
        //        signal_sizes,
        //    });
        //    var kwargs=new PyDict();
        //    if (normalized!=null) kwargs["normalized"]=ToPython(normalized);
        //    if (onesided!=null) kwargs["onesided"]=ToPython(onesided);
        //    dynamic py = __self__.InvokeMethod("irfft", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void stft(Tensor input, int n_fft, int? hop_length = null, int? win_length = null, Tensor window = null, bool? center = null, string pad_mode = null, bool? normalized = null, bool? onesided = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        n_fft,
        //    });
        //    var kwargs=new PyDict();
        //    if (hop_length!=null) kwargs["hop_length"]=ToPython(hop_length);
        //    if (win_length!=null) kwargs["win_length"]=ToPython(win_length);
        //    if (window!=null) kwargs["window"]=ToPython(window);
        //    if (center!=null) kwargs["center"]=ToPython(center);
        //    if (pad_mode!=null) kwargs["pad_mode"]=ToPython(pad_mode);
        //    if (normalized!=null) kwargs["normalized"]=ToPython(normalized);
        //    if (onesided!=null) kwargs["onesided"]=ToPython(onesided);
        //    dynamic py = __self__.InvokeMethod("stft", pyargs, kwargs);
        //}

        //public Tensor bartlett_window(int window_length, bool? periodic = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        window_length,
        //    });
        //    var kwargs=new PyDict();
        //    if (periodic!=null) kwargs["periodic"]=ToPython(periodic);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("bartlett_window", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor blackman_window(int window_length, bool? periodic = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        window_length,
        //    });
        //    var kwargs=new PyDict();
        //    if (periodic!=null) kwargs["periodic"]=ToPython(periodic);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("blackman_window", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor hamming_window(int window_length, bool? periodic = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        window_length,
        //    });
        //    var kwargs=new PyDict();
        //    if (periodic!=null) kwargs["periodic"]=ToPython(periodic);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("hamming_window", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor hann_window(int window_length, bool? periodic = null, Dtype dtype = null, Layout layout = null, Device device = null, bool? requires_grad = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        window_length,
        //    });
        //    var kwargs=new PyDict();
        //    if (periodic!=null) kwargs["periodic"]=ToPython(periodic);
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (requires_grad!=null) kwargs["requires_grad"]=ToPython(requires_grad);
        //    dynamic py = __self__.InvokeMethod("hann_window", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor bincount(Tensor input, Tensor weights, int minlength)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        weights,
        //        minlength,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("bincount", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void broadcast_tensors(int *tensors)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        *tensors,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("broadcast_tensors", pyargs, kwargs);
        //}

        //public void cartesian_prod(int *tensors)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        *tensors,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("cartesian_prod", pyargs, kwargs);
        //}

        //public void combinations(Tensor tensor, int? r = null, bool? with_replacement = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //    });
        //    var kwargs=new PyDict();
        //    if (r!=null) kwargs["r"]=ToPython(r);
        //    if (with_replacement!=null) kwargs["with_replacement"]=ToPython(with_replacement);
        //    dynamic py = __self__.InvokeMethod("combinations", pyargs, kwargs);
        //}

        //public Tensor cross(Tensor input, Tensor other, int? dim = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        other,
        //    });
        //    var kwargs=new PyDict();
        //    if (dim!=null) kwargs["dim"]=ToPython(dim);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cross", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor diag(Tensor input, int? diagonal = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (diagonal!=null) kwargs["diagonal"]=ToPython(diagonal);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("diag", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor diag_embed(Tensor input, int? offset = null, int? dim1 = null, int? dim2 = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (offset!=null) kwargs["offset"]=ToPython(offset);
        //    if (dim1!=null) kwargs["dim1"]=ToPython(dim1);
        //    if (dim2!=null) kwargs["dim2"]=ToPython(dim2);
        //    dynamic py = __self__.InvokeMethod("diag_embed", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor diagflat(Tensor input, int? offset = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (offset!=null) kwargs["offset"]=ToPython(offset);
        //    dynamic py = __self__.InvokeMethod("diagflat", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor diagonal(Tensor input, int? offset = null, int? dim1 = null, int? dim2 = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (offset!=null) kwargs["offset"]=ToPython(offset);
        //    if (dim1!=null) kwargs["dim1"]=ToPython(dim1);
        //    if (dim2!=null) kwargs["dim2"]=ToPython(dim2);
        //    dynamic py = __self__.InvokeMethod("diagonal", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor einsum(int equation,  operands)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        equation,
        //        operands,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("einsum", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor flatten(Tensor input, int start_dim, int end_dim)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        start_dim,
        //        end_dim,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("flatten", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor flip(Tensor input,  dims)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        dims,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("flip", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor rot90(Tensor input, int k,  dims)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        k,
        //        dims,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("rot90", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor histc(Tensor input, int bins, int min, int max, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        bins,
        //        min,
        //        max,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("histc", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void meshgrid(Tensor[] tensors)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensors,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("meshgrid", pyargs, kwargs);
        //}

        //public Tensor renorm(Tensor input, float p, int dim, float maxnorm, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        p,
        //        dim,
        //        maxnorm,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("renorm", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void repeat_interleave()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("repeat_interleave");
        //}

        //public Tensor repeat_interleave()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("repeat_interleave");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor repeat_interleave()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("repeat_interleave");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor roll(Tensor input, int shifts,  dims)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        shifts,
        //        dims,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("roll", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void tensordot(Tensor a, Tensor b, int dims)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        a,
        //        b,
        //        dims,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("tensordot", pyargs, kwargs);
        //}

        //public Tensor trace()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("trace");
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor tril(Tensor input, int? diagonal = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (diagonal!=null) kwargs["diagonal"]=ToPython(diagonal);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("tril", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor tril_indices(int row, int column, int offset, Dtype dtype = null, Device device = null, Layout layout = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        row,
        //        column,
        //        offset,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    dynamic py = __self__.InvokeMethod("tril_indices", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor triu(Tensor input, int? diagonal = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (diagonal!=null) kwargs["diagonal"]=ToPython(diagonal);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("triu", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor triu_indices(int row, int column, int offset, Dtype dtype = null, Device device = null, Layout layout = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        row,
        //        column,
        //        offset,
        //    });
        //    var kwargs=new PyDict();
        //    if (dtype!=null) kwargs["dtype"]=ToPython(dtype);
        //    if (device!=null) kwargs["device"]=ToPython(device);
        //    if (layout!=null) kwargs["layout"]=ToPython(layout);
        //    dynamic py = __self__.InvokeMethod("triu_indices", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor addbmm(double? beta = null, Tensor mat, double? alpha = null, Tensor batch1, Tensor batch2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mat,
        //        batch1,
        //        batch2,
        //    });
        //    var kwargs=new PyDict();
        //    if (beta!=null) kwargs["beta"]=ToPython(beta);
        //    if (alpha!=null) kwargs["alpha"]=ToPython(alpha);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("addbmm", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor addmm(double? beta = null, Tensor mat, double? alpha = null, Tensor mat1, Tensor mat2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mat,
        //        mat1,
        //        mat2,
        //    });
        //    var kwargs=new PyDict();
        //    if (beta!=null) kwargs["beta"]=ToPython(beta);
        //    if (alpha!=null) kwargs["alpha"]=ToPython(alpha);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("addmm", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor addmv(double? beta = null, Tensor tensor, double? alpha = null, Tensor mat, Tensor vec, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor,
        //        mat,
        //        vec,
        //    });
        //    var kwargs=new PyDict();
        //    if (beta!=null) kwargs["beta"]=ToPython(beta);
        //    if (alpha!=null) kwargs["alpha"]=ToPython(alpha);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("addmv", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor addr(double? beta = null, Tensor mat, double? alpha = null, Tensor vec1, Tensor vec2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mat,
        //        vec1,
        //        vec2,
        //    });
        //    var kwargs=new PyDict();
        //    if (beta!=null) kwargs["beta"]=ToPython(beta);
        //    if (alpha!=null) kwargs["alpha"]=ToPython(alpha);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("addr", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor baddbmm(double? beta = null, Tensor mat, double? alpha = null, Tensor batch1, Tensor batch2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mat,
        //        batch1,
        //        batch2,
        //    });
        //    var kwargs=new PyDict();
        //    if (beta!=null) kwargs["beta"]=ToPython(beta);
        //    if (alpha!=null) kwargs["alpha"]=ToPython(alpha);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("baddbmm", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor bmm(Tensor batch1, Tensor batch2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        batch1,
        //        batch2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("bmm", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void btrifact()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("btrifact");
        //}

        //public void btrifact_with_info()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("btrifact_with_info");
        //}

        //public void btrisolve()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("btrisolve");
        //}

        //public void btriunpack()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("btriunpack");
        //}

        //public void chain_matmul(Tensor[] matrices)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        matrices,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("chain_matmul", pyargs, kwargs);
        //}

        //public Tensor cholesky(Tensor a, bool? upper = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        a,
        //    });
        //    var kwargs=new PyDict();
        //    if (upper!=null) kwargs["upper"]=ToPython(upper);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cholesky", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor cholesky_inverse(Tensor u, bool? upper = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        u,
        //    });
        //    var kwargs=new PyDict();
        //    if (upper!=null) kwargs["upper"]=ToPython(upper);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cholesky_inverse", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor cholesky_solve(Tensor b, Tensor u, bool? upper = null, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        b,
        //        u,
        //    });
        //    var kwargs=new PyDict();
        //    if (upper!=null) kwargs["upper"]=ToPython(upper);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("cholesky_solve", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor dot()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("dot");
        //    return ToCsharp<Tensor>(py);
        //}

        //public void eig(Tensor a, bool eigenvectors, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        a,
        //        eigenvectors,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("eig", pyargs, kwargs);
        //}

        //public Tensor gels(Tensor B, Tensor A, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        B,
        //        A,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("gels", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void geqrf(Tensor input, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("geqrf", pyargs, kwargs);
        //}

        //public Tensor ger(Tensor vec1, Tensor vec2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        vec1,
        //        vec2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("ger", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void gesv()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("gesv");
        //}

        //public Tensor inverse(Tensor input, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("inverse", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor det(Tensor A)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        A,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("det", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor logdet(Tensor A)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        A,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("logdet", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void slogdet(Tensor A)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        A,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("slogdet", pyargs, kwargs);
        //}

        //public void lu(Tensor A, bool? pivot = null, bool? get_infos = null, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        A,
        //    });
        //    var kwargs=new PyDict();
        //    if (pivot!=null) kwargs["pivot"]=ToPython(pivot);
        //    if (get_infos!=null) kwargs["get_infos"]=ToPython(get_infos);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("lu", pyargs, kwargs);
        //}

        //public Tensor lu_solve(Tensor b, Tensor LU_data, (IntTensor) LU_pivots, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        b,
        //        LU_data,
        //        LU_pivots,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("lu_solve", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void lu_unpack(Tensor LU_data, Tensor LU_pivots, bool unpack_data, bool unpack_pivots)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        LU_data,
        //        LU_pivots,
        //        unpack_data,
        //        unpack_pivots,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("lu_unpack", pyargs, kwargs);
        //}

        //public Tensor matmul(Tensor tensor1, Tensor tensor2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        tensor1,
        //        tensor2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("matmul", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor matrix_power(Tensor input, int n)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        n,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("matrix_power", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor matrix_rank(Tensor input, float? tol = null, bool? symmetric = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (tol!=null) kwargs["tol"]=ToPython(tol);
        //    if (symmetric!=null) kwargs["symmetric"]=ToPython(symmetric);
        //    dynamic py = __self__.InvokeMethod("matrix_rank", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor mm(Tensor mat1, Tensor mat2, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mat1,
        //        mat2,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("mm", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor mv(Tensor mat, Tensor vec, Tensor @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        mat,
        //        vec,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("mv", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor orgqr(Tensor a, Tensor tau)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        a,
        //        tau,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("orgqr", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor ormqr(Tensor a, Tensor tau, Tensor mat)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        a,
        //        tau,
        //        mat,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("ormqr", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public Tensor pinverse(Tensor input, float rcond)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //        rcond,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("pinverse", pyargs, kwargs);
        //    return ToCsharp<Tensor>(py);
        //}

        //public void potrf()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("potrf");
        //}

        //public void potri()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("potri");
        //}

        //public void potrs()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("potrs");
        //}

        //public void pstrf(Tensor a, bool? upper = null, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        a,
        //    });
        //    var kwargs=new PyDict();
        //    if (upper!=null) kwargs["upper"]=ToPython(upper);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("pstrf", pyargs, kwargs);
        //}

        //public void qr(Tensor input, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("qr", pyargs, kwargs);
        //}

        //public void solve(Tensor B, Tensor A,  @out)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        B,
        //        A,
        //        @out,
        //    });
        //    var kwargs=new PyDict();
        //    dynamic py = __self__.InvokeMethod("solve", pyargs, kwargs);
        //}

        //public void svd(Tensor input, bool? some = null, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (some!=null) kwargs["some"]=ToPython(some);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("svd", pyargs, kwargs);
        //}

        //public void symeig(Tensor input, bool? eigenvectors = null, bool? upper = null, tuple @out = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        input,
        //    });
        //    var kwargs=new PyDict();
        //    if (eigenvectors!=null) kwargs["eigenvectors"]=ToPython(eigenvectors);
        //    if (upper!=null) kwargs["upper"]=ToPython(upper);
        //    if (@out!=null) kwargs["out"]=ToPython(@out);
        //    dynamic py = __self__.InvokeMethod("symeig", pyargs, kwargs);
        //}

        //public void triangular_solve(Tensor A, Tensor b, bool? upper = null, bool? transpose = null, bool? unitriangular = null)
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    var pyargs=ToTuple(new object[]
        //    {
        //        A,
        //        b,
        //    });
        //    var kwargs=new PyDict();
        //    if (upper!=null) kwargs["upper"]=ToPython(upper);
        //    if (transpose!=null) kwargs["transpose"]=ToPython(transpose);
        //    if (unitriangular!=null) kwargs["unitriangular"]=ToPython(unitriangular);
        //    dynamic py = __self__.InvokeMethod("triangular_solve", pyargs, kwargs);
        //}

        //public void trtrs()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("trtrs");
        //}

        //public void compiled_with_cxx11_abi()
        //{
        //    //auto-generated code, do not change
        //    var __self__=self;
        //    dynamic py = __self__.InvokeMethod("compiled_with_cxx11_abi");
        //}

    }
}
