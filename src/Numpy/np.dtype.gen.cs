// Copyright (c) 2019 by the SciSharp Team
// Code generated by CodeMinion: https://github.com/SciSharp/CodeMinion

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Python.Runtime;
using Python.Included;
using Numpy.Models;

namespace Numpy
{
    public static partial class np
    {
        
        /// <summary>
        /// compatible: Python bool
        /// </summary>
        public static Dtype bool_
            => NumPy.Instance.bool_;
        
        /// <summary>
        /// 8 bits
        /// </summary>
        public static Dtype bool8
            => NumPy.Instance.bool8;
        
        /// <summary>
        /// compatible: C char
        /// </summary>
        public static Dtype @byte
            => NumPy.Instance.@byte;
        
        /// <summary>
        /// compatible: C short
        /// </summary>
        public static Dtype @short
            => NumPy.Instance.@short;
        
        /// <summary>
        /// compatible: C int
        /// </summary>
        public static Dtype intc
            => NumPy.Instance.intc;
        
        /// <summary>
        /// compatible: Python int
        /// </summary>
        public static Dtype int_
            => NumPy.Instance.int_;
        
        /// <summary>
        /// compatible: C long long
        /// </summary>
        public static Dtype longlong
            => NumPy.Instance.longlong;
        
        /// <summary>
        /// large enough to fit a pointer
        /// </summary>
        public static Dtype intp
            => NumPy.Instance.intp;
        
        /// <summary>
        /// 8 bits
        /// </summary>
        public static Dtype int8
            => NumPy.Instance.int8;
        
        /// <summary>
        /// 16 bits
        /// </summary>
        public static Dtype int16
            => NumPy.Instance.int16;
        
        /// <summary>
        /// 32 bits
        /// </summary>
        public static Dtype int32
            => NumPy.Instance.int32;
        
        /// <summary>
        /// 64 bits
        /// </summary>
        public static Dtype int64
            => NumPy.Instance.int64;
        
        /// <summary>
        /// compatible: C unsigned char
        /// </summary>
        public static Dtype ubyte
            => NumPy.Instance.ubyte;
        
        /// <summary>
        /// compatible: C unsigned short
        /// </summary>
        public static Dtype @ushort
            => NumPy.Instance.@ushort;
        
        /// <summary>
        /// compatible: C unsigned int
        /// </summary>
        public static Dtype uintc
            => NumPy.Instance.uintc;
        
        /// <summary>
        /// compatible: Python int
        /// </summary>
        public static Dtype @uint
            => NumPy.Instance.@uint;
        
        /// <summary>
        /// compatible: C long long
        /// </summary>
        public static Dtype ulonglong
            => NumPy.Instance.ulonglong;
        
        /// <summary>
        /// large enough to fit a pointer
        /// </summary>
        public static Dtype uintp
            => NumPy.Instance.uintp;
        
        /// <summary>
        /// 8 bits
        /// </summary>
        public static Dtype uint8
            => NumPy.Instance.uint8;
        
        /// <summary>
        /// 16 bits
        /// </summary>
        public static Dtype uint16
            => NumPy.Instance.uint16;
        
        /// <summary>
        /// 32 bits
        /// </summary>
        public static Dtype uint32
            => NumPy.Instance.uint32;
        
        /// <summary>
        /// 64 bits
        /// </summary>
        public static Dtype uint64
            => NumPy.Instance.uint64;
        
        /// <summary>
        /// &#160;
        /// </summary>
        public static Dtype half
            => NumPy.Instance.half;
        
        /// <summary>
        /// compatible: C float
        /// </summary>
        public static Dtype single
            => NumPy.Instance.single;
        
        /// <summary>
        /// compatible: C double
        /// </summary>
        public static Dtype @double
            => NumPy.Instance.@double;
        
        /// <summary>
        /// compatible: Python float
        /// </summary>
        public static Dtype float_
            => NumPy.Instance.float_;
        
        /// <summary>
        /// compatible: C long float
        /// </summary>
        public static Dtype longfloat
            => NumPy.Instance.longfloat;
        
        /// <summary>
        /// 16 bits
        /// </summary>
        public static Dtype float16
            => NumPy.Instance.float16;
        
        /// <summary>
        /// 32 bits
        /// </summary>
        public static Dtype float32
            => NumPy.Instance.float32;
        
        /// <summary>
        /// 64 bits
        /// </summary>
        public static Dtype float64
            => NumPy.Instance.float64;
        
        /// <summary>
        /// 96 bits, platform?
        /// </summary>
        public static Dtype float96
            => NumPy.Instance.float96;
        
        /// <summary>
        /// 128 bits, platform?
        /// </summary>
        public static Dtype float128
            => NumPy.Instance.float128;
        
        /// <summary>
        /// &#160;
        /// </summary>
        public static Dtype csingle
            => NumPy.Instance.csingle;
        
        /// <summary>
        /// compatible: Python complex
        /// </summary>
        public static Dtype complex_
            => NumPy.Instance.complex_;
        
        /// <summary>
        /// &#160;
        /// </summary>
        public static Dtype clongfloat
            => NumPy.Instance.clongfloat;
        
        /// <summary>
        /// two 32-bit floats
        /// </summary>
        public static Dtype complex64
            => NumPy.Instance.complex64;
        
        /// <summary>
        /// two 64-bit floats
        /// </summary>
        public static Dtype complex128
            => NumPy.Instance.complex128;
        
        /// <summary>
        /// two 96-bit floats,
        /// platform?
        /// </summary>
        public static Dtype complex192
            => NumPy.Instance.complex192;
        
        /// <summary>
        /// two 128-bit floats,
        /// platform?
        /// </summary>
        public static Dtype complex256
            => NumPy.Instance.complex256;
        
        /// <summary>
        /// any Python object
        /// </summary>
        public static Dtype object_
            => NumPy.Instance.object_;
        
        /// <summary>
        /// compatible: Python bytes
        /// </summary>
        public static Dtype bytes_
            => NumPy.Instance.bytes_;
        
        /// <summary>
        /// compatible: Python unicode/str
        /// </summary>
        public static Dtype unicode_
            => NumPy.Instance.unicode_;
        
        /// <summary>
        /// &#160;
        /// </summary>
        public static Dtype @void
            => NumPy.Instance.@void;
        
        
    }
}
